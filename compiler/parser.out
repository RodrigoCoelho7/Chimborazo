Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ENTER
    NADA
    RESTO

Grammar

Rule 0     S' -> prg
Rule 1     prg -> declarations statements
Rule 2     declarations -> decl
Rule 3     declarations -> declarations decl
Rule 4     decl -> declV
Rule 5     decl -> declF
Rule 6     decl -> declL
Rule 7     declV -> VAR vari : tipo
Rule 8     vari -> atribD
Rule 9     vari -> ID
Rule 10    vari -> vari , atribD
Rule 11    vari -> vari , ID
Rule 12    tipo -> ENTERO
Rule 13    tipo -> REAL
Rule 14    tipo -> BOOLEANO
Rule 15    tipo -> STR
Rule 16    atribD -> ID = STRING
Rule 17    atribD -> ID = VERDADERO
Rule 18    atribD -> ID = FALSO
Rule 19    atribD -> ID = exp
Rule 20    declL -> LISTA ID = lista
Rule 21    lista -> [ ]
Rule 22    lista -> [ elementos ]
Rule 23    elementos -> elemento
Rule 24    elementos -> elementos , elemento
Rule 25    elemento -> INT
Rule 26    elemento -> FLOAT
Rule 27    elemento -> BOOLEANO
Rule 28    elemento -> STRING
Rule 29    elemento -> ID
Rule 30    elemento -> lista
Rule 31    declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
Rule 32    parametros -> <empty>
Rule 33    parametros -> ID : tipo
Rule 34    parametros -> parametros , ID : tipo
Rule 35    return -> INT
Rule 36    return -> ID
Rule 37    return -> FLOAT
Rule 38    return -> VERDADERO
Rule 39    return -> FALSO
Rule 40    statements -> stat
Rule 41    statements -> statements stat
Rule 42    stat -> atrib ;
Rule 43    stat -> conditions
Rule 44    stat -> ciclos
Rule 45    stat -> write
Rule 46    atrib -> ID = STRING
Rule 47    atrib -> ID = VERDADERO
Rule 48    atrib -> ID = FALSO
Rule 49    atrib -> ID = exp
Rule 50    exp -> exp + termo
Rule 51    exp -> exp - termo
Rule 52    exp -> termo
Rule 53    termo -> termo * fator
Rule 54    termo -> termo / fator
Rule 55    termo -> termo ^ fator
Rule 56    termo -> fator
Rule 57    fator -> INT
Rule 58    fator -> FLOAT
Rule 59    fator -> ID
Rule 60    fator -> ( exp )
Rule 61    fator -> cast
Rule 62    fator -> read
Rule 63    conditions -> SI expL ENTONCES statements endcondition
Rule 64    endcondition -> .
Rule 65    endcondition -> CASO CONTRARIO statements .
Rule 66    expL -> termoB
Rule 67    expL -> expL OR termoB
Rule 68    termoB -> fatorB
Rule 69    termoB -> termoB AND fatorB
Rule 70    fatorB -> condition
Rule 71    fatorB -> VERDADERO
Rule 72    fatorB -> FALSO
Rule 73    fatorB -> ( expL )
Rule 74    condition -> exp op exp
Rule 75    op -> >
Rule 76    op -> <
Rule 77    op -> IGUAL
Rule 78    op -> DIFERENTE
Rule 79    op -> > IGUAL
Rule 80    op -> < IGUAL
Rule 81    ciclos -> ENCUANTO expL HACER statements .
Rule 82    ciclos -> PARA expL SIGUIENTE atrib .
Rule 83    ciclos -> PARA expL SIGUIENTE atrib HACER statements .
Rule 84    write -> ESCRIBIR ( ID ) ;
Rule 85    write -> ESCRIBIR ( STRING ) ;
Rule 86    read -> LEER ( STRING )
Rule 87    cast -> tipocast ( exp )
Rule 88    cast -> tipocast ( STRING )
Rule 89    tipocast -> REAL
Rule 90    tipocast -> ENTERO
Rule 91    tipocast -> STR

Terminals, with rules where they appear

(                    : 31 60 73 84 85 86 87 88
)                    : 31 60 73 84 85 86 87 88
*                    : 53
+                    : 50
,                    : 10 11 24 34
-                    : 51
.                    : 31 64 65 81 82 83
/                    : 54
:                    : 7 31 33 34
;                    : 42 84 85
<                    : 76 80
=                    : 16 17 18 19 20 46 47 48 49
>                    : 75 79
AND                  : 69
BOOLEANO             : 14 27
CASO                 : 65
CONTRARIO            : 65
DEVUELVE             : 31
DIFERENTE            : 78
ENCUANTO             : 81
ENTER                : 
ENTERO               : 12 90
ENTONCES             : 63
ESCRIBIR             : 84 85
FALSO                : 18 39 48 72
FLOAT                : 26 37 58
FUNCION              : 31
HACER                : 81 83
ID                   : 9 11 16 17 18 19 20 29 31 33 34 36 46 47 48 49 59 84
IGUAL                : 77 79 80
INT                  : 25 35 57
LEER                 : 86
LISTA                : 20
NADA                 : 
OR                   : 67
PARA                 : 82 83
REAL                 : 13 89
RESTO                : 
SI                   : 63
SIGUIENTE            : 82 83
STR                  : 15 91
STRING               : 16 28 46 85 86 88
VAR                  : 7
VERDADERO            : 17 38 47 71
[                    : 21 22
]                    : 21 22
^                    : 55
error                : 

Nonterminals, with rules where they appear

atrib                : 42 82 83
atribD               : 8 10
cast                 : 61
ciclos               : 44
condition            : 70
conditions           : 43
decl                 : 2 3
declF                : 5
declL                : 6
declV                : 4
declarations         : 1 3 31
elemento             : 23 24
elementos            : 22 24
endcondition         : 63
exp                  : 19 49 50 51 60 74 74 87
expL                 : 63 67 73 81 82 83
fator                : 53 54 55 56
fatorB               : 68 69
lista                : 20 30
op                   : 74
parametros           : 31 34
prg                  : 0
read                 : 62
return               : 31
stat                 : 40 41
statements           : 1 31 41 63 65 81 83
termo                : 50 51 52 53 54 55
termoB               : 66 67 69
tipo                 : 7 31 33 34
tipocast             : 87 88
vari                 : 7 10 11
write                : 45

Parsing method: LALR

state 0

    (0) S' -> . prg
    (1) prg -> . declarations statements
    (2) declarations -> . decl
    (3) declarations -> . declarations decl
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (7) declV -> . VAR vari : tipo
    (31) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (20) declL -> . LISTA ID = lista

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9

    prg                            shift and go to state 1
    declarations                   shift and go to state 2
    decl                           shift and go to state 3
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6

state 1

    (0) S' -> prg .



state 2

    (1) prg -> declarations . statements
    (3) declarations -> declarations . decl
    (40) statements -> . stat
    (41) statements -> . statements stat
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (7) declV -> . VAR vari : tipo
    (31) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (20) declL -> . LISTA ID = lista
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (63) conditions -> . SI expL ENTONCES statements endcondition
    (81) ciclos -> . ENCUANTO expL HACER statements .
    (82) ciclos -> . PARA expL SIGUIENTE atrib .
    (83) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (84) write -> . ESCRIBIR ( ID ) ;
    (85) write -> . ESCRIBIR ( STRING ) ;

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    statements                     shift and go to state 10
    decl                           shift and go to state 11
    stat                           shift and go to state 12
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 3

    (2) declarations -> decl .

    VAR             reduce using rule 2 (declarations -> decl .)
    FUNCION         reduce using rule 2 (declarations -> decl .)
    LISTA           reduce using rule 2 (declarations -> decl .)
    ID              reduce using rule 2 (declarations -> decl .)
    SI              reduce using rule 2 (declarations -> decl .)
    ENCUANTO        reduce using rule 2 (declarations -> decl .)
    PARA            reduce using rule 2 (declarations -> decl .)
    ESCRIBIR        reduce using rule 2 (declarations -> decl .)


state 4

    (4) decl -> declV .

    VAR             reduce using rule 4 (decl -> declV .)
    FUNCION         reduce using rule 4 (decl -> declV .)
    LISTA           reduce using rule 4 (decl -> declV .)
    ID              reduce using rule 4 (decl -> declV .)
    SI              reduce using rule 4 (decl -> declV .)
    ENCUANTO        reduce using rule 4 (decl -> declV .)
    PARA            reduce using rule 4 (decl -> declV .)
    ESCRIBIR        reduce using rule 4 (decl -> declV .)


state 5

    (5) decl -> declF .

    VAR             reduce using rule 5 (decl -> declF .)
    FUNCION         reduce using rule 5 (decl -> declF .)
    LISTA           reduce using rule 5 (decl -> declF .)
    ID              reduce using rule 5 (decl -> declF .)
    SI              reduce using rule 5 (decl -> declF .)
    ENCUANTO        reduce using rule 5 (decl -> declF .)
    PARA            reduce using rule 5 (decl -> declF .)
    ESCRIBIR        reduce using rule 5 (decl -> declF .)


state 6

    (6) decl -> declL .

    VAR             reduce using rule 6 (decl -> declL .)
    FUNCION         reduce using rule 6 (decl -> declL .)
    LISTA           reduce using rule 6 (decl -> declL .)
    ID              reduce using rule 6 (decl -> declL .)
    SI              reduce using rule 6 (decl -> declL .)
    ENCUANTO        reduce using rule 6 (decl -> declL .)
    PARA            reduce using rule 6 (decl -> declL .)
    ESCRIBIR        reduce using rule 6 (decl -> declL .)


state 7

    (7) declV -> VAR . vari : tipo
    (8) vari -> . atribD
    (9) vari -> . ID
    (10) vari -> . vari , atribD
    (11) vari -> . vari , ID
    (16) atribD -> . ID = STRING
    (17) atribD -> . ID = VERDADERO
    (18) atribD -> . ID = FALSO
    (19) atribD -> . ID = exp

    ID              shift and go to state 24

    vari                           shift and go to state 22
    atribD                         shift and go to state 23

state 8

    (31) declF -> FUNCION . ID ( parametros ) : tipo declarations statements DEVUELVE return .

    ID              shift and go to state 25


state 9

    (20) declL -> LISTA . ID = lista

    ID              shift and go to state 26


state 10

    (1) prg -> declarations statements .
    (41) statements -> statements . stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (63) conditions -> . SI expL ENTONCES statements endcondition
    (81) ciclos -> . ENCUANTO expL HACER statements .
    (82) ciclos -> . PARA expL SIGUIENTE atrib .
    (83) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (84) write -> . ESCRIBIR ( ID ) ;
    (85) write -> . ESCRIBIR ( STRING ) ;

    $end            reduce using rule 1 (prg -> declarations statements .)
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    stat                           shift and go to state 27
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 11

    (3) declarations -> declarations decl .

    VAR             reduce using rule 3 (declarations -> declarations decl .)
    FUNCION         reduce using rule 3 (declarations -> declarations decl .)
    LISTA           reduce using rule 3 (declarations -> declarations decl .)
    ID              reduce using rule 3 (declarations -> declarations decl .)
    SI              reduce using rule 3 (declarations -> declarations decl .)
    ENCUANTO        reduce using rule 3 (declarations -> declarations decl .)
    PARA            reduce using rule 3 (declarations -> declarations decl .)
    ESCRIBIR        reduce using rule 3 (declarations -> declarations decl .)


state 12

    (40) statements -> stat .

    ID              reduce using rule 40 (statements -> stat .)
    SI              reduce using rule 40 (statements -> stat .)
    ENCUANTO        reduce using rule 40 (statements -> stat .)
    PARA            reduce using rule 40 (statements -> stat .)
    ESCRIBIR        reduce using rule 40 (statements -> stat .)
    $end            reduce using rule 40 (statements -> stat .)
    .               reduce using rule 40 (statements -> stat .)
    CASO            reduce using rule 40 (statements -> stat .)
    DEVUELVE        reduce using rule 40 (statements -> stat .)


state 13

    (42) stat -> atrib . ;

    ;               shift and go to state 28


state 14

    (43) stat -> conditions .

    ID              reduce using rule 43 (stat -> conditions .)
    SI              reduce using rule 43 (stat -> conditions .)
    ENCUANTO        reduce using rule 43 (stat -> conditions .)
    PARA            reduce using rule 43 (stat -> conditions .)
    ESCRIBIR        reduce using rule 43 (stat -> conditions .)
    $end            reduce using rule 43 (stat -> conditions .)
    .               reduce using rule 43 (stat -> conditions .)
    CASO            reduce using rule 43 (stat -> conditions .)
    DEVUELVE        reduce using rule 43 (stat -> conditions .)


state 15

    (44) stat -> ciclos .

    ID              reduce using rule 44 (stat -> ciclos .)
    SI              reduce using rule 44 (stat -> ciclos .)
    ENCUANTO        reduce using rule 44 (stat -> ciclos .)
    PARA            reduce using rule 44 (stat -> ciclos .)
    ESCRIBIR        reduce using rule 44 (stat -> ciclos .)
    $end            reduce using rule 44 (stat -> ciclos .)
    .               reduce using rule 44 (stat -> ciclos .)
    CASO            reduce using rule 44 (stat -> ciclos .)
    DEVUELVE        reduce using rule 44 (stat -> ciclos .)


state 16

    (45) stat -> write .

    ID              reduce using rule 45 (stat -> write .)
    SI              reduce using rule 45 (stat -> write .)
    ENCUANTO        reduce using rule 45 (stat -> write .)
    PARA            reduce using rule 45 (stat -> write .)
    ESCRIBIR        reduce using rule 45 (stat -> write .)
    $end            reduce using rule 45 (stat -> write .)
    .               reduce using rule 45 (stat -> write .)
    CASO            reduce using rule 45 (stat -> write .)
    DEVUELVE        reduce using rule 45 (stat -> write .)


state 17

    (46) atrib -> ID . = STRING
    (47) atrib -> ID . = VERDADERO
    (48) atrib -> ID . = FALSO
    (49) atrib -> ID . = exp

    =               shift and go to state 29


state 18

    (63) conditions -> SI . expL ENTONCES statements endcondition
    (66) expL -> . termoB
    (67) expL -> . expL OR termoB
    (68) termoB -> . fatorB
    (69) termoB -> . termoB AND fatorB
    (70) fatorB -> . condition
    (71) fatorB -> . VERDADERO
    (72) fatorB -> . FALSO
    (73) fatorB -> . ( expL )
    (74) condition -> . exp op exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )
    (61) fator -> . cast
    (62) fator -> . read
    (87) cast -> . tipocast ( exp )
    (88) cast -> . tipocast ( STRING )
    (86) read -> . LEER ( STRING )
    (89) tipocast -> . REAL
    (90) tipocast -> . ENTERO
    (91) tipocast -> . STR

    VERDADERO       shift and go to state 34
    FALSO           shift and go to state 35
    (               shift and go to state 36
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    LEER            shift and go to state 46
    REAL            shift and go to state 47
    ENTERO          shift and go to state 48
    STR             shift and go to state 49

    expL                           shift and go to state 30
    termoB                         shift and go to state 31
    fatorB                         shift and go to state 32
    condition                      shift and go to state 33
    exp                            shift and go to state 37
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 43
    read                           shift and go to state 44
    tipocast                       shift and go to state 45

state 19

    (81) ciclos -> ENCUANTO . expL HACER statements .
    (66) expL -> . termoB
    (67) expL -> . expL OR termoB
    (68) termoB -> . fatorB
    (69) termoB -> . termoB AND fatorB
    (70) fatorB -> . condition
    (71) fatorB -> . VERDADERO
    (72) fatorB -> . FALSO
    (73) fatorB -> . ( expL )
    (74) condition -> . exp op exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )
    (61) fator -> . cast
    (62) fator -> . read
    (87) cast -> . tipocast ( exp )
    (88) cast -> . tipocast ( STRING )
    (86) read -> . LEER ( STRING )
    (89) tipocast -> . REAL
    (90) tipocast -> . ENTERO
    (91) tipocast -> . STR

    VERDADERO       shift and go to state 34
    FALSO           shift and go to state 35
    (               shift and go to state 36
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    LEER            shift and go to state 46
    REAL            shift and go to state 47
    ENTERO          shift and go to state 48
    STR             shift and go to state 49

    expL                           shift and go to state 50
    termoB                         shift and go to state 31
    fatorB                         shift and go to state 32
    condition                      shift and go to state 33
    exp                            shift and go to state 37
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 43
    read                           shift and go to state 44
    tipocast                       shift and go to state 45

state 20

    (82) ciclos -> PARA . expL SIGUIENTE atrib .
    (83) ciclos -> PARA . expL SIGUIENTE atrib HACER statements .
    (66) expL -> . termoB
    (67) expL -> . expL OR termoB
    (68) termoB -> . fatorB
    (69) termoB -> . termoB AND fatorB
    (70) fatorB -> . condition
    (71) fatorB -> . VERDADERO
    (72) fatorB -> . FALSO
    (73) fatorB -> . ( expL )
    (74) condition -> . exp op exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )
    (61) fator -> . cast
    (62) fator -> . read
    (87) cast -> . tipocast ( exp )
    (88) cast -> . tipocast ( STRING )
    (86) read -> . LEER ( STRING )
    (89) tipocast -> . REAL
    (90) tipocast -> . ENTERO
    (91) tipocast -> . STR

    VERDADERO       shift and go to state 34
    FALSO           shift and go to state 35
    (               shift and go to state 36
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    LEER            shift and go to state 46
    REAL            shift and go to state 47
    ENTERO          shift and go to state 48
    STR             shift and go to state 49

    expL                           shift and go to state 51
    termoB                         shift and go to state 31
    fatorB                         shift and go to state 32
    condition                      shift and go to state 33
    exp                            shift and go to state 37
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 43
    read                           shift and go to state 44
    tipocast                       shift and go to state 45

state 21

    (84) write -> ESCRIBIR . ( ID ) ;
    (85) write -> ESCRIBIR . ( STRING ) ;

    (               shift and go to state 52


state 22

    (7) declV -> VAR vari . : tipo
    (10) vari -> vari . , atribD
    (11) vari -> vari . , ID

    :               shift and go to state 53
    ,               shift and go to state 54


state 23

    (8) vari -> atribD .

    :               reduce using rule 8 (vari -> atribD .)
    ,               reduce using rule 8 (vari -> atribD .)


state 24

    (9) vari -> ID .
    (16) atribD -> ID . = STRING
    (17) atribD -> ID . = VERDADERO
    (18) atribD -> ID . = FALSO
    (19) atribD -> ID . = exp

    :               reduce using rule 9 (vari -> ID .)
    ,               reduce using rule 9 (vari -> ID .)
    =               shift and go to state 55


state 25

    (31) declF -> FUNCION ID . ( parametros ) : tipo declarations statements DEVUELVE return .

    (               shift and go to state 56


state 26

    (20) declL -> LISTA ID . = lista

    =               shift and go to state 57


state 27

    (41) statements -> statements stat .

    ID              reduce using rule 41 (statements -> statements stat .)
    SI              reduce using rule 41 (statements -> statements stat .)
    ENCUANTO        reduce using rule 41 (statements -> statements stat .)
    PARA            reduce using rule 41 (statements -> statements stat .)
    ESCRIBIR        reduce using rule 41 (statements -> statements stat .)
    $end            reduce using rule 41 (statements -> statements stat .)
    .               reduce using rule 41 (statements -> statements stat .)
    CASO            reduce using rule 41 (statements -> statements stat .)
    DEVUELVE        reduce using rule 41 (statements -> statements stat .)


state 28

    (42) stat -> atrib ; .

    ID              reduce using rule 42 (stat -> atrib ; .)
    SI              reduce using rule 42 (stat -> atrib ; .)
    ENCUANTO        reduce using rule 42 (stat -> atrib ; .)
    PARA            reduce using rule 42 (stat -> atrib ; .)
    ESCRIBIR        reduce using rule 42 (stat -> atrib ; .)
    $end            reduce using rule 42 (stat -> atrib ; .)
    .               reduce using rule 42 (stat -> atrib ; .)
    CASO            reduce using rule 42 (stat -> atrib ; .)
    DEVUELVE        reduce using rule 42 (stat -> atrib ; .)


state 29

    (46) atrib -> ID = . STRING
    (47) atrib -> ID = . VERDADERO
    (48) atrib -> ID = . FALSO
    (49) atrib -> ID = . exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )
    (61) fator -> . cast
    (62) fator -> . read
    (87) cast -> . tipocast ( exp )
    (88) cast -> . tipocast ( STRING )
    (86) read -> . LEER ( STRING )
    (89) tipocast -> . REAL
    (90) tipocast -> . ENTERO
    (91) tipocast -> . STR

    STRING          shift and go to state 58
    VERDADERO       shift and go to state 59
    FALSO           shift and go to state 60
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    (               shift and go to state 62
    LEER            shift and go to state 46
    REAL            shift and go to state 47
    ENTERO          shift and go to state 48
    STR             shift and go to state 49

    exp                            shift and go to state 61
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 43
    read                           shift and go to state 44
    tipocast                       shift and go to state 45

state 30

    (63) conditions -> SI expL . ENTONCES statements endcondition
    (67) expL -> expL . OR termoB

    ENTONCES        shift and go to state 63
    OR              shift and go to state 64


state 31

    (66) expL -> termoB .
    (69) termoB -> termoB . AND fatorB

    ENTONCES        reduce using rule 66 (expL -> termoB .)
    OR              reduce using rule 66 (expL -> termoB .)
    HACER           reduce using rule 66 (expL -> termoB .)
    SIGUIENTE       reduce using rule 66 (expL -> termoB .)
    )               reduce using rule 66 (expL -> termoB .)
    AND             shift and go to state 65


state 32

    (68) termoB -> fatorB .

    AND             reduce using rule 68 (termoB -> fatorB .)
    ENTONCES        reduce using rule 68 (termoB -> fatorB .)
    OR              reduce using rule 68 (termoB -> fatorB .)
    HACER           reduce using rule 68 (termoB -> fatorB .)
    SIGUIENTE       reduce using rule 68 (termoB -> fatorB .)
    )               reduce using rule 68 (termoB -> fatorB .)


state 33

    (70) fatorB -> condition .

    AND             reduce using rule 70 (fatorB -> condition .)
    ENTONCES        reduce using rule 70 (fatorB -> condition .)
    OR              reduce using rule 70 (fatorB -> condition .)
    HACER           reduce using rule 70 (fatorB -> condition .)
    SIGUIENTE       reduce using rule 70 (fatorB -> condition .)
    )               reduce using rule 70 (fatorB -> condition .)


state 34

    (71) fatorB -> VERDADERO .

    AND             reduce using rule 71 (fatorB -> VERDADERO .)
    ENTONCES        reduce using rule 71 (fatorB -> VERDADERO .)
    OR              reduce using rule 71 (fatorB -> VERDADERO .)
    HACER           reduce using rule 71 (fatorB -> VERDADERO .)
    SIGUIENTE       reduce using rule 71 (fatorB -> VERDADERO .)
    )               reduce using rule 71 (fatorB -> VERDADERO .)


state 35

    (72) fatorB -> FALSO .

    AND             reduce using rule 72 (fatorB -> FALSO .)
    ENTONCES        reduce using rule 72 (fatorB -> FALSO .)
    OR              reduce using rule 72 (fatorB -> FALSO .)
    HACER           reduce using rule 72 (fatorB -> FALSO .)
    SIGUIENTE       reduce using rule 72 (fatorB -> FALSO .)
    )               reduce using rule 72 (fatorB -> FALSO .)


state 36

    (73) fatorB -> ( . expL )
    (60) fator -> ( . exp )
    (66) expL -> . termoB
    (67) expL -> . expL OR termoB
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (68) termoB -> . fatorB
    (69) termoB -> . termoB AND fatorB
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (70) fatorB -> . condition
    (71) fatorB -> . VERDADERO
    (72) fatorB -> . FALSO
    (73) fatorB -> . ( expL )
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )
    (61) fator -> . cast
    (62) fator -> . read
    (74) condition -> . exp op exp
    (87) cast -> . tipocast ( exp )
    (88) cast -> . tipocast ( STRING )
    (86) read -> . LEER ( STRING )
    (89) tipocast -> . REAL
    (90) tipocast -> . ENTERO
    (91) tipocast -> . STR

    VERDADERO       shift and go to state 34
    FALSO           shift and go to state 35
    (               shift and go to state 36
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    LEER            shift and go to state 46
    REAL            shift and go to state 47
    ENTERO          shift and go to state 48
    STR             shift and go to state 49

    expL                           shift and go to state 66
    exp                            shift and go to state 67
    termoB                         shift and go to state 31
    termo                          shift and go to state 38
    fatorB                         shift and go to state 32
    fator                          shift and go to state 39
    condition                      shift and go to state 33
    cast                           shift and go to state 43
    read                           shift and go to state 44
    tipocast                       shift and go to state 45

state 37

    (74) condition -> exp . op exp
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo
    (75) op -> . >
    (76) op -> . <
    (77) op -> . IGUAL
    (78) op -> . DIFERENTE
    (79) op -> . > IGUAL
    (80) op -> . < IGUAL

    +               shift and go to state 69
    -               shift and go to state 70
    >               shift and go to state 71
    <               shift and go to state 72
    IGUAL           shift and go to state 73
    DIFERENTE       shift and go to state 74

    op                             shift and go to state 68

state 38

    (52) exp -> termo .
    (53) termo -> termo . * fator
    (54) termo -> termo . / fator
    (55) termo -> termo . ^ fator

    +               reduce using rule 52 (exp -> termo .)
    -               reduce using rule 52 (exp -> termo .)
    >               reduce using rule 52 (exp -> termo .)
    <               reduce using rule 52 (exp -> termo .)
    IGUAL           reduce using rule 52 (exp -> termo .)
    DIFERENTE       reduce using rule 52 (exp -> termo .)
    ;               reduce using rule 52 (exp -> termo .)
    .               reduce using rule 52 (exp -> termo .)
    HACER           reduce using rule 52 (exp -> termo .)
    )               reduce using rule 52 (exp -> termo .)
    :               reduce using rule 52 (exp -> termo .)
    ,               reduce using rule 52 (exp -> termo .)
    AND             reduce using rule 52 (exp -> termo .)
    ENTONCES        reduce using rule 52 (exp -> termo .)
    OR              reduce using rule 52 (exp -> termo .)
    SIGUIENTE       reduce using rule 52 (exp -> termo .)
    *               shift and go to state 75
    /               shift and go to state 76
    ^               shift and go to state 77


state 39

    (56) termo -> fator .

    *               reduce using rule 56 (termo -> fator .)
    /               reduce using rule 56 (termo -> fator .)
    ^               reduce using rule 56 (termo -> fator .)
    +               reduce using rule 56 (termo -> fator .)
    -               reduce using rule 56 (termo -> fator .)
    >               reduce using rule 56 (termo -> fator .)
    <               reduce using rule 56 (termo -> fator .)
    IGUAL           reduce using rule 56 (termo -> fator .)
    DIFERENTE       reduce using rule 56 (termo -> fator .)
    ;               reduce using rule 56 (termo -> fator .)
    .               reduce using rule 56 (termo -> fator .)
    HACER           reduce using rule 56 (termo -> fator .)
    )               reduce using rule 56 (termo -> fator .)
    :               reduce using rule 56 (termo -> fator .)
    ,               reduce using rule 56 (termo -> fator .)
    AND             reduce using rule 56 (termo -> fator .)
    ENTONCES        reduce using rule 56 (termo -> fator .)
    OR              reduce using rule 56 (termo -> fator .)
    SIGUIENTE       reduce using rule 56 (termo -> fator .)


state 40

    (57) fator -> INT .

    *               reduce using rule 57 (fator -> INT .)
    /               reduce using rule 57 (fator -> INT .)
    ^               reduce using rule 57 (fator -> INT .)
    +               reduce using rule 57 (fator -> INT .)
    -               reduce using rule 57 (fator -> INT .)
    >               reduce using rule 57 (fator -> INT .)
    <               reduce using rule 57 (fator -> INT .)
    IGUAL           reduce using rule 57 (fator -> INT .)
    DIFERENTE       reduce using rule 57 (fator -> INT .)
    ;               reduce using rule 57 (fator -> INT .)
    .               reduce using rule 57 (fator -> INT .)
    HACER           reduce using rule 57 (fator -> INT .)
    )               reduce using rule 57 (fator -> INT .)
    :               reduce using rule 57 (fator -> INT .)
    ,               reduce using rule 57 (fator -> INT .)
    AND             reduce using rule 57 (fator -> INT .)
    ENTONCES        reduce using rule 57 (fator -> INT .)
    OR              reduce using rule 57 (fator -> INT .)
    SIGUIENTE       reduce using rule 57 (fator -> INT .)


state 41

    (58) fator -> FLOAT .

    *               reduce using rule 58 (fator -> FLOAT .)
    /               reduce using rule 58 (fator -> FLOAT .)
    ^               reduce using rule 58 (fator -> FLOAT .)
    +               reduce using rule 58 (fator -> FLOAT .)
    -               reduce using rule 58 (fator -> FLOAT .)
    >               reduce using rule 58 (fator -> FLOAT .)
    <               reduce using rule 58 (fator -> FLOAT .)
    IGUAL           reduce using rule 58 (fator -> FLOAT .)
    DIFERENTE       reduce using rule 58 (fator -> FLOAT .)
    ;               reduce using rule 58 (fator -> FLOAT .)
    .               reduce using rule 58 (fator -> FLOAT .)
    HACER           reduce using rule 58 (fator -> FLOAT .)
    )               reduce using rule 58 (fator -> FLOAT .)
    :               reduce using rule 58 (fator -> FLOAT .)
    ,               reduce using rule 58 (fator -> FLOAT .)
    AND             reduce using rule 58 (fator -> FLOAT .)
    ENTONCES        reduce using rule 58 (fator -> FLOAT .)
    OR              reduce using rule 58 (fator -> FLOAT .)
    SIGUIENTE       reduce using rule 58 (fator -> FLOAT .)


state 42

    (59) fator -> ID .

    *               reduce using rule 59 (fator -> ID .)
    /               reduce using rule 59 (fator -> ID .)
    ^               reduce using rule 59 (fator -> ID .)
    +               reduce using rule 59 (fator -> ID .)
    -               reduce using rule 59 (fator -> ID .)
    >               reduce using rule 59 (fator -> ID .)
    <               reduce using rule 59 (fator -> ID .)
    IGUAL           reduce using rule 59 (fator -> ID .)
    DIFERENTE       reduce using rule 59 (fator -> ID .)
    ;               reduce using rule 59 (fator -> ID .)
    .               reduce using rule 59 (fator -> ID .)
    HACER           reduce using rule 59 (fator -> ID .)
    )               reduce using rule 59 (fator -> ID .)
    :               reduce using rule 59 (fator -> ID .)
    ,               reduce using rule 59 (fator -> ID .)
    AND             reduce using rule 59 (fator -> ID .)
    ENTONCES        reduce using rule 59 (fator -> ID .)
    OR              reduce using rule 59 (fator -> ID .)
    SIGUIENTE       reduce using rule 59 (fator -> ID .)


state 43

    (61) fator -> cast .

    *               reduce using rule 61 (fator -> cast .)
    /               reduce using rule 61 (fator -> cast .)
    ^               reduce using rule 61 (fator -> cast .)
    +               reduce using rule 61 (fator -> cast .)
    -               reduce using rule 61 (fator -> cast .)
    >               reduce using rule 61 (fator -> cast .)
    <               reduce using rule 61 (fator -> cast .)
    IGUAL           reduce using rule 61 (fator -> cast .)
    DIFERENTE       reduce using rule 61 (fator -> cast .)
    ;               reduce using rule 61 (fator -> cast .)
    .               reduce using rule 61 (fator -> cast .)
    HACER           reduce using rule 61 (fator -> cast .)
    )               reduce using rule 61 (fator -> cast .)
    :               reduce using rule 61 (fator -> cast .)
    ,               reduce using rule 61 (fator -> cast .)
    AND             reduce using rule 61 (fator -> cast .)
    ENTONCES        reduce using rule 61 (fator -> cast .)
    OR              reduce using rule 61 (fator -> cast .)
    SIGUIENTE       reduce using rule 61 (fator -> cast .)


state 44

    (62) fator -> read .

    *               reduce using rule 62 (fator -> read .)
    /               reduce using rule 62 (fator -> read .)
    ^               reduce using rule 62 (fator -> read .)
    +               reduce using rule 62 (fator -> read .)
    -               reduce using rule 62 (fator -> read .)
    >               reduce using rule 62 (fator -> read .)
    <               reduce using rule 62 (fator -> read .)
    IGUAL           reduce using rule 62 (fator -> read .)
    DIFERENTE       reduce using rule 62 (fator -> read .)
    ;               reduce using rule 62 (fator -> read .)
    .               reduce using rule 62 (fator -> read .)
    HACER           reduce using rule 62 (fator -> read .)
    )               reduce using rule 62 (fator -> read .)
    :               reduce using rule 62 (fator -> read .)
    ,               reduce using rule 62 (fator -> read .)
    AND             reduce using rule 62 (fator -> read .)
    ENTONCES        reduce using rule 62 (fator -> read .)
    OR              reduce using rule 62 (fator -> read .)
    SIGUIENTE       reduce using rule 62 (fator -> read .)


state 45

    (87) cast -> tipocast . ( exp )
    (88) cast -> tipocast . ( STRING )

    (               shift and go to state 78


state 46

    (86) read -> LEER . ( STRING )

    (               shift and go to state 79


state 47

    (89) tipocast -> REAL .

    (               reduce using rule 89 (tipocast -> REAL .)


state 48

    (90) tipocast -> ENTERO .

    (               reduce using rule 90 (tipocast -> ENTERO .)


state 49

    (91) tipocast -> STR .

    (               reduce using rule 91 (tipocast -> STR .)


state 50

    (81) ciclos -> ENCUANTO expL . HACER statements .
    (67) expL -> expL . OR termoB

    HACER           shift and go to state 80
    OR              shift and go to state 64


state 51

    (82) ciclos -> PARA expL . SIGUIENTE atrib .
    (83) ciclos -> PARA expL . SIGUIENTE atrib HACER statements .
    (67) expL -> expL . OR termoB

    SIGUIENTE       shift and go to state 81
    OR              shift and go to state 64


state 52

    (84) write -> ESCRIBIR ( . ID ) ;
    (85) write -> ESCRIBIR ( . STRING ) ;

    ID              shift and go to state 82
    STRING          shift and go to state 83


state 53

    (7) declV -> VAR vari : . tipo
    (12) tipo -> . ENTERO
    (13) tipo -> . REAL
    (14) tipo -> . BOOLEANO
    (15) tipo -> . STR

    ENTERO          shift and go to state 85
    REAL            shift and go to state 86
    BOOLEANO        shift and go to state 87
    STR             shift and go to state 88

    tipo                           shift and go to state 84

state 54

    (10) vari -> vari , . atribD
    (11) vari -> vari , . ID
    (16) atribD -> . ID = STRING
    (17) atribD -> . ID = VERDADERO
    (18) atribD -> . ID = FALSO
    (19) atribD -> . ID = exp

    ID              shift and go to state 90

    atribD                         shift and go to state 89

state 55

    (16) atribD -> ID = . STRING
    (17) atribD -> ID = . VERDADERO
    (18) atribD -> ID = . FALSO
    (19) atribD -> ID = . exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )
    (61) fator -> . cast
    (62) fator -> . read
    (87) cast -> . tipocast ( exp )
    (88) cast -> . tipocast ( STRING )
    (86) read -> . LEER ( STRING )
    (89) tipocast -> . REAL
    (90) tipocast -> . ENTERO
    (91) tipocast -> . STR

    STRING          shift and go to state 91
    VERDADERO       shift and go to state 92
    FALSO           shift and go to state 93
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    (               shift and go to state 62
    LEER            shift and go to state 46
    REAL            shift and go to state 47
    ENTERO          shift and go to state 48
    STR             shift and go to state 49

    exp                            shift and go to state 94
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 43
    read                           shift and go to state 44
    tipocast                       shift and go to state 45

state 56

    (31) declF -> FUNCION ID ( . parametros ) : tipo declarations statements DEVUELVE return .
    (32) parametros -> .
    (33) parametros -> . ID : tipo
    (34) parametros -> . parametros , ID : tipo

    )               reduce using rule 32 (parametros -> .)
    ,               reduce using rule 32 (parametros -> .)
    ID              shift and go to state 95

    parametros                     shift and go to state 96

state 57

    (20) declL -> LISTA ID = . lista
    (21) lista -> . [ ]
    (22) lista -> . [ elementos ]

    [               shift and go to state 98

    lista                          shift and go to state 97

state 58

    (46) atrib -> ID = STRING .

    ;               reduce using rule 46 (atrib -> ID = STRING .)
    .               reduce using rule 46 (atrib -> ID = STRING .)
    HACER           reduce using rule 46 (atrib -> ID = STRING .)


state 59

    (47) atrib -> ID = VERDADERO .

    ;               reduce using rule 47 (atrib -> ID = VERDADERO .)
    .               reduce using rule 47 (atrib -> ID = VERDADERO .)
    HACER           reduce using rule 47 (atrib -> ID = VERDADERO .)


state 60

    (48) atrib -> ID = FALSO .

    ;               reduce using rule 48 (atrib -> ID = FALSO .)
    .               reduce using rule 48 (atrib -> ID = FALSO .)
    HACER           reduce using rule 48 (atrib -> ID = FALSO .)


state 61

    (49) atrib -> ID = exp .
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo

    ;               reduce using rule 49 (atrib -> ID = exp .)
    .               reduce using rule 49 (atrib -> ID = exp .)
    HACER           reduce using rule 49 (atrib -> ID = exp .)
    +               shift and go to state 69
    -               shift and go to state 70


state 62

    (60) fator -> ( . exp )
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )
    (61) fator -> . cast
    (62) fator -> . read
    (87) cast -> . tipocast ( exp )
    (88) cast -> . tipocast ( STRING )
    (86) read -> . LEER ( STRING )
    (89) tipocast -> . REAL
    (90) tipocast -> . ENTERO
    (91) tipocast -> . STR

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    (               shift and go to state 62
    LEER            shift and go to state 46
    REAL            shift and go to state 47
    ENTERO          shift and go to state 48
    STR             shift and go to state 49

    exp                            shift and go to state 99
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 43
    read                           shift and go to state 44
    tipocast                       shift and go to state 45

state 63

    (63) conditions -> SI expL ENTONCES . statements endcondition
    (40) statements -> . stat
    (41) statements -> . statements stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (63) conditions -> . SI expL ENTONCES statements endcondition
    (81) ciclos -> . ENCUANTO expL HACER statements .
    (82) ciclos -> . PARA expL SIGUIENTE atrib .
    (83) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (84) write -> . ESCRIBIR ( ID ) ;
    (85) write -> . ESCRIBIR ( STRING ) ;

    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    statements                     shift and go to state 100
    stat                           shift and go to state 12
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 64

    (67) expL -> expL OR . termoB
    (68) termoB -> . fatorB
    (69) termoB -> . termoB AND fatorB
    (70) fatorB -> . condition
    (71) fatorB -> . VERDADERO
    (72) fatorB -> . FALSO
    (73) fatorB -> . ( expL )
    (74) condition -> . exp op exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )
    (61) fator -> . cast
    (62) fator -> . read
    (87) cast -> . tipocast ( exp )
    (88) cast -> . tipocast ( STRING )
    (86) read -> . LEER ( STRING )
    (89) tipocast -> . REAL
    (90) tipocast -> . ENTERO
    (91) tipocast -> . STR

    VERDADERO       shift and go to state 34
    FALSO           shift and go to state 35
    (               shift and go to state 36
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    LEER            shift and go to state 46
    REAL            shift and go to state 47
    ENTERO          shift and go to state 48
    STR             shift and go to state 49

    termoB                         shift and go to state 101
    fatorB                         shift and go to state 32
    condition                      shift and go to state 33
    exp                            shift and go to state 37
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 43
    read                           shift and go to state 44
    tipocast                       shift and go to state 45

state 65

    (69) termoB -> termoB AND . fatorB
    (70) fatorB -> . condition
    (71) fatorB -> . VERDADERO
    (72) fatorB -> . FALSO
    (73) fatorB -> . ( expL )
    (74) condition -> . exp op exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )
    (61) fator -> . cast
    (62) fator -> . read
    (87) cast -> . tipocast ( exp )
    (88) cast -> . tipocast ( STRING )
    (86) read -> . LEER ( STRING )
    (89) tipocast -> . REAL
    (90) tipocast -> . ENTERO
    (91) tipocast -> . STR

    VERDADERO       shift and go to state 34
    FALSO           shift and go to state 35
    (               shift and go to state 36
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    LEER            shift and go to state 46
    REAL            shift and go to state 47
    ENTERO          shift and go to state 48
    STR             shift and go to state 49

    fatorB                         shift and go to state 102
    condition                      shift and go to state 33
    exp                            shift and go to state 37
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 43
    read                           shift and go to state 44
    tipocast                       shift and go to state 45

state 66

    (73) fatorB -> ( expL . )
    (67) expL -> expL . OR termoB

    )               shift and go to state 103
    OR              shift and go to state 64


state 67

    (60) fator -> ( exp . )
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo
    (74) condition -> exp . op exp
    (75) op -> . >
    (76) op -> . <
    (77) op -> . IGUAL
    (78) op -> . DIFERENTE
    (79) op -> . > IGUAL
    (80) op -> . < IGUAL

    )               shift and go to state 104
    +               shift and go to state 69
    -               shift and go to state 70
    >               shift and go to state 71
    <               shift and go to state 72
    IGUAL           shift and go to state 73
    DIFERENTE       shift and go to state 74

    op                             shift and go to state 68

state 68

    (74) condition -> exp op . exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )
    (61) fator -> . cast
    (62) fator -> . read
    (87) cast -> . tipocast ( exp )
    (88) cast -> . tipocast ( STRING )
    (86) read -> . LEER ( STRING )
    (89) tipocast -> . REAL
    (90) tipocast -> . ENTERO
    (91) tipocast -> . STR

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    (               shift and go to state 62
    LEER            shift and go to state 46
    REAL            shift and go to state 47
    ENTERO          shift and go to state 48
    STR             shift and go to state 49

    exp                            shift and go to state 105
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 43
    read                           shift and go to state 44
    tipocast                       shift and go to state 45

state 69

    (50) exp -> exp + . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )
    (61) fator -> . cast
    (62) fator -> . read
    (87) cast -> . tipocast ( exp )
    (88) cast -> . tipocast ( STRING )
    (86) read -> . LEER ( STRING )
    (89) tipocast -> . REAL
    (90) tipocast -> . ENTERO
    (91) tipocast -> . STR

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    (               shift and go to state 62
    LEER            shift and go to state 46
    REAL            shift and go to state 47
    ENTERO          shift and go to state 48
    STR             shift and go to state 49

    termo                          shift and go to state 106
    fator                          shift and go to state 39
    cast                           shift and go to state 43
    read                           shift and go to state 44
    tipocast                       shift and go to state 45

state 70

    (51) exp -> exp - . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )
    (61) fator -> . cast
    (62) fator -> . read
    (87) cast -> . tipocast ( exp )
    (88) cast -> . tipocast ( STRING )
    (86) read -> . LEER ( STRING )
    (89) tipocast -> . REAL
    (90) tipocast -> . ENTERO
    (91) tipocast -> . STR

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    (               shift and go to state 62
    LEER            shift and go to state 46
    REAL            shift and go to state 47
    ENTERO          shift and go to state 48
    STR             shift and go to state 49

    termo                          shift and go to state 107
    fator                          shift and go to state 39
    cast                           shift and go to state 43
    read                           shift and go to state 44
    tipocast                       shift and go to state 45

state 71

    (75) op -> > .
    (79) op -> > . IGUAL

    INT             reduce using rule 75 (op -> > .)
    FLOAT           reduce using rule 75 (op -> > .)
    ID              reduce using rule 75 (op -> > .)
    (               reduce using rule 75 (op -> > .)
    LEER            reduce using rule 75 (op -> > .)
    REAL            reduce using rule 75 (op -> > .)
    ENTERO          reduce using rule 75 (op -> > .)
    STR             reduce using rule 75 (op -> > .)
    IGUAL           shift and go to state 108


state 72

    (76) op -> < .
    (80) op -> < . IGUAL

    INT             reduce using rule 76 (op -> < .)
    FLOAT           reduce using rule 76 (op -> < .)
    ID              reduce using rule 76 (op -> < .)
    (               reduce using rule 76 (op -> < .)
    LEER            reduce using rule 76 (op -> < .)
    REAL            reduce using rule 76 (op -> < .)
    ENTERO          reduce using rule 76 (op -> < .)
    STR             reduce using rule 76 (op -> < .)
    IGUAL           shift and go to state 109


state 73

    (77) op -> IGUAL .

    INT             reduce using rule 77 (op -> IGUAL .)
    FLOAT           reduce using rule 77 (op -> IGUAL .)
    ID              reduce using rule 77 (op -> IGUAL .)
    (               reduce using rule 77 (op -> IGUAL .)
    LEER            reduce using rule 77 (op -> IGUAL .)
    REAL            reduce using rule 77 (op -> IGUAL .)
    ENTERO          reduce using rule 77 (op -> IGUAL .)
    STR             reduce using rule 77 (op -> IGUAL .)


state 74

    (78) op -> DIFERENTE .

    INT             reduce using rule 78 (op -> DIFERENTE .)
    FLOAT           reduce using rule 78 (op -> DIFERENTE .)
    ID              reduce using rule 78 (op -> DIFERENTE .)
    (               reduce using rule 78 (op -> DIFERENTE .)
    LEER            reduce using rule 78 (op -> DIFERENTE .)
    REAL            reduce using rule 78 (op -> DIFERENTE .)
    ENTERO          reduce using rule 78 (op -> DIFERENTE .)
    STR             reduce using rule 78 (op -> DIFERENTE .)


state 75

    (53) termo -> termo * . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )
    (61) fator -> . cast
    (62) fator -> . read
    (87) cast -> . tipocast ( exp )
    (88) cast -> . tipocast ( STRING )
    (86) read -> . LEER ( STRING )
    (89) tipocast -> . REAL
    (90) tipocast -> . ENTERO
    (91) tipocast -> . STR

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    (               shift and go to state 62
    LEER            shift and go to state 46
    REAL            shift and go to state 47
    ENTERO          shift and go to state 48
    STR             shift and go to state 49

    fator                          shift and go to state 110
    cast                           shift and go to state 43
    read                           shift and go to state 44
    tipocast                       shift and go to state 45

state 76

    (54) termo -> termo / . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )
    (61) fator -> . cast
    (62) fator -> . read
    (87) cast -> . tipocast ( exp )
    (88) cast -> . tipocast ( STRING )
    (86) read -> . LEER ( STRING )
    (89) tipocast -> . REAL
    (90) tipocast -> . ENTERO
    (91) tipocast -> . STR

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    (               shift and go to state 62
    LEER            shift and go to state 46
    REAL            shift and go to state 47
    ENTERO          shift and go to state 48
    STR             shift and go to state 49

    fator                          shift and go to state 111
    cast                           shift and go to state 43
    read                           shift and go to state 44
    tipocast                       shift and go to state 45

state 77

    (55) termo -> termo ^ . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )
    (61) fator -> . cast
    (62) fator -> . read
    (87) cast -> . tipocast ( exp )
    (88) cast -> . tipocast ( STRING )
    (86) read -> . LEER ( STRING )
    (89) tipocast -> . REAL
    (90) tipocast -> . ENTERO
    (91) tipocast -> . STR

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    (               shift and go to state 62
    LEER            shift and go to state 46
    REAL            shift and go to state 47
    ENTERO          shift and go to state 48
    STR             shift and go to state 49

    fator                          shift and go to state 112
    cast                           shift and go to state 43
    read                           shift and go to state 44
    tipocast                       shift and go to state 45

state 78

    (87) cast -> tipocast ( . exp )
    (88) cast -> tipocast ( . STRING )
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )
    (61) fator -> . cast
    (62) fator -> . read
    (87) cast -> . tipocast ( exp )
    (88) cast -> . tipocast ( STRING )
    (86) read -> . LEER ( STRING )
    (89) tipocast -> . REAL
    (90) tipocast -> . ENTERO
    (91) tipocast -> . STR

    STRING          shift and go to state 114
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    (               shift and go to state 62
    LEER            shift and go to state 46
    REAL            shift and go to state 47
    ENTERO          shift and go to state 48
    STR             shift and go to state 49

    tipocast                       shift and go to state 45
    exp                            shift and go to state 113
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 43
    read                           shift and go to state 44

state 79

    (86) read -> LEER ( . STRING )

    STRING          shift and go to state 115


state 80

    (81) ciclos -> ENCUANTO expL HACER . statements .
    (40) statements -> . stat
    (41) statements -> . statements stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (63) conditions -> . SI expL ENTONCES statements endcondition
    (81) ciclos -> . ENCUANTO expL HACER statements .
    (82) ciclos -> . PARA expL SIGUIENTE atrib .
    (83) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (84) write -> . ESCRIBIR ( ID ) ;
    (85) write -> . ESCRIBIR ( STRING ) ;

    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    statements                     shift and go to state 116
    stat                           shift and go to state 12
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 81

    (82) ciclos -> PARA expL SIGUIENTE . atrib .
    (83) ciclos -> PARA expL SIGUIENTE . atrib HACER statements .
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp

    ID              shift and go to state 17

    atrib                          shift and go to state 117

state 82

    (84) write -> ESCRIBIR ( ID . ) ;

    )               shift and go to state 118


state 83

    (85) write -> ESCRIBIR ( STRING . ) ;

    )               shift and go to state 119


state 84

    (7) declV -> VAR vari : tipo .

    VAR             reduce using rule 7 (declV -> VAR vari : tipo .)
    FUNCION         reduce using rule 7 (declV -> VAR vari : tipo .)
    LISTA           reduce using rule 7 (declV -> VAR vari : tipo .)
    ID              reduce using rule 7 (declV -> VAR vari : tipo .)
    SI              reduce using rule 7 (declV -> VAR vari : tipo .)
    ENCUANTO        reduce using rule 7 (declV -> VAR vari : tipo .)
    PARA            reduce using rule 7 (declV -> VAR vari : tipo .)
    ESCRIBIR        reduce using rule 7 (declV -> VAR vari : tipo .)


state 85

    (12) tipo -> ENTERO .

    VAR             reduce using rule 12 (tipo -> ENTERO .)
    FUNCION         reduce using rule 12 (tipo -> ENTERO .)
    LISTA           reduce using rule 12 (tipo -> ENTERO .)
    ID              reduce using rule 12 (tipo -> ENTERO .)
    SI              reduce using rule 12 (tipo -> ENTERO .)
    ENCUANTO        reduce using rule 12 (tipo -> ENTERO .)
    PARA            reduce using rule 12 (tipo -> ENTERO .)
    ESCRIBIR        reduce using rule 12 (tipo -> ENTERO .)
    )               reduce using rule 12 (tipo -> ENTERO .)
    ,               reduce using rule 12 (tipo -> ENTERO .)


state 86

    (13) tipo -> REAL .

    VAR             reduce using rule 13 (tipo -> REAL .)
    FUNCION         reduce using rule 13 (tipo -> REAL .)
    LISTA           reduce using rule 13 (tipo -> REAL .)
    ID              reduce using rule 13 (tipo -> REAL .)
    SI              reduce using rule 13 (tipo -> REAL .)
    ENCUANTO        reduce using rule 13 (tipo -> REAL .)
    PARA            reduce using rule 13 (tipo -> REAL .)
    ESCRIBIR        reduce using rule 13 (tipo -> REAL .)
    )               reduce using rule 13 (tipo -> REAL .)
    ,               reduce using rule 13 (tipo -> REAL .)


state 87

    (14) tipo -> BOOLEANO .

    VAR             reduce using rule 14 (tipo -> BOOLEANO .)
    FUNCION         reduce using rule 14 (tipo -> BOOLEANO .)
    LISTA           reduce using rule 14 (tipo -> BOOLEANO .)
    ID              reduce using rule 14 (tipo -> BOOLEANO .)
    SI              reduce using rule 14 (tipo -> BOOLEANO .)
    ENCUANTO        reduce using rule 14 (tipo -> BOOLEANO .)
    PARA            reduce using rule 14 (tipo -> BOOLEANO .)
    ESCRIBIR        reduce using rule 14 (tipo -> BOOLEANO .)
    )               reduce using rule 14 (tipo -> BOOLEANO .)
    ,               reduce using rule 14 (tipo -> BOOLEANO .)


state 88

    (15) tipo -> STR .

    VAR             reduce using rule 15 (tipo -> STR .)
    FUNCION         reduce using rule 15 (tipo -> STR .)
    LISTA           reduce using rule 15 (tipo -> STR .)
    ID              reduce using rule 15 (tipo -> STR .)
    SI              reduce using rule 15 (tipo -> STR .)
    ENCUANTO        reduce using rule 15 (tipo -> STR .)
    PARA            reduce using rule 15 (tipo -> STR .)
    ESCRIBIR        reduce using rule 15 (tipo -> STR .)
    )               reduce using rule 15 (tipo -> STR .)
    ,               reduce using rule 15 (tipo -> STR .)


state 89

    (10) vari -> vari , atribD .

    :               reduce using rule 10 (vari -> vari , atribD .)
    ,               reduce using rule 10 (vari -> vari , atribD .)


state 90

    (11) vari -> vari , ID .
    (16) atribD -> ID . = STRING
    (17) atribD -> ID . = VERDADERO
    (18) atribD -> ID . = FALSO
    (19) atribD -> ID . = exp

    :               reduce using rule 11 (vari -> vari , ID .)
    ,               reduce using rule 11 (vari -> vari , ID .)
    =               shift and go to state 55


state 91

    (16) atribD -> ID = STRING .

    :               reduce using rule 16 (atribD -> ID = STRING .)
    ,               reduce using rule 16 (atribD -> ID = STRING .)


state 92

    (17) atribD -> ID = VERDADERO .

    :               reduce using rule 17 (atribD -> ID = VERDADERO .)
    ,               reduce using rule 17 (atribD -> ID = VERDADERO .)


state 93

    (18) atribD -> ID = FALSO .

    :               reduce using rule 18 (atribD -> ID = FALSO .)
    ,               reduce using rule 18 (atribD -> ID = FALSO .)


state 94

    (19) atribD -> ID = exp .
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo

    :               reduce using rule 19 (atribD -> ID = exp .)
    ,               reduce using rule 19 (atribD -> ID = exp .)
    +               shift and go to state 69
    -               shift and go to state 70


state 95

    (33) parametros -> ID . : tipo

    :               shift and go to state 120


state 96

    (31) declF -> FUNCION ID ( parametros . ) : tipo declarations statements DEVUELVE return .
    (34) parametros -> parametros . , ID : tipo

    )               shift and go to state 121
    ,               shift and go to state 122


state 97

    (20) declL -> LISTA ID = lista .

    VAR             reduce using rule 20 (declL -> LISTA ID = lista .)
    FUNCION         reduce using rule 20 (declL -> LISTA ID = lista .)
    LISTA           reduce using rule 20 (declL -> LISTA ID = lista .)
    ID              reduce using rule 20 (declL -> LISTA ID = lista .)
    SI              reduce using rule 20 (declL -> LISTA ID = lista .)
    ENCUANTO        reduce using rule 20 (declL -> LISTA ID = lista .)
    PARA            reduce using rule 20 (declL -> LISTA ID = lista .)
    ESCRIBIR        reduce using rule 20 (declL -> LISTA ID = lista .)


state 98

    (21) lista -> [ . ]
    (22) lista -> [ . elementos ]
    (23) elementos -> . elemento
    (24) elementos -> . elementos , elemento
    (25) elemento -> . INT
    (26) elemento -> . FLOAT
    (27) elemento -> . BOOLEANO
    (28) elemento -> . STRING
    (29) elemento -> . ID
    (30) elemento -> . lista
    (21) lista -> . [ ]
    (22) lista -> . [ elementos ]

    ]               shift and go to state 123
    INT             shift and go to state 126
    FLOAT           shift and go to state 127
    BOOLEANO        shift and go to state 128
    STRING          shift and go to state 129
    ID              shift and go to state 130
    [               shift and go to state 98

    elementos                      shift and go to state 124
    elemento                       shift and go to state 125
    lista                          shift and go to state 131

state 99

    (60) fator -> ( exp . )
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo

    )               shift and go to state 104
    +               shift and go to state 69
    -               shift and go to state 70


state 100

    (63) conditions -> SI expL ENTONCES statements . endcondition
    (41) statements -> statements . stat
    (64) endcondition -> . .
    (65) endcondition -> . CASO CONTRARIO statements .
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (63) conditions -> . SI expL ENTONCES statements endcondition
    (81) ciclos -> . ENCUANTO expL HACER statements .
    (82) ciclos -> . PARA expL SIGUIENTE atrib .
    (83) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (84) write -> . ESCRIBIR ( ID ) ;
    (85) write -> . ESCRIBIR ( STRING ) ;

    .               shift and go to state 133
    CASO            shift and go to state 134
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    endcondition                   shift and go to state 132
    stat                           shift and go to state 27
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 101

    (67) expL -> expL OR termoB .
    (69) termoB -> termoB . AND fatorB

    ENTONCES        reduce using rule 67 (expL -> expL OR termoB .)
    OR              reduce using rule 67 (expL -> expL OR termoB .)
    HACER           reduce using rule 67 (expL -> expL OR termoB .)
    SIGUIENTE       reduce using rule 67 (expL -> expL OR termoB .)
    )               reduce using rule 67 (expL -> expL OR termoB .)
    AND             shift and go to state 65


state 102

    (69) termoB -> termoB AND fatorB .

    AND             reduce using rule 69 (termoB -> termoB AND fatorB .)
    ENTONCES        reduce using rule 69 (termoB -> termoB AND fatorB .)
    OR              reduce using rule 69 (termoB -> termoB AND fatorB .)
    HACER           reduce using rule 69 (termoB -> termoB AND fatorB .)
    SIGUIENTE       reduce using rule 69 (termoB -> termoB AND fatorB .)
    )               reduce using rule 69 (termoB -> termoB AND fatorB .)


state 103

    (73) fatorB -> ( expL ) .

    AND             reduce using rule 73 (fatorB -> ( expL ) .)
    ENTONCES        reduce using rule 73 (fatorB -> ( expL ) .)
    OR              reduce using rule 73 (fatorB -> ( expL ) .)
    HACER           reduce using rule 73 (fatorB -> ( expL ) .)
    SIGUIENTE       reduce using rule 73 (fatorB -> ( expL ) .)
    )               reduce using rule 73 (fatorB -> ( expL ) .)


state 104

    (60) fator -> ( exp ) .

    *               reduce using rule 60 (fator -> ( exp ) .)
    /               reduce using rule 60 (fator -> ( exp ) .)
    ^               reduce using rule 60 (fator -> ( exp ) .)
    +               reduce using rule 60 (fator -> ( exp ) .)
    -               reduce using rule 60 (fator -> ( exp ) .)
    >               reduce using rule 60 (fator -> ( exp ) .)
    <               reduce using rule 60 (fator -> ( exp ) .)
    IGUAL           reduce using rule 60 (fator -> ( exp ) .)
    DIFERENTE       reduce using rule 60 (fator -> ( exp ) .)
    ;               reduce using rule 60 (fator -> ( exp ) .)
    .               reduce using rule 60 (fator -> ( exp ) .)
    HACER           reduce using rule 60 (fator -> ( exp ) .)
    )               reduce using rule 60 (fator -> ( exp ) .)
    :               reduce using rule 60 (fator -> ( exp ) .)
    ,               reduce using rule 60 (fator -> ( exp ) .)
    AND             reduce using rule 60 (fator -> ( exp ) .)
    ENTONCES        reduce using rule 60 (fator -> ( exp ) .)
    OR              reduce using rule 60 (fator -> ( exp ) .)
    SIGUIENTE       reduce using rule 60 (fator -> ( exp ) .)


state 105

    (74) condition -> exp op exp .
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo

    AND             reduce using rule 74 (condition -> exp op exp .)
    ENTONCES        reduce using rule 74 (condition -> exp op exp .)
    OR              reduce using rule 74 (condition -> exp op exp .)
    HACER           reduce using rule 74 (condition -> exp op exp .)
    SIGUIENTE       reduce using rule 74 (condition -> exp op exp .)
    )               reduce using rule 74 (condition -> exp op exp .)
    +               shift and go to state 69
    -               shift and go to state 70


state 106

    (50) exp -> exp + termo .
    (53) termo -> termo . * fator
    (54) termo -> termo . / fator
    (55) termo -> termo . ^ fator

    +               reduce using rule 50 (exp -> exp + termo .)
    -               reduce using rule 50 (exp -> exp + termo .)
    >               reduce using rule 50 (exp -> exp + termo .)
    <               reduce using rule 50 (exp -> exp + termo .)
    IGUAL           reduce using rule 50 (exp -> exp + termo .)
    DIFERENTE       reduce using rule 50 (exp -> exp + termo .)
    ;               reduce using rule 50 (exp -> exp + termo .)
    .               reduce using rule 50 (exp -> exp + termo .)
    HACER           reduce using rule 50 (exp -> exp + termo .)
    )               reduce using rule 50 (exp -> exp + termo .)
    :               reduce using rule 50 (exp -> exp + termo .)
    ,               reduce using rule 50 (exp -> exp + termo .)
    AND             reduce using rule 50 (exp -> exp + termo .)
    ENTONCES        reduce using rule 50 (exp -> exp + termo .)
    OR              reduce using rule 50 (exp -> exp + termo .)
    SIGUIENTE       reduce using rule 50 (exp -> exp + termo .)
    *               shift and go to state 75
    /               shift and go to state 76
    ^               shift and go to state 77


state 107

    (51) exp -> exp - termo .
    (53) termo -> termo . * fator
    (54) termo -> termo . / fator
    (55) termo -> termo . ^ fator

    +               reduce using rule 51 (exp -> exp - termo .)
    -               reduce using rule 51 (exp -> exp - termo .)
    >               reduce using rule 51 (exp -> exp - termo .)
    <               reduce using rule 51 (exp -> exp - termo .)
    IGUAL           reduce using rule 51 (exp -> exp - termo .)
    DIFERENTE       reduce using rule 51 (exp -> exp - termo .)
    ;               reduce using rule 51 (exp -> exp - termo .)
    .               reduce using rule 51 (exp -> exp - termo .)
    HACER           reduce using rule 51 (exp -> exp - termo .)
    )               reduce using rule 51 (exp -> exp - termo .)
    :               reduce using rule 51 (exp -> exp - termo .)
    ,               reduce using rule 51 (exp -> exp - termo .)
    AND             reduce using rule 51 (exp -> exp - termo .)
    ENTONCES        reduce using rule 51 (exp -> exp - termo .)
    OR              reduce using rule 51 (exp -> exp - termo .)
    SIGUIENTE       reduce using rule 51 (exp -> exp - termo .)
    *               shift and go to state 75
    /               shift and go to state 76
    ^               shift and go to state 77


state 108

    (79) op -> > IGUAL .

    INT             reduce using rule 79 (op -> > IGUAL .)
    FLOAT           reduce using rule 79 (op -> > IGUAL .)
    ID              reduce using rule 79 (op -> > IGUAL .)
    (               reduce using rule 79 (op -> > IGUAL .)
    LEER            reduce using rule 79 (op -> > IGUAL .)
    REAL            reduce using rule 79 (op -> > IGUAL .)
    ENTERO          reduce using rule 79 (op -> > IGUAL .)
    STR             reduce using rule 79 (op -> > IGUAL .)


state 109

    (80) op -> < IGUAL .

    INT             reduce using rule 80 (op -> < IGUAL .)
    FLOAT           reduce using rule 80 (op -> < IGUAL .)
    ID              reduce using rule 80 (op -> < IGUAL .)
    (               reduce using rule 80 (op -> < IGUAL .)
    LEER            reduce using rule 80 (op -> < IGUAL .)
    REAL            reduce using rule 80 (op -> < IGUAL .)
    ENTERO          reduce using rule 80 (op -> < IGUAL .)
    STR             reduce using rule 80 (op -> < IGUAL .)


state 110

    (53) termo -> termo * fator .

    *               reduce using rule 53 (termo -> termo * fator .)
    /               reduce using rule 53 (termo -> termo * fator .)
    ^               reduce using rule 53 (termo -> termo * fator .)
    +               reduce using rule 53 (termo -> termo * fator .)
    -               reduce using rule 53 (termo -> termo * fator .)
    >               reduce using rule 53 (termo -> termo * fator .)
    <               reduce using rule 53 (termo -> termo * fator .)
    IGUAL           reduce using rule 53 (termo -> termo * fator .)
    DIFERENTE       reduce using rule 53 (termo -> termo * fator .)
    ;               reduce using rule 53 (termo -> termo * fator .)
    .               reduce using rule 53 (termo -> termo * fator .)
    HACER           reduce using rule 53 (termo -> termo * fator .)
    )               reduce using rule 53 (termo -> termo * fator .)
    :               reduce using rule 53 (termo -> termo * fator .)
    ,               reduce using rule 53 (termo -> termo * fator .)
    AND             reduce using rule 53 (termo -> termo * fator .)
    ENTONCES        reduce using rule 53 (termo -> termo * fator .)
    OR              reduce using rule 53 (termo -> termo * fator .)
    SIGUIENTE       reduce using rule 53 (termo -> termo * fator .)


state 111

    (54) termo -> termo / fator .

    *               reduce using rule 54 (termo -> termo / fator .)
    /               reduce using rule 54 (termo -> termo / fator .)
    ^               reduce using rule 54 (termo -> termo / fator .)
    +               reduce using rule 54 (termo -> termo / fator .)
    -               reduce using rule 54 (termo -> termo / fator .)
    >               reduce using rule 54 (termo -> termo / fator .)
    <               reduce using rule 54 (termo -> termo / fator .)
    IGUAL           reduce using rule 54 (termo -> termo / fator .)
    DIFERENTE       reduce using rule 54 (termo -> termo / fator .)
    ;               reduce using rule 54 (termo -> termo / fator .)
    .               reduce using rule 54 (termo -> termo / fator .)
    HACER           reduce using rule 54 (termo -> termo / fator .)
    )               reduce using rule 54 (termo -> termo / fator .)
    :               reduce using rule 54 (termo -> termo / fator .)
    ,               reduce using rule 54 (termo -> termo / fator .)
    AND             reduce using rule 54 (termo -> termo / fator .)
    ENTONCES        reduce using rule 54 (termo -> termo / fator .)
    OR              reduce using rule 54 (termo -> termo / fator .)
    SIGUIENTE       reduce using rule 54 (termo -> termo / fator .)


state 112

    (55) termo -> termo ^ fator .

    *               reduce using rule 55 (termo -> termo ^ fator .)
    /               reduce using rule 55 (termo -> termo ^ fator .)
    ^               reduce using rule 55 (termo -> termo ^ fator .)
    +               reduce using rule 55 (termo -> termo ^ fator .)
    -               reduce using rule 55 (termo -> termo ^ fator .)
    >               reduce using rule 55 (termo -> termo ^ fator .)
    <               reduce using rule 55 (termo -> termo ^ fator .)
    IGUAL           reduce using rule 55 (termo -> termo ^ fator .)
    DIFERENTE       reduce using rule 55 (termo -> termo ^ fator .)
    ;               reduce using rule 55 (termo -> termo ^ fator .)
    .               reduce using rule 55 (termo -> termo ^ fator .)
    HACER           reduce using rule 55 (termo -> termo ^ fator .)
    )               reduce using rule 55 (termo -> termo ^ fator .)
    :               reduce using rule 55 (termo -> termo ^ fator .)
    ,               reduce using rule 55 (termo -> termo ^ fator .)
    AND             reduce using rule 55 (termo -> termo ^ fator .)
    ENTONCES        reduce using rule 55 (termo -> termo ^ fator .)
    OR              reduce using rule 55 (termo -> termo ^ fator .)
    SIGUIENTE       reduce using rule 55 (termo -> termo ^ fator .)


state 113

    (87) cast -> tipocast ( exp . )
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo

    )               shift and go to state 135
    +               shift and go to state 69
    -               shift and go to state 70


state 114

    (88) cast -> tipocast ( STRING . )

    )               shift and go to state 136


state 115

    (86) read -> LEER ( STRING . )

    )               shift and go to state 137


state 116

    (81) ciclos -> ENCUANTO expL HACER statements . .
    (41) statements -> statements . stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (63) conditions -> . SI expL ENTONCES statements endcondition
    (81) ciclos -> . ENCUANTO expL HACER statements .
    (82) ciclos -> . PARA expL SIGUIENTE atrib .
    (83) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (84) write -> . ESCRIBIR ( ID ) ;
    (85) write -> . ESCRIBIR ( STRING ) ;

    .               shift and go to state 138
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    stat                           shift and go to state 27
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 117

    (82) ciclos -> PARA expL SIGUIENTE atrib . .
    (83) ciclos -> PARA expL SIGUIENTE atrib . HACER statements .

    .               shift and go to state 139
    HACER           shift and go to state 140


state 118

    (84) write -> ESCRIBIR ( ID ) . ;

    ;               shift and go to state 141


state 119

    (85) write -> ESCRIBIR ( STRING ) . ;

    ;               shift and go to state 142


state 120

    (33) parametros -> ID : . tipo
    (12) tipo -> . ENTERO
    (13) tipo -> . REAL
    (14) tipo -> . BOOLEANO
    (15) tipo -> . STR

    ENTERO          shift and go to state 85
    REAL            shift and go to state 86
    BOOLEANO        shift and go to state 87
    STR             shift and go to state 88

    tipo                           shift and go to state 143

state 121

    (31) declF -> FUNCION ID ( parametros ) . : tipo declarations statements DEVUELVE return .

    :               shift and go to state 144


state 122

    (34) parametros -> parametros , . ID : tipo

    ID              shift and go to state 145


state 123

    (21) lista -> [ ] .

    VAR             reduce using rule 21 (lista -> [ ] .)
    FUNCION         reduce using rule 21 (lista -> [ ] .)
    LISTA           reduce using rule 21 (lista -> [ ] .)
    ID              reduce using rule 21 (lista -> [ ] .)
    SI              reduce using rule 21 (lista -> [ ] .)
    ENCUANTO        reduce using rule 21 (lista -> [ ] .)
    PARA            reduce using rule 21 (lista -> [ ] .)
    ESCRIBIR        reduce using rule 21 (lista -> [ ] .)
    ]               reduce using rule 21 (lista -> [ ] .)
    ,               reduce using rule 21 (lista -> [ ] .)


state 124

    (22) lista -> [ elementos . ]
    (24) elementos -> elementos . , elemento

    ]               shift and go to state 146
    ,               shift and go to state 147


state 125

    (23) elementos -> elemento .

    ]               reduce using rule 23 (elementos -> elemento .)
    ,               reduce using rule 23 (elementos -> elemento .)


state 126

    (25) elemento -> INT .

    ]               reduce using rule 25 (elemento -> INT .)
    ,               reduce using rule 25 (elemento -> INT .)


state 127

    (26) elemento -> FLOAT .

    ]               reduce using rule 26 (elemento -> FLOAT .)
    ,               reduce using rule 26 (elemento -> FLOAT .)


state 128

    (27) elemento -> BOOLEANO .

    ]               reduce using rule 27 (elemento -> BOOLEANO .)
    ,               reduce using rule 27 (elemento -> BOOLEANO .)


state 129

    (28) elemento -> STRING .

    ]               reduce using rule 28 (elemento -> STRING .)
    ,               reduce using rule 28 (elemento -> STRING .)


state 130

    (29) elemento -> ID .

    ]               reduce using rule 29 (elemento -> ID .)
    ,               reduce using rule 29 (elemento -> ID .)


state 131

    (30) elemento -> lista .

    ]               reduce using rule 30 (elemento -> lista .)
    ,               reduce using rule 30 (elemento -> lista .)


state 132

    (63) conditions -> SI expL ENTONCES statements endcondition .

    ID              reduce using rule 63 (conditions -> SI expL ENTONCES statements endcondition .)
    SI              reduce using rule 63 (conditions -> SI expL ENTONCES statements endcondition .)
    ENCUANTO        reduce using rule 63 (conditions -> SI expL ENTONCES statements endcondition .)
    PARA            reduce using rule 63 (conditions -> SI expL ENTONCES statements endcondition .)
    ESCRIBIR        reduce using rule 63 (conditions -> SI expL ENTONCES statements endcondition .)
    $end            reduce using rule 63 (conditions -> SI expL ENTONCES statements endcondition .)
    .               reduce using rule 63 (conditions -> SI expL ENTONCES statements endcondition .)
    CASO            reduce using rule 63 (conditions -> SI expL ENTONCES statements endcondition .)
    DEVUELVE        reduce using rule 63 (conditions -> SI expL ENTONCES statements endcondition .)


state 133

    (64) endcondition -> . .

    ID              reduce using rule 64 (endcondition -> . .)
    SI              reduce using rule 64 (endcondition -> . .)
    ENCUANTO        reduce using rule 64 (endcondition -> . .)
    PARA            reduce using rule 64 (endcondition -> . .)
    ESCRIBIR        reduce using rule 64 (endcondition -> . .)
    $end            reduce using rule 64 (endcondition -> . .)
    .               reduce using rule 64 (endcondition -> . .)
    CASO            reduce using rule 64 (endcondition -> . .)
    DEVUELVE        reduce using rule 64 (endcondition -> . .)


state 134

    (65) endcondition -> CASO . CONTRARIO statements .

    CONTRARIO       shift and go to state 148


state 135

    (87) cast -> tipocast ( exp ) .

    *               reduce using rule 87 (cast -> tipocast ( exp ) .)
    /               reduce using rule 87 (cast -> tipocast ( exp ) .)
    ^               reduce using rule 87 (cast -> tipocast ( exp ) .)
    +               reduce using rule 87 (cast -> tipocast ( exp ) .)
    -               reduce using rule 87 (cast -> tipocast ( exp ) .)
    >               reduce using rule 87 (cast -> tipocast ( exp ) .)
    <               reduce using rule 87 (cast -> tipocast ( exp ) .)
    IGUAL           reduce using rule 87 (cast -> tipocast ( exp ) .)
    DIFERENTE       reduce using rule 87 (cast -> tipocast ( exp ) .)
    ;               reduce using rule 87 (cast -> tipocast ( exp ) .)
    .               reduce using rule 87 (cast -> tipocast ( exp ) .)
    HACER           reduce using rule 87 (cast -> tipocast ( exp ) .)
    )               reduce using rule 87 (cast -> tipocast ( exp ) .)
    :               reduce using rule 87 (cast -> tipocast ( exp ) .)
    ,               reduce using rule 87 (cast -> tipocast ( exp ) .)
    AND             reduce using rule 87 (cast -> tipocast ( exp ) .)
    ENTONCES        reduce using rule 87 (cast -> tipocast ( exp ) .)
    OR              reduce using rule 87 (cast -> tipocast ( exp ) .)
    SIGUIENTE       reduce using rule 87 (cast -> tipocast ( exp ) .)


state 136

    (88) cast -> tipocast ( STRING ) .

    *               reduce using rule 88 (cast -> tipocast ( STRING ) .)
    /               reduce using rule 88 (cast -> tipocast ( STRING ) .)
    ^               reduce using rule 88 (cast -> tipocast ( STRING ) .)
    +               reduce using rule 88 (cast -> tipocast ( STRING ) .)
    -               reduce using rule 88 (cast -> tipocast ( STRING ) .)
    >               reduce using rule 88 (cast -> tipocast ( STRING ) .)
    <               reduce using rule 88 (cast -> tipocast ( STRING ) .)
    IGUAL           reduce using rule 88 (cast -> tipocast ( STRING ) .)
    DIFERENTE       reduce using rule 88 (cast -> tipocast ( STRING ) .)
    ;               reduce using rule 88 (cast -> tipocast ( STRING ) .)
    .               reduce using rule 88 (cast -> tipocast ( STRING ) .)
    HACER           reduce using rule 88 (cast -> tipocast ( STRING ) .)
    )               reduce using rule 88 (cast -> tipocast ( STRING ) .)
    :               reduce using rule 88 (cast -> tipocast ( STRING ) .)
    ,               reduce using rule 88 (cast -> tipocast ( STRING ) .)
    AND             reduce using rule 88 (cast -> tipocast ( STRING ) .)
    ENTONCES        reduce using rule 88 (cast -> tipocast ( STRING ) .)
    OR              reduce using rule 88 (cast -> tipocast ( STRING ) .)
    SIGUIENTE       reduce using rule 88 (cast -> tipocast ( STRING ) .)


state 137

    (86) read -> LEER ( STRING ) .

    *               reduce using rule 86 (read -> LEER ( STRING ) .)
    /               reduce using rule 86 (read -> LEER ( STRING ) .)
    ^               reduce using rule 86 (read -> LEER ( STRING ) .)
    +               reduce using rule 86 (read -> LEER ( STRING ) .)
    -               reduce using rule 86 (read -> LEER ( STRING ) .)
    >               reduce using rule 86 (read -> LEER ( STRING ) .)
    <               reduce using rule 86 (read -> LEER ( STRING ) .)
    IGUAL           reduce using rule 86 (read -> LEER ( STRING ) .)
    DIFERENTE       reduce using rule 86 (read -> LEER ( STRING ) .)
    ;               reduce using rule 86 (read -> LEER ( STRING ) .)
    .               reduce using rule 86 (read -> LEER ( STRING ) .)
    HACER           reduce using rule 86 (read -> LEER ( STRING ) .)
    )               reduce using rule 86 (read -> LEER ( STRING ) .)
    :               reduce using rule 86 (read -> LEER ( STRING ) .)
    ,               reduce using rule 86 (read -> LEER ( STRING ) .)
    AND             reduce using rule 86 (read -> LEER ( STRING ) .)
    ENTONCES        reduce using rule 86 (read -> LEER ( STRING ) .)
    OR              reduce using rule 86 (read -> LEER ( STRING ) .)
    SIGUIENTE       reduce using rule 86 (read -> LEER ( STRING ) .)


state 138

    (81) ciclos -> ENCUANTO expL HACER statements . .

    ID              reduce using rule 81 (ciclos -> ENCUANTO expL HACER statements . .)
    SI              reduce using rule 81 (ciclos -> ENCUANTO expL HACER statements . .)
    ENCUANTO        reduce using rule 81 (ciclos -> ENCUANTO expL HACER statements . .)
    PARA            reduce using rule 81 (ciclos -> ENCUANTO expL HACER statements . .)
    ESCRIBIR        reduce using rule 81 (ciclos -> ENCUANTO expL HACER statements . .)
    $end            reduce using rule 81 (ciclos -> ENCUANTO expL HACER statements . .)
    .               reduce using rule 81 (ciclos -> ENCUANTO expL HACER statements . .)
    CASO            reduce using rule 81 (ciclos -> ENCUANTO expL HACER statements . .)
    DEVUELVE        reduce using rule 81 (ciclos -> ENCUANTO expL HACER statements . .)


state 139

    (82) ciclos -> PARA expL SIGUIENTE atrib . .

    ID              reduce using rule 82 (ciclos -> PARA expL SIGUIENTE atrib . .)
    SI              reduce using rule 82 (ciclos -> PARA expL SIGUIENTE atrib . .)
    ENCUANTO        reduce using rule 82 (ciclos -> PARA expL SIGUIENTE atrib . .)
    PARA            reduce using rule 82 (ciclos -> PARA expL SIGUIENTE atrib . .)
    ESCRIBIR        reduce using rule 82 (ciclos -> PARA expL SIGUIENTE atrib . .)
    $end            reduce using rule 82 (ciclos -> PARA expL SIGUIENTE atrib . .)
    .               reduce using rule 82 (ciclos -> PARA expL SIGUIENTE atrib . .)
    CASO            reduce using rule 82 (ciclos -> PARA expL SIGUIENTE atrib . .)
    DEVUELVE        reduce using rule 82 (ciclos -> PARA expL SIGUIENTE atrib . .)


state 140

    (83) ciclos -> PARA expL SIGUIENTE atrib HACER . statements .
    (40) statements -> . stat
    (41) statements -> . statements stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (63) conditions -> . SI expL ENTONCES statements endcondition
    (81) ciclos -> . ENCUANTO expL HACER statements .
    (82) ciclos -> . PARA expL SIGUIENTE atrib .
    (83) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (84) write -> . ESCRIBIR ( ID ) ;
    (85) write -> . ESCRIBIR ( STRING ) ;

    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    atrib                          shift and go to state 13
    statements                     shift and go to state 149
    stat                           shift and go to state 12
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 141

    (84) write -> ESCRIBIR ( ID ) ; .

    ID              reduce using rule 84 (write -> ESCRIBIR ( ID ) ; .)
    SI              reduce using rule 84 (write -> ESCRIBIR ( ID ) ; .)
    ENCUANTO        reduce using rule 84 (write -> ESCRIBIR ( ID ) ; .)
    PARA            reduce using rule 84 (write -> ESCRIBIR ( ID ) ; .)
    ESCRIBIR        reduce using rule 84 (write -> ESCRIBIR ( ID ) ; .)
    $end            reduce using rule 84 (write -> ESCRIBIR ( ID ) ; .)
    .               reduce using rule 84 (write -> ESCRIBIR ( ID ) ; .)
    CASO            reduce using rule 84 (write -> ESCRIBIR ( ID ) ; .)
    DEVUELVE        reduce using rule 84 (write -> ESCRIBIR ( ID ) ; .)


state 142

    (85) write -> ESCRIBIR ( STRING ) ; .

    ID              reduce using rule 85 (write -> ESCRIBIR ( STRING ) ; .)
    SI              reduce using rule 85 (write -> ESCRIBIR ( STRING ) ; .)
    ENCUANTO        reduce using rule 85 (write -> ESCRIBIR ( STRING ) ; .)
    PARA            reduce using rule 85 (write -> ESCRIBIR ( STRING ) ; .)
    ESCRIBIR        reduce using rule 85 (write -> ESCRIBIR ( STRING ) ; .)
    $end            reduce using rule 85 (write -> ESCRIBIR ( STRING ) ; .)
    .               reduce using rule 85 (write -> ESCRIBIR ( STRING ) ; .)
    CASO            reduce using rule 85 (write -> ESCRIBIR ( STRING ) ; .)
    DEVUELVE        reduce using rule 85 (write -> ESCRIBIR ( STRING ) ; .)


state 143

    (33) parametros -> ID : tipo .

    )               reduce using rule 33 (parametros -> ID : tipo .)
    ,               reduce using rule 33 (parametros -> ID : tipo .)


state 144

    (31) declF -> FUNCION ID ( parametros ) : . tipo declarations statements DEVUELVE return .
    (12) tipo -> . ENTERO
    (13) tipo -> . REAL
    (14) tipo -> . BOOLEANO
    (15) tipo -> . STR

    ENTERO          shift and go to state 85
    REAL            shift and go to state 86
    BOOLEANO        shift and go to state 87
    STR             shift and go to state 88

    tipo                           shift and go to state 150

state 145

    (34) parametros -> parametros , ID . : tipo

    :               shift and go to state 151


state 146

    (22) lista -> [ elementos ] .

    VAR             reduce using rule 22 (lista -> [ elementos ] .)
    FUNCION         reduce using rule 22 (lista -> [ elementos ] .)
    LISTA           reduce using rule 22 (lista -> [ elementos ] .)
    ID              reduce using rule 22 (lista -> [ elementos ] .)
    SI              reduce using rule 22 (lista -> [ elementos ] .)
    ENCUANTO        reduce using rule 22 (lista -> [ elementos ] .)
    PARA            reduce using rule 22 (lista -> [ elementos ] .)
    ESCRIBIR        reduce using rule 22 (lista -> [ elementos ] .)
    ]               reduce using rule 22 (lista -> [ elementos ] .)
    ,               reduce using rule 22 (lista -> [ elementos ] .)


state 147

    (24) elementos -> elementos , . elemento
    (25) elemento -> . INT
    (26) elemento -> . FLOAT
    (27) elemento -> . BOOLEANO
    (28) elemento -> . STRING
    (29) elemento -> . ID
    (30) elemento -> . lista
    (21) lista -> . [ ]
    (22) lista -> . [ elementos ]

    INT             shift and go to state 126
    FLOAT           shift and go to state 127
    BOOLEANO        shift and go to state 128
    STRING          shift and go to state 129
    ID              shift and go to state 130
    [               shift and go to state 98

    elemento                       shift and go to state 152
    lista                          shift and go to state 131

state 148

    (65) endcondition -> CASO CONTRARIO . statements .
    (40) statements -> . stat
    (41) statements -> . statements stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (63) conditions -> . SI expL ENTONCES statements endcondition
    (81) ciclos -> . ENCUANTO expL HACER statements .
    (82) ciclos -> . PARA expL SIGUIENTE atrib .
    (83) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (84) write -> . ESCRIBIR ( ID ) ;
    (85) write -> . ESCRIBIR ( STRING ) ;

    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    statements                     shift and go to state 153
    stat                           shift and go to state 12
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 149

    (83) ciclos -> PARA expL SIGUIENTE atrib HACER statements . .
    (41) statements -> statements . stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (63) conditions -> . SI expL ENTONCES statements endcondition
    (81) ciclos -> . ENCUANTO expL HACER statements .
    (82) ciclos -> . PARA expL SIGUIENTE atrib .
    (83) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (84) write -> . ESCRIBIR ( ID ) ;
    (85) write -> . ESCRIBIR ( STRING ) ;

    .               shift and go to state 154
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    atrib                          shift and go to state 13
    stat                           shift and go to state 27
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 150

    (31) declF -> FUNCION ID ( parametros ) : tipo . declarations statements DEVUELVE return .
    (2) declarations -> . decl
    (3) declarations -> . declarations decl
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (7) declV -> . VAR vari : tipo
    (31) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (20) declL -> . LISTA ID = lista

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9

    declarations                   shift and go to state 155
    decl                           shift and go to state 3
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6

state 151

    (34) parametros -> parametros , ID : . tipo
    (12) tipo -> . ENTERO
    (13) tipo -> . REAL
    (14) tipo -> . BOOLEANO
    (15) tipo -> . STR

    ENTERO          shift and go to state 85
    REAL            shift and go to state 86
    BOOLEANO        shift and go to state 87
    STR             shift and go to state 88

    tipo                           shift and go to state 156

state 152

    (24) elementos -> elementos , elemento .

    ]               reduce using rule 24 (elementos -> elementos , elemento .)
    ,               reduce using rule 24 (elementos -> elementos , elemento .)


state 153

    (65) endcondition -> CASO CONTRARIO statements . .
    (41) statements -> statements . stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (63) conditions -> . SI expL ENTONCES statements endcondition
    (81) ciclos -> . ENCUANTO expL HACER statements .
    (82) ciclos -> . PARA expL SIGUIENTE atrib .
    (83) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (84) write -> . ESCRIBIR ( ID ) ;
    (85) write -> . ESCRIBIR ( STRING ) ;

    .               shift and go to state 157
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    stat                           shift and go to state 27
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 154

    (83) ciclos -> PARA expL SIGUIENTE atrib HACER statements . .

    ID              reduce using rule 83 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    SI              reduce using rule 83 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    ENCUANTO        reduce using rule 83 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    PARA            reduce using rule 83 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    ESCRIBIR        reduce using rule 83 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    $end            reduce using rule 83 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    .               reduce using rule 83 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    CASO            reduce using rule 83 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    DEVUELVE        reduce using rule 83 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)


state 155

    (31) declF -> FUNCION ID ( parametros ) : tipo declarations . statements DEVUELVE return .
    (3) declarations -> declarations . decl
    (40) statements -> . stat
    (41) statements -> . statements stat
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (7) declV -> . VAR vari : tipo
    (31) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (20) declL -> . LISTA ID = lista
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (63) conditions -> . SI expL ENTONCES statements endcondition
    (81) ciclos -> . ENCUANTO expL HACER statements .
    (82) ciclos -> . PARA expL SIGUIENTE atrib .
    (83) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (84) write -> . ESCRIBIR ( ID ) ;
    (85) write -> . ESCRIBIR ( STRING ) ;

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    statements                     shift and go to state 158
    decl                           shift and go to state 11
    stat                           shift and go to state 12
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 156

    (34) parametros -> parametros , ID : tipo .

    )               reduce using rule 34 (parametros -> parametros , ID : tipo .)
    ,               reduce using rule 34 (parametros -> parametros , ID : tipo .)


state 157

    (65) endcondition -> CASO CONTRARIO statements . .

    ID              reduce using rule 65 (endcondition -> CASO CONTRARIO statements . .)
    SI              reduce using rule 65 (endcondition -> CASO CONTRARIO statements . .)
    ENCUANTO        reduce using rule 65 (endcondition -> CASO CONTRARIO statements . .)
    PARA            reduce using rule 65 (endcondition -> CASO CONTRARIO statements . .)
    ESCRIBIR        reduce using rule 65 (endcondition -> CASO CONTRARIO statements . .)
    $end            reduce using rule 65 (endcondition -> CASO CONTRARIO statements . .)
    .               reduce using rule 65 (endcondition -> CASO CONTRARIO statements . .)
    CASO            reduce using rule 65 (endcondition -> CASO CONTRARIO statements . .)
    DEVUELVE        reduce using rule 65 (endcondition -> CASO CONTRARIO statements . .)


state 158

    (31) declF -> FUNCION ID ( parametros ) : tipo declarations statements . DEVUELVE return .
    (41) statements -> statements . stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (63) conditions -> . SI expL ENTONCES statements endcondition
    (81) ciclos -> . ENCUANTO expL HACER statements .
    (82) ciclos -> . PARA expL SIGUIENTE atrib .
    (83) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (84) write -> . ESCRIBIR ( ID ) ;
    (85) write -> . ESCRIBIR ( STRING ) ;

    DEVUELVE        shift and go to state 159
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    stat                           shift and go to state 27
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 159

    (31) declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE . return .
    (35) return -> . INT
    (36) return -> . ID
    (37) return -> . FLOAT
    (38) return -> . VERDADERO
    (39) return -> . FALSO

    INT             shift and go to state 162
    ID              shift and go to state 160
    FLOAT           shift and go to state 163
    VERDADERO       shift and go to state 164
    FALSO           shift and go to state 165

    return                         shift and go to state 161

state 160

    (36) return -> ID .

    .               reduce using rule 36 (return -> ID .)


state 161

    (31) declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .

    .               shift and go to state 166


state 162

    (35) return -> INT .

    .               reduce using rule 35 (return -> INT .)


state 163

    (37) return -> FLOAT .

    .               reduce using rule 37 (return -> FLOAT .)


state 164

    (38) return -> VERDADERO .

    .               reduce using rule 38 (return -> VERDADERO .)


state 165

    (39) return -> FALSO .

    .               reduce using rule 39 (return -> FALSO .)


state 166

    (31) declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .

    VAR             reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    FUNCION         reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    LISTA           reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    ID              reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    SI              reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    ENCUANTO        reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    PARA            reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    ESCRIBIR        reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)

