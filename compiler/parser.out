Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ESCRIBE
    FALSO
    NADA
    RESTO
    VERDADERO

Grammar

Rule 0     S' -> prg
Rule 1     prg -> declarations statements
Rule 2     declarations -> decl
Rule 3     declarations -> declarations decl
Rule 4     decl -> declV
Rule 5     decl -> declF
Rule 6     decl -> declL
Rule 7     declV -> VAR ids : tipo ENTER
Rule 8     ids -> ID
Rule 9     ids -> ids , ID
Rule 10    tipo -> ENTERO
Rule 11    tipo -> REAL
Rule 12    tipo -> BOOLEANO
Rule 13    declL -> LISTA ID = lista ENTER
Rule 14    lista -> [ ]
Rule 15    lista -> [ elementos ]
Rule 16    elementos -> elemento
Rule 17    elementos -> elementos , elemento
Rule 18    elemento -> INT
Rule 19    elemento -> FLOAT
Rule 20    elemento -> BOOLEANO
Rule 21    elemento -> STRING
Rule 22    elemento -> ID
Rule 23    elemento -> lista
Rule 24    declF -> FUNCION ID ( parametros ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return
Rule 25    declF -> FUNCION ID ( ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return
Rule 26    parametros -> ID : tipo
Rule 27    parametros -> parametros , ID : tipo
Rule 28    declarationsF -> TAB decl
Rule 29    declarationsF -> declarationsF TAB decl
Rule 30    return -> INT ENTER
Rule 31    return -> ID ENTER
Rule 32    statementsI -> TAB stat
Rule 33    statementsI -> statementsI TAB stat
Rule 34    statements -> stat
Rule 35    statements -> statements stat
Rule 36    stat -> atrib ENTER
Rule 37    stat -> conditions
Rule 38    stat -> ciclos
Rule 39    atrib -> ID = exp
Rule 40    exp -> exp + termo
Rule 41    exp -> exp - termo
Rule 42    exp -> termo
Rule 43    termo -> termo * fator
Rule 44    termo -> termo / fator
Rule 45    termo -> termo ^ fator
Rule 46    termo -> fator
Rule 47    fator -> INT
Rule 48    fator -> FLOAT
Rule 49    fator -> ID
Rule 50    fator -> ( exp )
Rule 51    conditions -> SI expL ENTONCES ENTER statementsI
Rule 52    conditions -> SI expL ENTONCES ENTER statementsI CASO CONTRARIO ENTER statementsI
Rule 53    expL -> termoB
Rule 54    expL -> expL OR termoB
Rule 55    termoB -> fatorB
Rule 56    termoB -> termoB AND fatorB
Rule 57    fatorB -> condition
Rule 58    fatorB -> BOOLEANO
Rule 59    fatorB -> ( expL )
Rule 60    condition -> exp op exp
Rule 61    op -> >
Rule 62    op -> <
Rule 63    op -> IGUAL
Rule 64    op -> DIFERENTE
Rule 65    op -> > IGUAL
Rule 66    op -> < IGUAL
Rule 67    ciclos -> ENCUANTO expL HACER ENTER statementsI
Rule 68    ciclos -> PARA expL SIGUIENTE atrib . ENTER
Rule 69    ciclos -> PARA expL SIGUIENTE atrib HACER ENTER statementsI

Terminals, with rules where they appear

(                    : 24 25 50 59
)                    : 24 25 50 59
*                    : 43
+                    : 40
,                    : 9 17 27
-                    : 41
.                    : 68
/                    : 44
:                    : 7 24 25 26 27
<                    : 62 66
=                    : 13 39
>                    : 61 65
AND                  : 56
BOOLEANO             : 12 20 58
CASO                 : 52
CONTRARIO            : 52
DEVUELVE             : 24 25
DIFERENTE            : 64
ENCUANTO             : 67
ENTER                : 7 13 24 25 30 31 36 51 52 52 67 68 69
ENTERO               : 10 24 25
ENTONCES             : 51 52
ESCRIBE              : 
FALSO                : 
FLOAT                : 19 48
FUNCION              : 24 25
HACER                : 67 69
ID                   : 8 9 13 22 24 25 26 27 31 39 49
IGUAL                : 63 65 66
INT                  : 18 30 47
LISTA                : 13
NADA                 : 
OR                   : 54
PARA                 : 68 69
REAL                 : 11
RESTO                : 
SI                   : 51 52
SIGUIENTE            : 68 69
STRING               : 21
TAB                  : 24 25 28 29 32 33
VAR                  : 7
VERDADERO            : 
[                    : 14 15
]                    : 14 15
^                    : 45
error                : 

Nonterminals, with rules where they appear

atrib                : 36 68 69
ciclos               : 38
condition            : 57
conditions           : 37
decl                 : 2 3 28 29
declF                : 5
declL                : 6
declV                : 4
declarations         : 1 3
declarationsF        : 24 25 29
elemento             : 16 17
elementos            : 15 17
exp                  : 39 40 41 50 60 60
expL                 : 51 52 54 59 67 68 69
fator                : 43 44 45 46
fatorB               : 55 56
ids                  : 7 9
lista                : 13 23
op                   : 60
parametros           : 24 27
prg                  : 0
return               : 24 25
stat                 : 32 33 34 35
statements           : 1 35
statementsI          : 24 25 33 51 52 52 67 69
termo                : 40 41 42 43 44 45
termoB               : 53 54 56
tipo                 : 7 26 27

Parsing method: LALR

state 0

    (0) S' -> . prg
    (1) prg -> . declarations statements
    (2) declarations -> . decl
    (3) declarations -> . declarations decl
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (7) declV -> . VAR ids : tipo ENTER
    (24) declF -> . FUNCION ID ( parametros ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return
    (25) declF -> . FUNCION ID ( ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return
    (13) declL -> . LISTA ID = lista ENTER

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9

    prg                            shift and go to state 1
    declarations                   shift and go to state 2
    decl                           shift and go to state 3
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6

state 1

    (0) S' -> prg .



state 2

    (1) prg -> declarations . statements
    (3) declarations -> declarations . decl
    (34) statements -> . stat
    (35) statements -> . statements stat
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (36) stat -> . atrib ENTER
    (37) stat -> . conditions
    (38) stat -> . ciclos
    (7) declV -> . VAR ids : tipo ENTER
    (24) declF -> . FUNCION ID ( parametros ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return
    (25) declF -> . FUNCION ID ( ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return
    (13) declL -> . LISTA ID = lista ENTER
    (39) atrib -> . ID = exp
    (51) conditions -> . SI expL ENTONCES ENTER statementsI
    (52) conditions -> . SI expL ENTONCES ENTER statementsI CASO CONTRARIO ENTER statementsI
    (67) ciclos -> . ENCUANTO expL HACER ENTER statementsI
    (68) ciclos -> . PARA expL SIGUIENTE atrib . ENTER
    (69) ciclos -> . PARA expL SIGUIENTE atrib HACER ENTER statementsI

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9
    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    statements                     shift and go to state 10
    decl                           shift and go to state 11
    stat                           shift and go to state 12
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 3

    (2) declarations -> decl .

    VAR             reduce using rule 2 (declarations -> decl .)
    FUNCION         reduce using rule 2 (declarations -> decl .)
    LISTA           reduce using rule 2 (declarations -> decl .)
    ID              reduce using rule 2 (declarations -> decl .)
    SI              reduce using rule 2 (declarations -> decl .)
    ENCUANTO        reduce using rule 2 (declarations -> decl .)
    PARA            reduce using rule 2 (declarations -> decl .)


state 4

    (4) decl -> declV .

    VAR             reduce using rule 4 (decl -> declV .)
    FUNCION         reduce using rule 4 (decl -> declV .)
    LISTA           reduce using rule 4 (decl -> declV .)
    ID              reduce using rule 4 (decl -> declV .)
    SI              reduce using rule 4 (decl -> declV .)
    ENCUANTO        reduce using rule 4 (decl -> declV .)
    PARA            reduce using rule 4 (decl -> declV .)
    TAB             reduce using rule 4 (decl -> declV .)


state 5

    (5) decl -> declF .

    VAR             reduce using rule 5 (decl -> declF .)
    FUNCION         reduce using rule 5 (decl -> declF .)
    LISTA           reduce using rule 5 (decl -> declF .)
    ID              reduce using rule 5 (decl -> declF .)
    SI              reduce using rule 5 (decl -> declF .)
    ENCUANTO        reduce using rule 5 (decl -> declF .)
    PARA            reduce using rule 5 (decl -> declF .)
    TAB             reduce using rule 5 (decl -> declF .)


state 6

    (6) decl -> declL .

    VAR             reduce using rule 6 (decl -> declL .)
    FUNCION         reduce using rule 6 (decl -> declL .)
    LISTA           reduce using rule 6 (decl -> declL .)
    ID              reduce using rule 6 (decl -> declL .)
    SI              reduce using rule 6 (decl -> declL .)
    ENCUANTO        reduce using rule 6 (decl -> declL .)
    PARA            reduce using rule 6 (decl -> declL .)
    TAB             reduce using rule 6 (decl -> declL .)


state 7

    (7) declV -> VAR . ids : tipo ENTER
    (8) ids -> . ID
    (9) ids -> . ids , ID

    ID              shift and go to state 21

    ids                            shift and go to state 20

state 8

    (24) declF -> FUNCION . ID ( parametros ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return
    (25) declF -> FUNCION . ID ( ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return

    ID              shift and go to state 22


state 9

    (13) declL -> LISTA . ID = lista ENTER

    ID              shift and go to state 23


state 10

    (1) prg -> declarations statements .
    (35) statements -> statements . stat
    (36) stat -> . atrib ENTER
    (37) stat -> . conditions
    (38) stat -> . ciclos
    (39) atrib -> . ID = exp
    (51) conditions -> . SI expL ENTONCES ENTER statementsI
    (52) conditions -> . SI expL ENTONCES ENTER statementsI CASO CONTRARIO ENTER statementsI
    (67) ciclos -> . ENCUANTO expL HACER ENTER statementsI
    (68) ciclos -> . PARA expL SIGUIENTE atrib . ENTER
    (69) ciclos -> . PARA expL SIGUIENTE atrib HACER ENTER statementsI

    $end            reduce using rule 1 (prg -> declarations statements .)
    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    stat                           shift and go to state 24
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 11

    (3) declarations -> declarations decl .

    VAR             reduce using rule 3 (declarations -> declarations decl .)
    FUNCION         reduce using rule 3 (declarations -> declarations decl .)
    LISTA           reduce using rule 3 (declarations -> declarations decl .)
    ID              reduce using rule 3 (declarations -> declarations decl .)
    SI              reduce using rule 3 (declarations -> declarations decl .)
    ENCUANTO        reduce using rule 3 (declarations -> declarations decl .)
    PARA            reduce using rule 3 (declarations -> declarations decl .)


state 12

    (34) statements -> stat .

    ID              reduce using rule 34 (statements -> stat .)
    SI              reduce using rule 34 (statements -> stat .)
    ENCUANTO        reduce using rule 34 (statements -> stat .)
    PARA            reduce using rule 34 (statements -> stat .)
    $end            reduce using rule 34 (statements -> stat .)


state 13

    (36) stat -> atrib . ENTER

    ENTER           shift and go to state 25


state 14

    (37) stat -> conditions .

    ID              reduce using rule 37 (stat -> conditions .)
    SI              reduce using rule 37 (stat -> conditions .)
    ENCUANTO        reduce using rule 37 (stat -> conditions .)
    PARA            reduce using rule 37 (stat -> conditions .)
    $end            reduce using rule 37 (stat -> conditions .)
    CASO            reduce using rule 37 (stat -> conditions .)
    TAB             reduce using rule 37 (stat -> conditions .)


state 15

    (38) stat -> ciclos .

    ID              reduce using rule 38 (stat -> ciclos .)
    SI              reduce using rule 38 (stat -> ciclos .)
    ENCUANTO        reduce using rule 38 (stat -> ciclos .)
    PARA            reduce using rule 38 (stat -> ciclos .)
    $end            reduce using rule 38 (stat -> ciclos .)
    CASO            reduce using rule 38 (stat -> ciclos .)
    TAB             reduce using rule 38 (stat -> ciclos .)


state 16

    (39) atrib -> ID . = exp

    =               shift and go to state 26


state 17

    (51) conditions -> SI . expL ENTONCES ENTER statementsI
    (52) conditions -> SI . expL ENTONCES ENTER statementsI CASO CONTRARIO ENTER statementsI
    (53) expL -> . termoB
    (54) expL -> . expL OR termoB
    (55) termoB -> . fatorB
    (56) termoB -> . termoB AND fatorB
    (57) fatorB -> . condition
    (58) fatorB -> . BOOLEANO
    (59) fatorB -> . ( expL )
    (60) condition -> . exp op exp
    (40) exp -> . exp + termo
    (41) exp -> . exp - termo
    (42) exp -> . termo
    (43) termo -> . termo * fator
    (44) termo -> . termo / fator
    (45) termo -> . termo ^ fator
    (46) termo -> . fator
    (47) fator -> . INT
    (48) fator -> . FLOAT
    (49) fator -> . ID
    (50) fator -> . ( exp )

    BOOLEANO        shift and go to state 31
    (               shift and go to state 32
    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38

    expL                           shift and go to state 27
    termoB                         shift and go to state 28
    fatorB                         shift and go to state 29
    condition                      shift and go to state 30
    exp                            shift and go to state 33
    termo                          shift and go to state 34
    fator                          shift and go to state 35

state 18

    (67) ciclos -> ENCUANTO . expL HACER ENTER statementsI
    (53) expL -> . termoB
    (54) expL -> . expL OR termoB
    (55) termoB -> . fatorB
    (56) termoB -> . termoB AND fatorB
    (57) fatorB -> . condition
    (58) fatorB -> . BOOLEANO
    (59) fatorB -> . ( expL )
    (60) condition -> . exp op exp
    (40) exp -> . exp + termo
    (41) exp -> . exp - termo
    (42) exp -> . termo
    (43) termo -> . termo * fator
    (44) termo -> . termo / fator
    (45) termo -> . termo ^ fator
    (46) termo -> . fator
    (47) fator -> . INT
    (48) fator -> . FLOAT
    (49) fator -> . ID
    (50) fator -> . ( exp )

    BOOLEANO        shift and go to state 31
    (               shift and go to state 32
    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38

    expL                           shift and go to state 39
    termoB                         shift and go to state 28
    fatorB                         shift and go to state 29
    condition                      shift and go to state 30
    exp                            shift and go to state 33
    termo                          shift and go to state 34
    fator                          shift and go to state 35

state 19

    (68) ciclos -> PARA . expL SIGUIENTE atrib . ENTER
    (69) ciclos -> PARA . expL SIGUIENTE atrib HACER ENTER statementsI
    (53) expL -> . termoB
    (54) expL -> . expL OR termoB
    (55) termoB -> . fatorB
    (56) termoB -> . termoB AND fatorB
    (57) fatorB -> . condition
    (58) fatorB -> . BOOLEANO
    (59) fatorB -> . ( expL )
    (60) condition -> . exp op exp
    (40) exp -> . exp + termo
    (41) exp -> . exp - termo
    (42) exp -> . termo
    (43) termo -> . termo * fator
    (44) termo -> . termo / fator
    (45) termo -> . termo ^ fator
    (46) termo -> . fator
    (47) fator -> . INT
    (48) fator -> . FLOAT
    (49) fator -> . ID
    (50) fator -> . ( exp )

    BOOLEANO        shift and go to state 31
    (               shift and go to state 32
    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38

    expL                           shift and go to state 40
    termoB                         shift and go to state 28
    fatorB                         shift and go to state 29
    condition                      shift and go to state 30
    exp                            shift and go to state 33
    termo                          shift and go to state 34
    fator                          shift and go to state 35

state 20

    (7) declV -> VAR ids . : tipo ENTER
    (9) ids -> ids . , ID

    :               shift and go to state 41
    ,               shift and go to state 42


state 21

    (8) ids -> ID .

    :               reduce using rule 8 (ids -> ID .)
    ,               reduce using rule 8 (ids -> ID .)


state 22

    (24) declF -> FUNCION ID . ( parametros ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return
    (25) declF -> FUNCION ID . ( ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return

    (               shift and go to state 43


state 23

    (13) declL -> LISTA ID . = lista ENTER

    =               shift and go to state 44


state 24

    (35) statements -> statements stat .

    ID              reduce using rule 35 (statements -> statements stat .)
    SI              reduce using rule 35 (statements -> statements stat .)
    ENCUANTO        reduce using rule 35 (statements -> statements stat .)
    PARA            reduce using rule 35 (statements -> statements stat .)
    $end            reduce using rule 35 (statements -> statements stat .)


state 25

    (36) stat -> atrib ENTER .

    ID              reduce using rule 36 (stat -> atrib ENTER .)
    SI              reduce using rule 36 (stat -> atrib ENTER .)
    ENCUANTO        reduce using rule 36 (stat -> atrib ENTER .)
    PARA            reduce using rule 36 (stat -> atrib ENTER .)
    $end            reduce using rule 36 (stat -> atrib ENTER .)
    CASO            reduce using rule 36 (stat -> atrib ENTER .)
    TAB             reduce using rule 36 (stat -> atrib ENTER .)


state 26

    (39) atrib -> ID = . exp
    (40) exp -> . exp + termo
    (41) exp -> . exp - termo
    (42) exp -> . termo
    (43) termo -> . termo * fator
    (44) termo -> . termo / fator
    (45) termo -> . termo ^ fator
    (46) termo -> . fator
    (47) fator -> . INT
    (48) fator -> . FLOAT
    (49) fator -> . ID
    (50) fator -> . ( exp )

    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38
    (               shift and go to state 46

    exp                            shift and go to state 45
    termo                          shift and go to state 34
    fator                          shift and go to state 35

state 27

    (51) conditions -> SI expL . ENTONCES ENTER statementsI
    (52) conditions -> SI expL . ENTONCES ENTER statementsI CASO CONTRARIO ENTER statementsI
    (54) expL -> expL . OR termoB

    ENTONCES        shift and go to state 47
    OR              shift and go to state 48


state 28

    (53) expL -> termoB .
    (56) termoB -> termoB . AND fatorB

    ENTONCES        reduce using rule 53 (expL -> termoB .)
    OR              reduce using rule 53 (expL -> termoB .)
    HACER           reduce using rule 53 (expL -> termoB .)
    SIGUIENTE       reduce using rule 53 (expL -> termoB .)
    )               reduce using rule 53 (expL -> termoB .)
    AND             shift and go to state 49


state 29

    (55) termoB -> fatorB .

    AND             reduce using rule 55 (termoB -> fatorB .)
    ENTONCES        reduce using rule 55 (termoB -> fatorB .)
    OR              reduce using rule 55 (termoB -> fatorB .)
    HACER           reduce using rule 55 (termoB -> fatorB .)
    SIGUIENTE       reduce using rule 55 (termoB -> fatorB .)
    )               reduce using rule 55 (termoB -> fatorB .)


state 30

    (57) fatorB -> condition .

    AND             reduce using rule 57 (fatorB -> condition .)
    ENTONCES        reduce using rule 57 (fatorB -> condition .)
    OR              reduce using rule 57 (fatorB -> condition .)
    HACER           reduce using rule 57 (fatorB -> condition .)
    SIGUIENTE       reduce using rule 57 (fatorB -> condition .)
    )               reduce using rule 57 (fatorB -> condition .)


state 31

    (58) fatorB -> BOOLEANO .

    AND             reduce using rule 58 (fatorB -> BOOLEANO .)
    ENTONCES        reduce using rule 58 (fatorB -> BOOLEANO .)
    OR              reduce using rule 58 (fatorB -> BOOLEANO .)
    HACER           reduce using rule 58 (fatorB -> BOOLEANO .)
    SIGUIENTE       reduce using rule 58 (fatorB -> BOOLEANO .)
    )               reduce using rule 58 (fatorB -> BOOLEANO .)


state 32

    (59) fatorB -> ( . expL )
    (50) fator -> ( . exp )
    (53) expL -> . termoB
    (54) expL -> . expL OR termoB
    (40) exp -> . exp + termo
    (41) exp -> . exp - termo
    (42) exp -> . termo
    (55) termoB -> . fatorB
    (56) termoB -> . termoB AND fatorB
    (43) termo -> . termo * fator
    (44) termo -> . termo / fator
    (45) termo -> . termo ^ fator
    (46) termo -> . fator
    (57) fatorB -> . condition
    (58) fatorB -> . BOOLEANO
    (59) fatorB -> . ( expL )
    (47) fator -> . INT
    (48) fator -> . FLOAT
    (49) fator -> . ID
    (50) fator -> . ( exp )
    (60) condition -> . exp op exp

    BOOLEANO        shift and go to state 31
    (               shift and go to state 32
    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38

    expL                           shift and go to state 50
    exp                            shift and go to state 51
    termoB                         shift and go to state 28
    termo                          shift and go to state 34
    fatorB                         shift and go to state 29
    fator                          shift and go to state 35
    condition                      shift and go to state 30

state 33

    (60) condition -> exp . op exp
    (40) exp -> exp . + termo
    (41) exp -> exp . - termo
    (61) op -> . >
    (62) op -> . <
    (63) op -> . IGUAL
    (64) op -> . DIFERENTE
    (65) op -> . > IGUAL
    (66) op -> . < IGUAL

    +               shift and go to state 53
    -               shift and go to state 54
    >               shift and go to state 55
    <               shift and go to state 56
    IGUAL           shift and go to state 57
    DIFERENTE       shift and go to state 58

    op                             shift and go to state 52

state 34

    (42) exp -> termo .
    (43) termo -> termo . * fator
    (44) termo -> termo . / fator
    (45) termo -> termo . ^ fator

    +               reduce using rule 42 (exp -> termo .)
    -               reduce using rule 42 (exp -> termo .)
    >               reduce using rule 42 (exp -> termo .)
    <               reduce using rule 42 (exp -> termo .)
    IGUAL           reduce using rule 42 (exp -> termo .)
    DIFERENTE       reduce using rule 42 (exp -> termo .)
    ENTER           reduce using rule 42 (exp -> termo .)
    .               reduce using rule 42 (exp -> termo .)
    HACER           reduce using rule 42 (exp -> termo .)
    )               reduce using rule 42 (exp -> termo .)
    AND             reduce using rule 42 (exp -> termo .)
    ENTONCES        reduce using rule 42 (exp -> termo .)
    OR              reduce using rule 42 (exp -> termo .)
    SIGUIENTE       reduce using rule 42 (exp -> termo .)
    *               shift and go to state 59
    /               shift and go to state 60
    ^               shift and go to state 61


state 35

    (46) termo -> fator .

    *               reduce using rule 46 (termo -> fator .)
    /               reduce using rule 46 (termo -> fator .)
    ^               reduce using rule 46 (termo -> fator .)
    +               reduce using rule 46 (termo -> fator .)
    -               reduce using rule 46 (termo -> fator .)
    >               reduce using rule 46 (termo -> fator .)
    <               reduce using rule 46 (termo -> fator .)
    IGUAL           reduce using rule 46 (termo -> fator .)
    DIFERENTE       reduce using rule 46 (termo -> fator .)
    ENTER           reduce using rule 46 (termo -> fator .)
    .               reduce using rule 46 (termo -> fator .)
    HACER           reduce using rule 46 (termo -> fator .)
    )               reduce using rule 46 (termo -> fator .)
    AND             reduce using rule 46 (termo -> fator .)
    ENTONCES        reduce using rule 46 (termo -> fator .)
    OR              reduce using rule 46 (termo -> fator .)
    SIGUIENTE       reduce using rule 46 (termo -> fator .)


state 36

    (47) fator -> INT .

    *               reduce using rule 47 (fator -> INT .)
    /               reduce using rule 47 (fator -> INT .)
    ^               reduce using rule 47 (fator -> INT .)
    +               reduce using rule 47 (fator -> INT .)
    -               reduce using rule 47 (fator -> INT .)
    >               reduce using rule 47 (fator -> INT .)
    <               reduce using rule 47 (fator -> INT .)
    IGUAL           reduce using rule 47 (fator -> INT .)
    DIFERENTE       reduce using rule 47 (fator -> INT .)
    ENTER           reduce using rule 47 (fator -> INT .)
    .               reduce using rule 47 (fator -> INT .)
    HACER           reduce using rule 47 (fator -> INT .)
    )               reduce using rule 47 (fator -> INT .)
    AND             reduce using rule 47 (fator -> INT .)
    ENTONCES        reduce using rule 47 (fator -> INT .)
    OR              reduce using rule 47 (fator -> INT .)
    SIGUIENTE       reduce using rule 47 (fator -> INT .)


state 37

    (48) fator -> FLOAT .

    *               reduce using rule 48 (fator -> FLOAT .)
    /               reduce using rule 48 (fator -> FLOAT .)
    ^               reduce using rule 48 (fator -> FLOAT .)
    +               reduce using rule 48 (fator -> FLOAT .)
    -               reduce using rule 48 (fator -> FLOAT .)
    >               reduce using rule 48 (fator -> FLOAT .)
    <               reduce using rule 48 (fator -> FLOAT .)
    IGUAL           reduce using rule 48 (fator -> FLOAT .)
    DIFERENTE       reduce using rule 48 (fator -> FLOAT .)
    ENTER           reduce using rule 48 (fator -> FLOAT .)
    .               reduce using rule 48 (fator -> FLOAT .)
    HACER           reduce using rule 48 (fator -> FLOAT .)
    )               reduce using rule 48 (fator -> FLOAT .)
    AND             reduce using rule 48 (fator -> FLOAT .)
    ENTONCES        reduce using rule 48 (fator -> FLOAT .)
    OR              reduce using rule 48 (fator -> FLOAT .)
    SIGUIENTE       reduce using rule 48 (fator -> FLOAT .)


state 38

    (49) fator -> ID .

    *               reduce using rule 49 (fator -> ID .)
    /               reduce using rule 49 (fator -> ID .)
    ^               reduce using rule 49 (fator -> ID .)
    +               reduce using rule 49 (fator -> ID .)
    -               reduce using rule 49 (fator -> ID .)
    >               reduce using rule 49 (fator -> ID .)
    <               reduce using rule 49 (fator -> ID .)
    IGUAL           reduce using rule 49 (fator -> ID .)
    DIFERENTE       reduce using rule 49 (fator -> ID .)
    ENTER           reduce using rule 49 (fator -> ID .)
    .               reduce using rule 49 (fator -> ID .)
    HACER           reduce using rule 49 (fator -> ID .)
    )               reduce using rule 49 (fator -> ID .)
    AND             reduce using rule 49 (fator -> ID .)
    ENTONCES        reduce using rule 49 (fator -> ID .)
    OR              reduce using rule 49 (fator -> ID .)
    SIGUIENTE       reduce using rule 49 (fator -> ID .)


state 39

    (67) ciclos -> ENCUANTO expL . HACER ENTER statementsI
    (54) expL -> expL . OR termoB

    HACER           shift and go to state 62
    OR              shift and go to state 48


state 40

    (68) ciclos -> PARA expL . SIGUIENTE atrib . ENTER
    (69) ciclos -> PARA expL . SIGUIENTE atrib HACER ENTER statementsI
    (54) expL -> expL . OR termoB

    SIGUIENTE       shift and go to state 63
    OR              shift and go to state 48


state 41

    (7) declV -> VAR ids : . tipo ENTER
    (10) tipo -> . ENTERO
    (11) tipo -> . REAL
    (12) tipo -> . BOOLEANO

    ENTERO          shift and go to state 65
    REAL            shift and go to state 66
    BOOLEANO        shift and go to state 67

    tipo                           shift and go to state 64

state 42

    (9) ids -> ids , . ID

    ID              shift and go to state 68


state 43

    (24) declF -> FUNCION ID ( . parametros ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return
    (25) declF -> FUNCION ID ( . ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return
    (26) parametros -> . ID : tipo
    (27) parametros -> . parametros , ID : tipo

    )               shift and go to state 71
    ID              shift and go to state 69

    parametros                     shift and go to state 70

state 44

    (13) declL -> LISTA ID = . lista ENTER
    (14) lista -> . [ ]
    (15) lista -> . [ elementos ]

    [               shift and go to state 73

    lista                          shift and go to state 72

state 45

    (39) atrib -> ID = exp .
    (40) exp -> exp . + termo
    (41) exp -> exp . - termo

    ENTER           reduce using rule 39 (atrib -> ID = exp .)
    .               reduce using rule 39 (atrib -> ID = exp .)
    HACER           reduce using rule 39 (atrib -> ID = exp .)
    +               shift and go to state 53
    -               shift and go to state 54


state 46

    (50) fator -> ( . exp )
    (40) exp -> . exp + termo
    (41) exp -> . exp - termo
    (42) exp -> . termo
    (43) termo -> . termo * fator
    (44) termo -> . termo / fator
    (45) termo -> . termo ^ fator
    (46) termo -> . fator
    (47) fator -> . INT
    (48) fator -> . FLOAT
    (49) fator -> . ID
    (50) fator -> . ( exp )

    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38
    (               shift and go to state 46

    exp                            shift and go to state 74
    termo                          shift and go to state 34
    fator                          shift and go to state 35

state 47

    (51) conditions -> SI expL ENTONCES . ENTER statementsI
    (52) conditions -> SI expL ENTONCES . ENTER statementsI CASO CONTRARIO ENTER statementsI

    ENTER           shift and go to state 75


state 48

    (54) expL -> expL OR . termoB
    (55) termoB -> . fatorB
    (56) termoB -> . termoB AND fatorB
    (57) fatorB -> . condition
    (58) fatorB -> . BOOLEANO
    (59) fatorB -> . ( expL )
    (60) condition -> . exp op exp
    (40) exp -> . exp + termo
    (41) exp -> . exp - termo
    (42) exp -> . termo
    (43) termo -> . termo * fator
    (44) termo -> . termo / fator
    (45) termo -> . termo ^ fator
    (46) termo -> . fator
    (47) fator -> . INT
    (48) fator -> . FLOAT
    (49) fator -> . ID
    (50) fator -> . ( exp )

    BOOLEANO        shift and go to state 31
    (               shift and go to state 32
    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38

    termoB                         shift and go to state 76
    fatorB                         shift and go to state 29
    condition                      shift and go to state 30
    exp                            shift and go to state 33
    termo                          shift and go to state 34
    fator                          shift and go to state 35

state 49

    (56) termoB -> termoB AND . fatorB
    (57) fatorB -> . condition
    (58) fatorB -> . BOOLEANO
    (59) fatorB -> . ( expL )
    (60) condition -> . exp op exp
    (40) exp -> . exp + termo
    (41) exp -> . exp - termo
    (42) exp -> . termo
    (43) termo -> . termo * fator
    (44) termo -> . termo / fator
    (45) termo -> . termo ^ fator
    (46) termo -> . fator
    (47) fator -> . INT
    (48) fator -> . FLOAT
    (49) fator -> . ID
    (50) fator -> . ( exp )

    BOOLEANO        shift and go to state 31
    (               shift and go to state 32
    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38

    fatorB                         shift and go to state 77
    condition                      shift and go to state 30
    exp                            shift and go to state 33
    termo                          shift and go to state 34
    fator                          shift and go to state 35

state 50

    (59) fatorB -> ( expL . )
    (54) expL -> expL . OR termoB

    )               shift and go to state 78
    OR              shift and go to state 48


state 51

    (50) fator -> ( exp . )
    (40) exp -> exp . + termo
    (41) exp -> exp . - termo
    (60) condition -> exp . op exp
    (61) op -> . >
    (62) op -> . <
    (63) op -> . IGUAL
    (64) op -> . DIFERENTE
    (65) op -> . > IGUAL
    (66) op -> . < IGUAL

    )               shift and go to state 79
    +               shift and go to state 53
    -               shift and go to state 54
    >               shift and go to state 55
    <               shift and go to state 56
    IGUAL           shift and go to state 57
    DIFERENTE       shift and go to state 58

    op                             shift and go to state 52

state 52

    (60) condition -> exp op . exp
    (40) exp -> . exp + termo
    (41) exp -> . exp - termo
    (42) exp -> . termo
    (43) termo -> . termo * fator
    (44) termo -> . termo / fator
    (45) termo -> . termo ^ fator
    (46) termo -> . fator
    (47) fator -> . INT
    (48) fator -> . FLOAT
    (49) fator -> . ID
    (50) fator -> . ( exp )

    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38
    (               shift and go to state 46

    exp                            shift and go to state 80
    termo                          shift and go to state 34
    fator                          shift and go to state 35

state 53

    (40) exp -> exp + . termo
    (43) termo -> . termo * fator
    (44) termo -> . termo / fator
    (45) termo -> . termo ^ fator
    (46) termo -> . fator
    (47) fator -> . INT
    (48) fator -> . FLOAT
    (49) fator -> . ID
    (50) fator -> . ( exp )

    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38
    (               shift and go to state 46

    termo                          shift and go to state 81
    fator                          shift and go to state 35

state 54

    (41) exp -> exp - . termo
    (43) termo -> . termo * fator
    (44) termo -> . termo / fator
    (45) termo -> . termo ^ fator
    (46) termo -> . fator
    (47) fator -> . INT
    (48) fator -> . FLOAT
    (49) fator -> . ID
    (50) fator -> . ( exp )

    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38
    (               shift and go to state 46

    termo                          shift and go to state 82
    fator                          shift and go to state 35

state 55

    (61) op -> > .
    (65) op -> > . IGUAL

    INT             reduce using rule 61 (op -> > .)
    FLOAT           reduce using rule 61 (op -> > .)
    ID              reduce using rule 61 (op -> > .)
    (               reduce using rule 61 (op -> > .)
    IGUAL           shift and go to state 83


state 56

    (62) op -> < .
    (66) op -> < . IGUAL

    INT             reduce using rule 62 (op -> < .)
    FLOAT           reduce using rule 62 (op -> < .)
    ID              reduce using rule 62 (op -> < .)
    (               reduce using rule 62 (op -> < .)
    IGUAL           shift and go to state 84


state 57

    (63) op -> IGUAL .

    INT             reduce using rule 63 (op -> IGUAL .)
    FLOAT           reduce using rule 63 (op -> IGUAL .)
    ID              reduce using rule 63 (op -> IGUAL .)
    (               reduce using rule 63 (op -> IGUAL .)


state 58

    (64) op -> DIFERENTE .

    INT             reduce using rule 64 (op -> DIFERENTE .)
    FLOAT           reduce using rule 64 (op -> DIFERENTE .)
    ID              reduce using rule 64 (op -> DIFERENTE .)
    (               reduce using rule 64 (op -> DIFERENTE .)


state 59

    (43) termo -> termo * . fator
    (47) fator -> . INT
    (48) fator -> . FLOAT
    (49) fator -> . ID
    (50) fator -> . ( exp )

    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38
    (               shift and go to state 46

    fator                          shift and go to state 85

state 60

    (44) termo -> termo / . fator
    (47) fator -> . INT
    (48) fator -> . FLOAT
    (49) fator -> . ID
    (50) fator -> . ( exp )

    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38
    (               shift and go to state 46

    fator                          shift and go to state 86

state 61

    (45) termo -> termo ^ . fator
    (47) fator -> . INT
    (48) fator -> . FLOAT
    (49) fator -> . ID
    (50) fator -> . ( exp )

    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38
    (               shift and go to state 46

    fator                          shift and go to state 87

state 62

    (67) ciclos -> ENCUANTO expL HACER . ENTER statementsI

    ENTER           shift and go to state 88


state 63

    (68) ciclos -> PARA expL SIGUIENTE . atrib . ENTER
    (69) ciclos -> PARA expL SIGUIENTE . atrib HACER ENTER statementsI
    (39) atrib -> . ID = exp

    ID              shift and go to state 16

    atrib                          shift and go to state 89

state 64

    (7) declV -> VAR ids : tipo . ENTER

    ENTER           shift and go to state 90


state 65

    (10) tipo -> ENTERO .

    ENTER           reduce using rule 10 (tipo -> ENTERO .)
    )               reduce using rule 10 (tipo -> ENTERO .)
    ,               reduce using rule 10 (tipo -> ENTERO .)


state 66

    (11) tipo -> REAL .

    ENTER           reduce using rule 11 (tipo -> REAL .)
    )               reduce using rule 11 (tipo -> REAL .)
    ,               reduce using rule 11 (tipo -> REAL .)


state 67

    (12) tipo -> BOOLEANO .

    ENTER           reduce using rule 12 (tipo -> BOOLEANO .)
    )               reduce using rule 12 (tipo -> BOOLEANO .)
    ,               reduce using rule 12 (tipo -> BOOLEANO .)


state 68

    (9) ids -> ids , ID .

    :               reduce using rule 9 (ids -> ids , ID .)
    ,               reduce using rule 9 (ids -> ids , ID .)


state 69

    (26) parametros -> ID . : tipo

    :               shift and go to state 91


state 70

    (24) declF -> FUNCION ID ( parametros . ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return
    (27) parametros -> parametros . , ID : tipo

    )               shift and go to state 92
    ,               shift and go to state 93


state 71

    (25) declF -> FUNCION ID ( ) . : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return

    :               shift and go to state 94


state 72

    (13) declL -> LISTA ID = lista . ENTER

    ENTER           shift and go to state 95


state 73

    (14) lista -> [ . ]
    (15) lista -> [ . elementos ]
    (16) elementos -> . elemento
    (17) elementos -> . elementos , elemento
    (18) elemento -> . INT
    (19) elemento -> . FLOAT
    (20) elemento -> . BOOLEANO
    (21) elemento -> . STRING
    (22) elemento -> . ID
    (23) elemento -> . lista
    (14) lista -> . [ ]
    (15) lista -> . [ elementos ]

    ]               shift and go to state 96
    INT             shift and go to state 99
    FLOAT           shift and go to state 100
    BOOLEANO        shift and go to state 101
    STRING          shift and go to state 102
    ID              shift and go to state 103
    [               shift and go to state 73

    elementos                      shift and go to state 97
    elemento                       shift and go to state 98
    lista                          shift and go to state 104

state 74

    (50) fator -> ( exp . )
    (40) exp -> exp . + termo
    (41) exp -> exp . - termo

    )               shift and go to state 79
    +               shift and go to state 53
    -               shift and go to state 54


state 75

    (51) conditions -> SI expL ENTONCES ENTER . statementsI
    (52) conditions -> SI expL ENTONCES ENTER . statementsI CASO CONTRARIO ENTER statementsI
    (32) statementsI -> . TAB stat
    (33) statementsI -> . statementsI TAB stat

    TAB             shift and go to state 106

    statementsI                    shift and go to state 105

state 76

    (54) expL -> expL OR termoB .
    (56) termoB -> termoB . AND fatorB

    ENTONCES        reduce using rule 54 (expL -> expL OR termoB .)
    OR              reduce using rule 54 (expL -> expL OR termoB .)
    HACER           reduce using rule 54 (expL -> expL OR termoB .)
    SIGUIENTE       reduce using rule 54 (expL -> expL OR termoB .)
    )               reduce using rule 54 (expL -> expL OR termoB .)
    AND             shift and go to state 49


state 77

    (56) termoB -> termoB AND fatorB .

    AND             reduce using rule 56 (termoB -> termoB AND fatorB .)
    ENTONCES        reduce using rule 56 (termoB -> termoB AND fatorB .)
    OR              reduce using rule 56 (termoB -> termoB AND fatorB .)
    HACER           reduce using rule 56 (termoB -> termoB AND fatorB .)
    SIGUIENTE       reduce using rule 56 (termoB -> termoB AND fatorB .)
    )               reduce using rule 56 (termoB -> termoB AND fatorB .)


state 78

    (59) fatorB -> ( expL ) .

    AND             reduce using rule 59 (fatorB -> ( expL ) .)
    ENTONCES        reduce using rule 59 (fatorB -> ( expL ) .)
    OR              reduce using rule 59 (fatorB -> ( expL ) .)
    HACER           reduce using rule 59 (fatorB -> ( expL ) .)
    SIGUIENTE       reduce using rule 59 (fatorB -> ( expL ) .)
    )               reduce using rule 59 (fatorB -> ( expL ) .)


state 79

    (50) fator -> ( exp ) .

    *               reduce using rule 50 (fator -> ( exp ) .)
    /               reduce using rule 50 (fator -> ( exp ) .)
    ^               reduce using rule 50 (fator -> ( exp ) .)
    +               reduce using rule 50 (fator -> ( exp ) .)
    -               reduce using rule 50 (fator -> ( exp ) .)
    >               reduce using rule 50 (fator -> ( exp ) .)
    <               reduce using rule 50 (fator -> ( exp ) .)
    IGUAL           reduce using rule 50 (fator -> ( exp ) .)
    DIFERENTE       reduce using rule 50 (fator -> ( exp ) .)
    ENTER           reduce using rule 50 (fator -> ( exp ) .)
    .               reduce using rule 50 (fator -> ( exp ) .)
    HACER           reduce using rule 50 (fator -> ( exp ) .)
    )               reduce using rule 50 (fator -> ( exp ) .)
    AND             reduce using rule 50 (fator -> ( exp ) .)
    ENTONCES        reduce using rule 50 (fator -> ( exp ) .)
    OR              reduce using rule 50 (fator -> ( exp ) .)
    SIGUIENTE       reduce using rule 50 (fator -> ( exp ) .)


state 80

    (60) condition -> exp op exp .
    (40) exp -> exp . + termo
    (41) exp -> exp . - termo

    AND             reduce using rule 60 (condition -> exp op exp .)
    ENTONCES        reduce using rule 60 (condition -> exp op exp .)
    OR              reduce using rule 60 (condition -> exp op exp .)
    HACER           reduce using rule 60 (condition -> exp op exp .)
    SIGUIENTE       reduce using rule 60 (condition -> exp op exp .)
    )               reduce using rule 60 (condition -> exp op exp .)
    +               shift and go to state 53
    -               shift and go to state 54


state 81

    (40) exp -> exp + termo .
    (43) termo -> termo . * fator
    (44) termo -> termo . / fator
    (45) termo -> termo . ^ fator

    +               reduce using rule 40 (exp -> exp + termo .)
    -               reduce using rule 40 (exp -> exp + termo .)
    >               reduce using rule 40 (exp -> exp + termo .)
    <               reduce using rule 40 (exp -> exp + termo .)
    IGUAL           reduce using rule 40 (exp -> exp + termo .)
    DIFERENTE       reduce using rule 40 (exp -> exp + termo .)
    ENTER           reduce using rule 40 (exp -> exp + termo .)
    .               reduce using rule 40 (exp -> exp + termo .)
    HACER           reduce using rule 40 (exp -> exp + termo .)
    )               reduce using rule 40 (exp -> exp + termo .)
    AND             reduce using rule 40 (exp -> exp + termo .)
    ENTONCES        reduce using rule 40 (exp -> exp + termo .)
    OR              reduce using rule 40 (exp -> exp + termo .)
    SIGUIENTE       reduce using rule 40 (exp -> exp + termo .)
    *               shift and go to state 59
    /               shift and go to state 60
    ^               shift and go to state 61


state 82

    (41) exp -> exp - termo .
    (43) termo -> termo . * fator
    (44) termo -> termo . / fator
    (45) termo -> termo . ^ fator

    +               reduce using rule 41 (exp -> exp - termo .)
    -               reduce using rule 41 (exp -> exp - termo .)
    >               reduce using rule 41 (exp -> exp - termo .)
    <               reduce using rule 41 (exp -> exp - termo .)
    IGUAL           reduce using rule 41 (exp -> exp - termo .)
    DIFERENTE       reduce using rule 41 (exp -> exp - termo .)
    ENTER           reduce using rule 41 (exp -> exp - termo .)
    .               reduce using rule 41 (exp -> exp - termo .)
    HACER           reduce using rule 41 (exp -> exp - termo .)
    )               reduce using rule 41 (exp -> exp - termo .)
    AND             reduce using rule 41 (exp -> exp - termo .)
    ENTONCES        reduce using rule 41 (exp -> exp - termo .)
    OR              reduce using rule 41 (exp -> exp - termo .)
    SIGUIENTE       reduce using rule 41 (exp -> exp - termo .)
    *               shift and go to state 59
    /               shift and go to state 60
    ^               shift and go to state 61


state 83

    (65) op -> > IGUAL .

    INT             reduce using rule 65 (op -> > IGUAL .)
    FLOAT           reduce using rule 65 (op -> > IGUAL .)
    ID              reduce using rule 65 (op -> > IGUAL .)
    (               reduce using rule 65 (op -> > IGUAL .)


state 84

    (66) op -> < IGUAL .

    INT             reduce using rule 66 (op -> < IGUAL .)
    FLOAT           reduce using rule 66 (op -> < IGUAL .)
    ID              reduce using rule 66 (op -> < IGUAL .)
    (               reduce using rule 66 (op -> < IGUAL .)


state 85

    (43) termo -> termo * fator .

    *               reduce using rule 43 (termo -> termo * fator .)
    /               reduce using rule 43 (termo -> termo * fator .)
    ^               reduce using rule 43 (termo -> termo * fator .)
    +               reduce using rule 43 (termo -> termo * fator .)
    -               reduce using rule 43 (termo -> termo * fator .)
    >               reduce using rule 43 (termo -> termo * fator .)
    <               reduce using rule 43 (termo -> termo * fator .)
    IGUAL           reduce using rule 43 (termo -> termo * fator .)
    DIFERENTE       reduce using rule 43 (termo -> termo * fator .)
    ENTER           reduce using rule 43 (termo -> termo * fator .)
    .               reduce using rule 43 (termo -> termo * fator .)
    HACER           reduce using rule 43 (termo -> termo * fator .)
    )               reduce using rule 43 (termo -> termo * fator .)
    AND             reduce using rule 43 (termo -> termo * fator .)
    ENTONCES        reduce using rule 43 (termo -> termo * fator .)
    OR              reduce using rule 43 (termo -> termo * fator .)
    SIGUIENTE       reduce using rule 43 (termo -> termo * fator .)


state 86

    (44) termo -> termo / fator .

    *               reduce using rule 44 (termo -> termo / fator .)
    /               reduce using rule 44 (termo -> termo / fator .)
    ^               reduce using rule 44 (termo -> termo / fator .)
    +               reduce using rule 44 (termo -> termo / fator .)
    -               reduce using rule 44 (termo -> termo / fator .)
    >               reduce using rule 44 (termo -> termo / fator .)
    <               reduce using rule 44 (termo -> termo / fator .)
    IGUAL           reduce using rule 44 (termo -> termo / fator .)
    DIFERENTE       reduce using rule 44 (termo -> termo / fator .)
    ENTER           reduce using rule 44 (termo -> termo / fator .)
    .               reduce using rule 44 (termo -> termo / fator .)
    HACER           reduce using rule 44 (termo -> termo / fator .)
    )               reduce using rule 44 (termo -> termo / fator .)
    AND             reduce using rule 44 (termo -> termo / fator .)
    ENTONCES        reduce using rule 44 (termo -> termo / fator .)
    OR              reduce using rule 44 (termo -> termo / fator .)
    SIGUIENTE       reduce using rule 44 (termo -> termo / fator .)


state 87

    (45) termo -> termo ^ fator .

    *               reduce using rule 45 (termo -> termo ^ fator .)
    /               reduce using rule 45 (termo -> termo ^ fator .)
    ^               reduce using rule 45 (termo -> termo ^ fator .)
    +               reduce using rule 45 (termo -> termo ^ fator .)
    -               reduce using rule 45 (termo -> termo ^ fator .)
    >               reduce using rule 45 (termo -> termo ^ fator .)
    <               reduce using rule 45 (termo -> termo ^ fator .)
    IGUAL           reduce using rule 45 (termo -> termo ^ fator .)
    DIFERENTE       reduce using rule 45 (termo -> termo ^ fator .)
    ENTER           reduce using rule 45 (termo -> termo ^ fator .)
    .               reduce using rule 45 (termo -> termo ^ fator .)
    HACER           reduce using rule 45 (termo -> termo ^ fator .)
    )               reduce using rule 45 (termo -> termo ^ fator .)
    AND             reduce using rule 45 (termo -> termo ^ fator .)
    ENTONCES        reduce using rule 45 (termo -> termo ^ fator .)
    OR              reduce using rule 45 (termo -> termo ^ fator .)
    SIGUIENTE       reduce using rule 45 (termo -> termo ^ fator .)


state 88

    (67) ciclos -> ENCUANTO expL HACER ENTER . statementsI
    (32) statementsI -> . TAB stat
    (33) statementsI -> . statementsI TAB stat

    TAB             shift and go to state 106

    statementsI                    shift and go to state 107

state 89

    (68) ciclos -> PARA expL SIGUIENTE atrib . . ENTER
    (69) ciclos -> PARA expL SIGUIENTE atrib . HACER ENTER statementsI

    .               shift and go to state 108
    HACER           shift and go to state 109


state 90

    (7) declV -> VAR ids : tipo ENTER .

    VAR             reduce using rule 7 (declV -> VAR ids : tipo ENTER .)
    FUNCION         reduce using rule 7 (declV -> VAR ids : tipo ENTER .)
    LISTA           reduce using rule 7 (declV -> VAR ids : tipo ENTER .)
    ID              reduce using rule 7 (declV -> VAR ids : tipo ENTER .)
    SI              reduce using rule 7 (declV -> VAR ids : tipo ENTER .)
    ENCUANTO        reduce using rule 7 (declV -> VAR ids : tipo ENTER .)
    PARA            reduce using rule 7 (declV -> VAR ids : tipo ENTER .)
    TAB             reduce using rule 7 (declV -> VAR ids : tipo ENTER .)


state 91

    (26) parametros -> ID : . tipo
    (10) tipo -> . ENTERO
    (11) tipo -> . REAL
    (12) tipo -> . BOOLEANO

    ENTERO          shift and go to state 65
    REAL            shift and go to state 66
    BOOLEANO        shift and go to state 67

    tipo                           shift and go to state 110

state 92

    (24) declF -> FUNCION ID ( parametros ) . : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return

    :               shift and go to state 111


state 93

    (27) parametros -> parametros , . ID : tipo

    ID              shift and go to state 112


state 94

    (25) declF -> FUNCION ID ( ) : . ENTERO ENTER declarationsF statementsI TAB DEVUELVE return

    ENTERO          shift and go to state 113


state 95

    (13) declL -> LISTA ID = lista ENTER .

    VAR             reduce using rule 13 (declL -> LISTA ID = lista ENTER .)
    FUNCION         reduce using rule 13 (declL -> LISTA ID = lista ENTER .)
    LISTA           reduce using rule 13 (declL -> LISTA ID = lista ENTER .)
    ID              reduce using rule 13 (declL -> LISTA ID = lista ENTER .)
    SI              reduce using rule 13 (declL -> LISTA ID = lista ENTER .)
    ENCUANTO        reduce using rule 13 (declL -> LISTA ID = lista ENTER .)
    PARA            reduce using rule 13 (declL -> LISTA ID = lista ENTER .)
    TAB             reduce using rule 13 (declL -> LISTA ID = lista ENTER .)


state 96

    (14) lista -> [ ] .

    ENTER           reduce using rule 14 (lista -> [ ] .)
    ]               reduce using rule 14 (lista -> [ ] .)
    ,               reduce using rule 14 (lista -> [ ] .)


state 97

    (15) lista -> [ elementos . ]
    (17) elementos -> elementos . , elemento

    ]               shift and go to state 114
    ,               shift and go to state 115


state 98

    (16) elementos -> elemento .

    ]               reduce using rule 16 (elementos -> elemento .)
    ,               reduce using rule 16 (elementos -> elemento .)


state 99

    (18) elemento -> INT .

    ]               reduce using rule 18 (elemento -> INT .)
    ,               reduce using rule 18 (elemento -> INT .)


state 100

    (19) elemento -> FLOAT .

    ]               reduce using rule 19 (elemento -> FLOAT .)
    ,               reduce using rule 19 (elemento -> FLOAT .)


state 101

    (20) elemento -> BOOLEANO .

    ]               reduce using rule 20 (elemento -> BOOLEANO .)
    ,               reduce using rule 20 (elemento -> BOOLEANO .)


state 102

    (21) elemento -> STRING .

    ]               reduce using rule 21 (elemento -> STRING .)
    ,               reduce using rule 21 (elemento -> STRING .)


state 103

    (22) elemento -> ID .

    ]               reduce using rule 22 (elemento -> ID .)
    ,               reduce using rule 22 (elemento -> ID .)


state 104

    (23) elemento -> lista .

    ]               reduce using rule 23 (elemento -> lista .)
    ,               reduce using rule 23 (elemento -> lista .)


state 105

    (51) conditions -> SI expL ENTONCES ENTER statementsI .
    (52) conditions -> SI expL ENTONCES ENTER statementsI . CASO CONTRARIO ENTER statementsI
    (33) statementsI -> statementsI . TAB stat

  ! shift/reduce conflict for CASO resolved as shift
  ! shift/reduce conflict for TAB resolved as shift
    ID              reduce using rule 51 (conditions -> SI expL ENTONCES ENTER statementsI .)
    SI              reduce using rule 51 (conditions -> SI expL ENTONCES ENTER statementsI .)
    ENCUANTO        reduce using rule 51 (conditions -> SI expL ENTONCES ENTER statementsI .)
    PARA            reduce using rule 51 (conditions -> SI expL ENTONCES ENTER statementsI .)
    $end            reduce using rule 51 (conditions -> SI expL ENTONCES ENTER statementsI .)
    CASO            shift and go to state 116
    TAB             shift and go to state 117

  ! CASO            [ reduce using rule 51 (conditions -> SI expL ENTONCES ENTER statementsI .) ]
  ! TAB             [ reduce using rule 51 (conditions -> SI expL ENTONCES ENTER statementsI .) ]


state 106

    (32) statementsI -> TAB . stat
    (36) stat -> . atrib ENTER
    (37) stat -> . conditions
    (38) stat -> . ciclos
    (39) atrib -> . ID = exp
    (51) conditions -> . SI expL ENTONCES ENTER statementsI
    (52) conditions -> . SI expL ENTONCES ENTER statementsI CASO CONTRARIO ENTER statementsI
    (67) ciclos -> . ENCUANTO expL HACER ENTER statementsI
    (68) ciclos -> . PARA expL SIGUIENTE atrib . ENTER
    (69) ciclos -> . PARA expL SIGUIENTE atrib HACER ENTER statementsI

    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    stat                           shift and go to state 118
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 107

    (67) ciclos -> ENCUANTO expL HACER ENTER statementsI .
    (33) statementsI -> statementsI . TAB stat

  ! shift/reduce conflict for TAB resolved as shift
    ID              reduce using rule 67 (ciclos -> ENCUANTO expL HACER ENTER statementsI .)
    SI              reduce using rule 67 (ciclos -> ENCUANTO expL HACER ENTER statementsI .)
    ENCUANTO        reduce using rule 67 (ciclos -> ENCUANTO expL HACER ENTER statementsI .)
    PARA            reduce using rule 67 (ciclos -> ENCUANTO expL HACER ENTER statementsI .)
    $end            reduce using rule 67 (ciclos -> ENCUANTO expL HACER ENTER statementsI .)
    CASO            reduce using rule 67 (ciclos -> ENCUANTO expL HACER ENTER statementsI .)
    TAB             shift and go to state 117

  ! TAB             [ reduce using rule 67 (ciclos -> ENCUANTO expL HACER ENTER statementsI .) ]


state 108

    (68) ciclos -> PARA expL SIGUIENTE atrib . . ENTER

    ENTER           shift and go to state 119


state 109

    (69) ciclos -> PARA expL SIGUIENTE atrib HACER . ENTER statementsI

    ENTER           shift and go to state 120


state 110

    (26) parametros -> ID : tipo .

    )               reduce using rule 26 (parametros -> ID : tipo .)
    ,               reduce using rule 26 (parametros -> ID : tipo .)


state 111

    (24) declF -> FUNCION ID ( parametros ) : . ENTERO ENTER declarationsF statementsI TAB DEVUELVE return

    ENTERO          shift and go to state 121


state 112

    (27) parametros -> parametros , ID . : tipo

    :               shift and go to state 122


state 113

    (25) declF -> FUNCION ID ( ) : ENTERO . ENTER declarationsF statementsI TAB DEVUELVE return

    ENTER           shift and go to state 123


state 114

    (15) lista -> [ elementos ] .

    ENTER           reduce using rule 15 (lista -> [ elementos ] .)
    ]               reduce using rule 15 (lista -> [ elementos ] .)
    ,               reduce using rule 15 (lista -> [ elementos ] .)


state 115

    (17) elementos -> elementos , . elemento
    (18) elemento -> . INT
    (19) elemento -> . FLOAT
    (20) elemento -> . BOOLEANO
    (21) elemento -> . STRING
    (22) elemento -> . ID
    (23) elemento -> . lista
    (14) lista -> . [ ]
    (15) lista -> . [ elementos ]

    INT             shift and go to state 99
    FLOAT           shift and go to state 100
    BOOLEANO        shift and go to state 101
    STRING          shift and go to state 102
    ID              shift and go to state 103
    [               shift and go to state 73

    elemento                       shift and go to state 124
    lista                          shift and go to state 104

state 116

    (52) conditions -> SI expL ENTONCES ENTER statementsI CASO . CONTRARIO ENTER statementsI

    CONTRARIO       shift and go to state 125


state 117

    (33) statementsI -> statementsI TAB . stat
    (36) stat -> . atrib ENTER
    (37) stat -> . conditions
    (38) stat -> . ciclos
    (39) atrib -> . ID = exp
    (51) conditions -> . SI expL ENTONCES ENTER statementsI
    (52) conditions -> . SI expL ENTONCES ENTER statementsI CASO CONTRARIO ENTER statementsI
    (67) ciclos -> . ENCUANTO expL HACER ENTER statementsI
    (68) ciclos -> . PARA expL SIGUIENTE atrib . ENTER
    (69) ciclos -> . PARA expL SIGUIENTE atrib HACER ENTER statementsI

    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    stat                           shift and go to state 126
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 118

    (32) statementsI -> TAB stat .

    CASO            reduce using rule 32 (statementsI -> TAB stat .)
    TAB             reduce using rule 32 (statementsI -> TAB stat .)
    ID              reduce using rule 32 (statementsI -> TAB stat .)
    SI              reduce using rule 32 (statementsI -> TAB stat .)
    ENCUANTO        reduce using rule 32 (statementsI -> TAB stat .)
    PARA            reduce using rule 32 (statementsI -> TAB stat .)
    $end            reduce using rule 32 (statementsI -> TAB stat .)


state 119

    (68) ciclos -> PARA expL SIGUIENTE atrib . ENTER .

    ID              reduce using rule 68 (ciclos -> PARA expL SIGUIENTE atrib . ENTER .)
    SI              reduce using rule 68 (ciclos -> PARA expL SIGUIENTE atrib . ENTER .)
    ENCUANTO        reduce using rule 68 (ciclos -> PARA expL SIGUIENTE atrib . ENTER .)
    PARA            reduce using rule 68 (ciclos -> PARA expL SIGUIENTE atrib . ENTER .)
    $end            reduce using rule 68 (ciclos -> PARA expL SIGUIENTE atrib . ENTER .)
    CASO            reduce using rule 68 (ciclos -> PARA expL SIGUIENTE atrib . ENTER .)
    TAB             reduce using rule 68 (ciclos -> PARA expL SIGUIENTE atrib . ENTER .)


state 120

    (69) ciclos -> PARA expL SIGUIENTE atrib HACER ENTER . statementsI
    (32) statementsI -> . TAB stat
    (33) statementsI -> . statementsI TAB stat

    TAB             shift and go to state 106

    statementsI                    shift and go to state 127

state 121

    (24) declF -> FUNCION ID ( parametros ) : ENTERO . ENTER declarationsF statementsI TAB DEVUELVE return

    ENTER           shift and go to state 128


state 122

    (27) parametros -> parametros , ID : . tipo
    (10) tipo -> . ENTERO
    (11) tipo -> . REAL
    (12) tipo -> . BOOLEANO

    ENTERO          shift and go to state 65
    REAL            shift and go to state 66
    BOOLEANO        shift and go to state 67

    tipo                           shift and go to state 129

state 123

    (25) declF -> FUNCION ID ( ) : ENTERO ENTER . declarationsF statementsI TAB DEVUELVE return
    (28) declarationsF -> . TAB decl
    (29) declarationsF -> . declarationsF TAB decl

    TAB             shift and go to state 131

    declarationsF                  shift and go to state 130

state 124

    (17) elementos -> elementos , elemento .

    ]               reduce using rule 17 (elementos -> elementos , elemento .)
    ,               reduce using rule 17 (elementos -> elementos , elemento .)


state 125

    (52) conditions -> SI expL ENTONCES ENTER statementsI CASO CONTRARIO . ENTER statementsI

    ENTER           shift and go to state 132


state 126

    (33) statementsI -> statementsI TAB stat .

    CASO            reduce using rule 33 (statementsI -> statementsI TAB stat .)
    TAB             reduce using rule 33 (statementsI -> statementsI TAB stat .)
    ID              reduce using rule 33 (statementsI -> statementsI TAB stat .)
    SI              reduce using rule 33 (statementsI -> statementsI TAB stat .)
    ENCUANTO        reduce using rule 33 (statementsI -> statementsI TAB stat .)
    PARA            reduce using rule 33 (statementsI -> statementsI TAB stat .)
    $end            reduce using rule 33 (statementsI -> statementsI TAB stat .)


state 127

    (69) ciclos -> PARA expL SIGUIENTE atrib HACER ENTER statementsI .
    (33) statementsI -> statementsI . TAB stat

  ! shift/reduce conflict for TAB resolved as shift
    ID              reduce using rule 69 (ciclos -> PARA expL SIGUIENTE atrib HACER ENTER statementsI .)
    SI              reduce using rule 69 (ciclos -> PARA expL SIGUIENTE atrib HACER ENTER statementsI .)
    ENCUANTO        reduce using rule 69 (ciclos -> PARA expL SIGUIENTE atrib HACER ENTER statementsI .)
    PARA            reduce using rule 69 (ciclos -> PARA expL SIGUIENTE atrib HACER ENTER statementsI .)
    $end            reduce using rule 69 (ciclos -> PARA expL SIGUIENTE atrib HACER ENTER statementsI .)
    CASO            reduce using rule 69 (ciclos -> PARA expL SIGUIENTE atrib HACER ENTER statementsI .)
    TAB             shift and go to state 117

  ! TAB             [ reduce using rule 69 (ciclos -> PARA expL SIGUIENTE atrib HACER ENTER statementsI .) ]


state 128

    (24) declF -> FUNCION ID ( parametros ) : ENTERO ENTER . declarationsF statementsI TAB DEVUELVE return
    (28) declarationsF -> . TAB decl
    (29) declarationsF -> . declarationsF TAB decl

    TAB             shift and go to state 131

    declarationsF                  shift and go to state 133

state 129

    (27) parametros -> parametros , ID : tipo .

    )               reduce using rule 27 (parametros -> parametros , ID : tipo .)
    ,               reduce using rule 27 (parametros -> parametros , ID : tipo .)


state 130

    (25) declF -> FUNCION ID ( ) : ENTERO ENTER declarationsF . statementsI TAB DEVUELVE return
    (29) declarationsF -> declarationsF . TAB decl
    (32) statementsI -> . TAB stat
    (33) statementsI -> . statementsI TAB stat

    TAB             shift and go to state 135

    statementsI                    shift and go to state 134

state 131

    (28) declarationsF -> TAB . decl
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (7) declV -> . VAR ids : tipo ENTER
    (24) declF -> . FUNCION ID ( parametros ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return
    (25) declF -> . FUNCION ID ( ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return
    (13) declL -> . LISTA ID = lista ENTER

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9

    decl                           shift and go to state 136
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6

state 132

    (52) conditions -> SI expL ENTONCES ENTER statementsI CASO CONTRARIO ENTER . statementsI
    (32) statementsI -> . TAB stat
    (33) statementsI -> . statementsI TAB stat

    TAB             shift and go to state 106

    statementsI                    shift and go to state 137

state 133

    (24) declF -> FUNCION ID ( parametros ) : ENTERO ENTER declarationsF . statementsI TAB DEVUELVE return
    (29) declarationsF -> declarationsF . TAB decl
    (32) statementsI -> . TAB stat
    (33) statementsI -> . statementsI TAB stat

    TAB             shift and go to state 135

    statementsI                    shift and go to state 138

state 134

    (25) declF -> FUNCION ID ( ) : ENTERO ENTER declarationsF statementsI . TAB DEVUELVE return
    (33) statementsI -> statementsI . TAB stat

    TAB             shift and go to state 139


state 135

    (29) declarationsF -> declarationsF TAB . decl
    (32) statementsI -> TAB . stat
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (36) stat -> . atrib ENTER
    (37) stat -> . conditions
    (38) stat -> . ciclos
    (7) declV -> . VAR ids : tipo ENTER
    (24) declF -> . FUNCION ID ( parametros ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return
    (25) declF -> . FUNCION ID ( ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return
    (13) declL -> . LISTA ID = lista ENTER
    (39) atrib -> . ID = exp
    (51) conditions -> . SI expL ENTONCES ENTER statementsI
    (52) conditions -> . SI expL ENTONCES ENTER statementsI CASO CONTRARIO ENTER statementsI
    (67) ciclos -> . ENCUANTO expL HACER ENTER statementsI
    (68) ciclos -> . PARA expL SIGUIENTE atrib . ENTER
    (69) ciclos -> . PARA expL SIGUIENTE atrib HACER ENTER statementsI

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9
    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    decl                           shift and go to state 140
    stat                           shift and go to state 118
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 136

    (28) declarationsF -> TAB decl .

    TAB             reduce using rule 28 (declarationsF -> TAB decl .)


state 137

    (52) conditions -> SI expL ENTONCES ENTER statementsI CASO CONTRARIO ENTER statementsI .
    (33) statementsI -> statementsI . TAB stat

  ! shift/reduce conflict for TAB resolved as shift
    ID              reduce using rule 52 (conditions -> SI expL ENTONCES ENTER statementsI CASO CONTRARIO ENTER statementsI .)
    SI              reduce using rule 52 (conditions -> SI expL ENTONCES ENTER statementsI CASO CONTRARIO ENTER statementsI .)
    ENCUANTO        reduce using rule 52 (conditions -> SI expL ENTONCES ENTER statementsI CASO CONTRARIO ENTER statementsI .)
    PARA            reduce using rule 52 (conditions -> SI expL ENTONCES ENTER statementsI CASO CONTRARIO ENTER statementsI .)
    $end            reduce using rule 52 (conditions -> SI expL ENTONCES ENTER statementsI CASO CONTRARIO ENTER statementsI .)
    CASO            reduce using rule 52 (conditions -> SI expL ENTONCES ENTER statementsI CASO CONTRARIO ENTER statementsI .)
    TAB             shift and go to state 117

  ! TAB             [ reduce using rule 52 (conditions -> SI expL ENTONCES ENTER statementsI CASO CONTRARIO ENTER statementsI .) ]


state 138

    (24) declF -> FUNCION ID ( parametros ) : ENTERO ENTER declarationsF statementsI . TAB DEVUELVE return
    (33) statementsI -> statementsI . TAB stat

    TAB             shift and go to state 141


state 139

    (25) declF -> FUNCION ID ( ) : ENTERO ENTER declarationsF statementsI TAB . DEVUELVE return
    (33) statementsI -> statementsI TAB . stat
    (36) stat -> . atrib ENTER
    (37) stat -> . conditions
    (38) stat -> . ciclos
    (39) atrib -> . ID = exp
    (51) conditions -> . SI expL ENTONCES ENTER statementsI
    (52) conditions -> . SI expL ENTONCES ENTER statementsI CASO CONTRARIO ENTER statementsI
    (67) ciclos -> . ENCUANTO expL HACER ENTER statementsI
    (68) ciclos -> . PARA expL SIGUIENTE atrib . ENTER
    (69) ciclos -> . PARA expL SIGUIENTE atrib HACER ENTER statementsI

    DEVUELVE        shift and go to state 142
    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    stat                           shift and go to state 126
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 140

    (29) declarationsF -> declarationsF TAB decl .

    TAB             reduce using rule 29 (declarationsF -> declarationsF TAB decl .)


state 141

    (24) declF -> FUNCION ID ( parametros ) : ENTERO ENTER declarationsF statementsI TAB . DEVUELVE return
    (33) statementsI -> statementsI TAB . stat
    (36) stat -> . atrib ENTER
    (37) stat -> . conditions
    (38) stat -> . ciclos
    (39) atrib -> . ID = exp
    (51) conditions -> . SI expL ENTONCES ENTER statementsI
    (52) conditions -> . SI expL ENTONCES ENTER statementsI CASO CONTRARIO ENTER statementsI
    (67) ciclos -> . ENCUANTO expL HACER ENTER statementsI
    (68) ciclos -> . PARA expL SIGUIENTE atrib . ENTER
    (69) ciclos -> . PARA expL SIGUIENTE atrib HACER ENTER statementsI

    DEVUELVE        shift and go to state 143
    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    stat                           shift and go to state 126
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 142

    (25) declF -> FUNCION ID ( ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE . return
    (30) return -> . INT ENTER
    (31) return -> . ID ENTER

    INT             shift and go to state 146
    ID              shift and go to state 144

    return                         shift and go to state 145

state 143

    (24) declF -> FUNCION ID ( parametros ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE . return
    (30) return -> . INT ENTER
    (31) return -> . ID ENTER

    INT             shift and go to state 146
    ID              shift and go to state 144

    return                         shift and go to state 147

state 144

    (31) return -> ID . ENTER

    ENTER           shift and go to state 148


state 145

    (25) declF -> FUNCION ID ( ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return .

    VAR             reduce using rule 25 (declF -> FUNCION ID ( ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return .)
    FUNCION         reduce using rule 25 (declF -> FUNCION ID ( ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return .)
    LISTA           reduce using rule 25 (declF -> FUNCION ID ( ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return .)
    ID              reduce using rule 25 (declF -> FUNCION ID ( ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return .)
    SI              reduce using rule 25 (declF -> FUNCION ID ( ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return .)
    ENCUANTO        reduce using rule 25 (declF -> FUNCION ID ( ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return .)
    PARA            reduce using rule 25 (declF -> FUNCION ID ( ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return .)
    TAB             reduce using rule 25 (declF -> FUNCION ID ( ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return .)


state 146

    (30) return -> INT . ENTER

    ENTER           shift and go to state 149


state 147

    (24) declF -> FUNCION ID ( parametros ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return .

    VAR             reduce using rule 24 (declF -> FUNCION ID ( parametros ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return .)
    FUNCION         reduce using rule 24 (declF -> FUNCION ID ( parametros ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return .)
    LISTA           reduce using rule 24 (declF -> FUNCION ID ( parametros ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return .)
    ID              reduce using rule 24 (declF -> FUNCION ID ( parametros ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return .)
    SI              reduce using rule 24 (declF -> FUNCION ID ( parametros ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return .)
    ENCUANTO        reduce using rule 24 (declF -> FUNCION ID ( parametros ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return .)
    PARA            reduce using rule 24 (declF -> FUNCION ID ( parametros ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return .)
    TAB             reduce using rule 24 (declF -> FUNCION ID ( parametros ) : ENTERO ENTER declarationsF statementsI TAB DEVUELVE return .)


state 148

    (31) return -> ID ENTER .

    VAR             reduce using rule 31 (return -> ID ENTER .)
    FUNCION         reduce using rule 31 (return -> ID ENTER .)
    LISTA           reduce using rule 31 (return -> ID ENTER .)
    ID              reduce using rule 31 (return -> ID ENTER .)
    SI              reduce using rule 31 (return -> ID ENTER .)
    ENCUANTO        reduce using rule 31 (return -> ID ENTER .)
    PARA            reduce using rule 31 (return -> ID ENTER .)
    TAB             reduce using rule 31 (return -> ID ENTER .)


state 149

    (30) return -> INT ENTER .

    VAR             reduce using rule 30 (return -> INT ENTER .)
    FUNCION         reduce using rule 30 (return -> INT ENTER .)
    LISTA           reduce using rule 30 (return -> INT ENTER .)
    ID              reduce using rule 30 (return -> INT ENTER .)
    SI              reduce using rule 30 (return -> INT ENTER .)
    ENCUANTO        reduce using rule 30 (return -> INT ENTER .)
    PARA            reduce using rule 30 (return -> INT ENTER .)
    TAB             reduce using rule 30 (return -> INT ENTER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CASO in state 105 resolved as shift
WARNING: shift/reduce conflict for TAB in state 105 resolved as shift
WARNING: shift/reduce conflict for TAB in state 107 resolved as shift
WARNING: shift/reduce conflict for TAB in state 127 resolved as shift
WARNING: shift/reduce conflict for TAB in state 137 resolved as shift
