Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ENTER
    NADA
    RESTO

Grammar

Rule 0     S' -> prg
Rule 1     prg -> declarations statements
Rule 2     declarations -> decl
Rule 3     declarations -> declarations decl
Rule 4     decl -> declV
Rule 5     decl -> declF
Rule 6     decl -> declL
Rule 7     declV -> VAR vari : tipo
Rule 8     vari -> atribD
Rule 9     vari -> ID
Rule 10    vari -> vari , atribD
Rule 11    vari -> vari , ID
Rule 12    tipo -> ENTERO
Rule 13    tipo -> REAL
Rule 14    tipo -> BOOLEANO
Rule 15    tipo -> STR
Rule 16    atribD -> ID = STRING
Rule 17    atribD -> ID = VERDADERO
Rule 18    atribD -> ID = FALSO
Rule 19    atribD -> ID = exp
Rule 20    declL -> LISTA ID = lista
Rule 21    lista -> [ ]
Rule 22    lista -> [ elementos ]
Rule 23    elementos -> elemento
Rule 24    elementos -> elementos , elemento
Rule 25    elemento -> INT
Rule 26    elemento -> FLOAT
Rule 27    elemento -> BOOLEANO
Rule 28    elemento -> STRING
Rule 29    elemento -> ID
Rule 30    elemento -> lista
Rule 31    declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
Rule 32    parametros -> <empty>
Rule 33    parametros -> ID : tipo
Rule 34    parametros -> parametros , ID : tipo
Rule 35    return -> INT
Rule 36    return -> ID
Rule 37    return -> FLOAT
Rule 38    return -> VERDADERO
Rule 39    return -> FALSO
Rule 40    statements -> stat
Rule 41    statements -> statements stat
Rule 42    stat -> atrib ;
Rule 43    stat -> conditions
Rule 44    stat -> ciclos
Rule 45    stat -> readwrite
Rule 46    atrib -> ID = STRING
Rule 47    atrib -> ID = VERDADERO
Rule 48    atrib -> ID = FALSO
Rule 49    atrib -> ID = exp
Rule 50    exp -> exp + termo
Rule 51    exp -> exp - termo
Rule 52    exp -> termo
Rule 53    termo -> termo * fator
Rule 54    termo -> termo / fator
Rule 55    termo -> termo ^ fator
Rule 56    termo -> fator
Rule 57    fator -> INT
Rule 58    fator -> FLOAT
Rule 59    fator -> ID
Rule 60    fator -> ( exp )
Rule 61    conditions -> SI expL ENTONCES statements endcondition
Rule 62    endcondition -> .
Rule 63    endcondition -> CASO CONTRARIO statements .
Rule 64    expL -> termoB
Rule 65    expL -> expL OR termoB
Rule 66    termoB -> fatorB
Rule 67    termoB -> termoB AND fatorB
Rule 68    fatorB -> condition
Rule 69    fatorB -> VERDADERO
Rule 70    fatorB -> FALSO
Rule 71    fatorB -> ( expL )
Rule 72    condition -> exp op exp
Rule 73    op -> >
Rule 74    op -> <
Rule 75    op -> IGUAL
Rule 76    op -> DIFERENTE
Rule 77    op -> > IGUAL
Rule 78    op -> < IGUAL
Rule 79    ciclos -> ENCUANTO expL HACER statements .
Rule 80    ciclos -> PARA expL SIGUIENTE atrib .
Rule 81    ciclos -> PARA expL SIGUIENTE atrib HACER statements .
Rule 82    readwrite -> ESCRIBIR ( ID ) ;
Rule 83    readwrite -> ESCRIBIR ( STRING ) ;
Rule 84    readwrite -> ID = LEER ( STRING ) ;

Terminals, with rules where they appear

(                    : 31 60 71 82 83 84
)                    : 31 60 71 82 83 84
*                    : 53
+                    : 50
,                    : 10 11 24 34
-                    : 51
.                    : 31 62 63 79 80 81
/                    : 54
:                    : 7 31 33 34
;                    : 42 82 83 84
<                    : 74 78
=                    : 16 17 18 19 20 46 47 48 49 84
>                    : 73 77
AND                  : 67
BOOLEANO             : 14 27
CASO                 : 63
CONTRARIO            : 63
DEVUELVE             : 31
DIFERENTE            : 76
ENCUANTO             : 79
ENTER                : 
ENTERO               : 12
ENTONCES             : 61
ESCRIBIR             : 82 83
FALSO                : 18 39 48 70
FLOAT                : 26 37 58
FUNCION              : 31
HACER                : 79 81
ID                   : 9 11 16 17 18 19 20 29 31 33 34 36 46 47 48 49 59 82 84
IGUAL                : 75 77 78
INT                  : 25 35 57
LEER                 : 84
LISTA                : 20
NADA                 : 
OR                   : 65
PARA                 : 80 81
REAL                 : 13
RESTO                : 
SI                   : 61
SIGUIENTE            : 80 81
STR                  : 15
STRING               : 16 28 46 83 84
VAR                  : 7
VERDADERO            : 17 38 47 69
[                    : 21 22
]                    : 21 22
^                    : 55
error                : 

Nonterminals, with rules where they appear

atrib                : 42 80 81
atribD               : 8 10
ciclos               : 44
condition            : 68
conditions           : 43
decl                 : 2 3
declF                : 5
declL                : 6
declV                : 4
declarations         : 1 3 31
elemento             : 23 24
elementos            : 22 24
endcondition         : 61
exp                  : 19 49 50 51 60 72 72
expL                 : 61 65 71 79 80 81
fator                : 53 54 55 56
fatorB               : 66 67
lista                : 20 30
op                   : 72
parametros           : 31 34
prg                  : 0
readwrite            : 45
return               : 31
stat                 : 40 41
statements           : 1 31 41 61 63 79 81
termo                : 50 51 52 53 54 55
termoB               : 64 65 67
tipo                 : 7 31 33 34
vari                 : 7 10 11

Parsing method: LALR

state 0

    (0) S' -> . prg
    (1) prg -> . declarations statements
    (2) declarations -> . decl
    (3) declarations -> . declarations decl
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (7) declV -> . VAR vari : tipo
    (31) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (20) declL -> . LISTA ID = lista

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9

    prg                            shift and go to state 1
    declarations                   shift and go to state 2
    decl                           shift and go to state 3
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6

state 1

    (0) S' -> prg .



state 2

    (1) prg -> declarations . statements
    (3) declarations -> declarations . decl
    (40) statements -> . stat
    (41) statements -> . statements stat
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (7) declV -> . VAR vari : tipo
    (31) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (20) declL -> . LISTA ID = lista
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (61) conditions -> . SI expL ENTONCES statements endcondition
    (79) ciclos -> . ENCUANTO expL HACER statements .
    (80) ciclos -> . PARA expL SIGUIENTE atrib .
    (81) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (82) readwrite -> . ESCRIBIR ( ID ) ;
    (83) readwrite -> . ESCRIBIR ( STRING ) ;
    (84) readwrite -> . ID = LEER ( STRING ) ;

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    statements                     shift and go to state 10
    decl                           shift and go to state 11
    stat                           shift and go to state 12
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 3

    (2) declarations -> decl .

    VAR             reduce using rule 2 (declarations -> decl .)
    FUNCION         reduce using rule 2 (declarations -> decl .)
    LISTA           reduce using rule 2 (declarations -> decl .)
    ID              reduce using rule 2 (declarations -> decl .)
    SI              reduce using rule 2 (declarations -> decl .)
    ENCUANTO        reduce using rule 2 (declarations -> decl .)
    PARA            reduce using rule 2 (declarations -> decl .)
    ESCRIBIR        reduce using rule 2 (declarations -> decl .)


state 4

    (4) decl -> declV .

    VAR             reduce using rule 4 (decl -> declV .)
    FUNCION         reduce using rule 4 (decl -> declV .)
    LISTA           reduce using rule 4 (decl -> declV .)
    ID              reduce using rule 4 (decl -> declV .)
    SI              reduce using rule 4 (decl -> declV .)
    ENCUANTO        reduce using rule 4 (decl -> declV .)
    PARA            reduce using rule 4 (decl -> declV .)
    ESCRIBIR        reduce using rule 4 (decl -> declV .)


state 5

    (5) decl -> declF .

    VAR             reduce using rule 5 (decl -> declF .)
    FUNCION         reduce using rule 5 (decl -> declF .)
    LISTA           reduce using rule 5 (decl -> declF .)
    ID              reduce using rule 5 (decl -> declF .)
    SI              reduce using rule 5 (decl -> declF .)
    ENCUANTO        reduce using rule 5 (decl -> declF .)
    PARA            reduce using rule 5 (decl -> declF .)
    ESCRIBIR        reduce using rule 5 (decl -> declF .)


state 6

    (6) decl -> declL .

    VAR             reduce using rule 6 (decl -> declL .)
    FUNCION         reduce using rule 6 (decl -> declL .)
    LISTA           reduce using rule 6 (decl -> declL .)
    ID              reduce using rule 6 (decl -> declL .)
    SI              reduce using rule 6 (decl -> declL .)
    ENCUANTO        reduce using rule 6 (decl -> declL .)
    PARA            reduce using rule 6 (decl -> declL .)
    ESCRIBIR        reduce using rule 6 (decl -> declL .)


state 7

    (7) declV -> VAR . vari : tipo
    (8) vari -> . atribD
    (9) vari -> . ID
    (10) vari -> . vari , atribD
    (11) vari -> . vari , ID
    (16) atribD -> . ID = STRING
    (17) atribD -> . ID = VERDADERO
    (18) atribD -> . ID = FALSO
    (19) atribD -> . ID = exp

    ID              shift and go to state 24

    vari                           shift and go to state 22
    atribD                         shift and go to state 23

state 8

    (31) declF -> FUNCION . ID ( parametros ) : tipo declarations statements DEVUELVE return .

    ID              shift and go to state 25


state 9

    (20) declL -> LISTA . ID = lista

    ID              shift and go to state 26


state 10

    (1) prg -> declarations statements .
    (41) statements -> statements . stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (61) conditions -> . SI expL ENTONCES statements endcondition
    (79) ciclos -> . ENCUANTO expL HACER statements .
    (80) ciclos -> . PARA expL SIGUIENTE atrib .
    (81) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (82) readwrite -> . ESCRIBIR ( ID ) ;
    (83) readwrite -> . ESCRIBIR ( STRING ) ;
    (84) readwrite -> . ID = LEER ( STRING ) ;

    $end            reduce using rule 1 (prg -> declarations statements .)
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    stat                           shift and go to state 27
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 11

    (3) declarations -> declarations decl .

    VAR             reduce using rule 3 (declarations -> declarations decl .)
    FUNCION         reduce using rule 3 (declarations -> declarations decl .)
    LISTA           reduce using rule 3 (declarations -> declarations decl .)
    ID              reduce using rule 3 (declarations -> declarations decl .)
    SI              reduce using rule 3 (declarations -> declarations decl .)
    ENCUANTO        reduce using rule 3 (declarations -> declarations decl .)
    PARA            reduce using rule 3 (declarations -> declarations decl .)
    ESCRIBIR        reduce using rule 3 (declarations -> declarations decl .)


state 12

    (40) statements -> stat .

    ID              reduce using rule 40 (statements -> stat .)
    SI              reduce using rule 40 (statements -> stat .)
    ENCUANTO        reduce using rule 40 (statements -> stat .)
    PARA            reduce using rule 40 (statements -> stat .)
    ESCRIBIR        reduce using rule 40 (statements -> stat .)
    $end            reduce using rule 40 (statements -> stat .)
    .               reduce using rule 40 (statements -> stat .)
    CASO            reduce using rule 40 (statements -> stat .)
    DEVUELVE        reduce using rule 40 (statements -> stat .)


state 13

    (42) stat -> atrib . ;

    ;               shift and go to state 28


state 14

    (43) stat -> conditions .

    ID              reduce using rule 43 (stat -> conditions .)
    SI              reduce using rule 43 (stat -> conditions .)
    ENCUANTO        reduce using rule 43 (stat -> conditions .)
    PARA            reduce using rule 43 (stat -> conditions .)
    ESCRIBIR        reduce using rule 43 (stat -> conditions .)
    $end            reduce using rule 43 (stat -> conditions .)
    .               reduce using rule 43 (stat -> conditions .)
    CASO            reduce using rule 43 (stat -> conditions .)
    DEVUELVE        reduce using rule 43 (stat -> conditions .)


state 15

    (44) stat -> ciclos .

    ID              reduce using rule 44 (stat -> ciclos .)
    SI              reduce using rule 44 (stat -> ciclos .)
    ENCUANTO        reduce using rule 44 (stat -> ciclos .)
    PARA            reduce using rule 44 (stat -> ciclos .)
    ESCRIBIR        reduce using rule 44 (stat -> ciclos .)
    $end            reduce using rule 44 (stat -> ciclos .)
    .               reduce using rule 44 (stat -> ciclos .)
    CASO            reduce using rule 44 (stat -> ciclos .)
    DEVUELVE        reduce using rule 44 (stat -> ciclos .)


state 16

    (45) stat -> readwrite .

    ID              reduce using rule 45 (stat -> readwrite .)
    SI              reduce using rule 45 (stat -> readwrite .)
    ENCUANTO        reduce using rule 45 (stat -> readwrite .)
    PARA            reduce using rule 45 (stat -> readwrite .)
    ESCRIBIR        reduce using rule 45 (stat -> readwrite .)
    $end            reduce using rule 45 (stat -> readwrite .)
    .               reduce using rule 45 (stat -> readwrite .)
    CASO            reduce using rule 45 (stat -> readwrite .)
    DEVUELVE        reduce using rule 45 (stat -> readwrite .)


state 17

    (46) atrib -> ID . = STRING
    (47) atrib -> ID . = VERDADERO
    (48) atrib -> ID . = FALSO
    (49) atrib -> ID . = exp
    (84) readwrite -> ID . = LEER ( STRING ) ;

    =               shift and go to state 29


state 18

    (61) conditions -> SI . expL ENTONCES statements endcondition
    (64) expL -> . termoB
    (65) expL -> . expL OR termoB
    (66) termoB -> . fatorB
    (67) termoB -> . termoB AND fatorB
    (68) fatorB -> . condition
    (69) fatorB -> . VERDADERO
    (70) fatorB -> . FALSO
    (71) fatorB -> . ( expL )
    (72) condition -> . exp op exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )

    VERDADERO       shift and go to state 34
    FALSO           shift and go to state 35
    (               shift and go to state 36
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42

    expL                           shift and go to state 30
    termoB                         shift and go to state 31
    fatorB                         shift and go to state 32
    condition                      shift and go to state 33
    exp                            shift and go to state 37
    termo                          shift and go to state 38
    fator                          shift and go to state 39

state 19

    (79) ciclos -> ENCUANTO . expL HACER statements .
    (64) expL -> . termoB
    (65) expL -> . expL OR termoB
    (66) termoB -> . fatorB
    (67) termoB -> . termoB AND fatorB
    (68) fatorB -> . condition
    (69) fatorB -> . VERDADERO
    (70) fatorB -> . FALSO
    (71) fatorB -> . ( expL )
    (72) condition -> . exp op exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )

    VERDADERO       shift and go to state 34
    FALSO           shift and go to state 35
    (               shift and go to state 36
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42

    expL                           shift and go to state 43
    termoB                         shift and go to state 31
    fatorB                         shift and go to state 32
    condition                      shift and go to state 33
    exp                            shift and go to state 37
    termo                          shift and go to state 38
    fator                          shift and go to state 39

state 20

    (80) ciclos -> PARA . expL SIGUIENTE atrib .
    (81) ciclos -> PARA . expL SIGUIENTE atrib HACER statements .
    (64) expL -> . termoB
    (65) expL -> . expL OR termoB
    (66) termoB -> . fatorB
    (67) termoB -> . termoB AND fatorB
    (68) fatorB -> . condition
    (69) fatorB -> . VERDADERO
    (70) fatorB -> . FALSO
    (71) fatorB -> . ( expL )
    (72) condition -> . exp op exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )

    VERDADERO       shift and go to state 34
    FALSO           shift and go to state 35
    (               shift and go to state 36
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42

    expL                           shift and go to state 44
    termoB                         shift and go to state 31
    fatorB                         shift and go to state 32
    condition                      shift and go to state 33
    exp                            shift and go to state 37
    termo                          shift and go to state 38
    fator                          shift and go to state 39

state 21

    (82) readwrite -> ESCRIBIR . ( ID ) ;
    (83) readwrite -> ESCRIBIR . ( STRING ) ;

    (               shift and go to state 45


state 22

    (7) declV -> VAR vari . : tipo
    (10) vari -> vari . , atribD
    (11) vari -> vari . , ID

    :               shift and go to state 46
    ,               shift and go to state 47


state 23

    (8) vari -> atribD .

    :               reduce using rule 8 (vari -> atribD .)
    ,               reduce using rule 8 (vari -> atribD .)


state 24

    (9) vari -> ID .
    (16) atribD -> ID . = STRING
    (17) atribD -> ID . = VERDADERO
    (18) atribD -> ID . = FALSO
    (19) atribD -> ID . = exp

    :               reduce using rule 9 (vari -> ID .)
    ,               reduce using rule 9 (vari -> ID .)
    =               shift and go to state 48


state 25

    (31) declF -> FUNCION ID . ( parametros ) : tipo declarations statements DEVUELVE return .

    (               shift and go to state 49


state 26

    (20) declL -> LISTA ID . = lista

    =               shift and go to state 50


state 27

    (41) statements -> statements stat .

    ID              reduce using rule 41 (statements -> statements stat .)
    SI              reduce using rule 41 (statements -> statements stat .)
    ENCUANTO        reduce using rule 41 (statements -> statements stat .)
    PARA            reduce using rule 41 (statements -> statements stat .)
    ESCRIBIR        reduce using rule 41 (statements -> statements stat .)
    $end            reduce using rule 41 (statements -> statements stat .)
    .               reduce using rule 41 (statements -> statements stat .)
    CASO            reduce using rule 41 (statements -> statements stat .)
    DEVUELVE        reduce using rule 41 (statements -> statements stat .)


state 28

    (42) stat -> atrib ; .

    ID              reduce using rule 42 (stat -> atrib ; .)
    SI              reduce using rule 42 (stat -> atrib ; .)
    ENCUANTO        reduce using rule 42 (stat -> atrib ; .)
    PARA            reduce using rule 42 (stat -> atrib ; .)
    ESCRIBIR        reduce using rule 42 (stat -> atrib ; .)
    $end            reduce using rule 42 (stat -> atrib ; .)
    .               reduce using rule 42 (stat -> atrib ; .)
    CASO            reduce using rule 42 (stat -> atrib ; .)
    DEVUELVE        reduce using rule 42 (stat -> atrib ; .)


state 29

    (46) atrib -> ID = . STRING
    (47) atrib -> ID = . VERDADERO
    (48) atrib -> ID = . FALSO
    (49) atrib -> ID = . exp
    (84) readwrite -> ID = . LEER ( STRING ) ;
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )

    STRING          shift and go to state 51
    VERDADERO       shift and go to state 52
    FALSO           shift and go to state 53
    LEER            shift and go to state 55
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    (               shift and go to state 56

    exp                            shift and go to state 54
    termo                          shift and go to state 38
    fator                          shift and go to state 39

state 30

    (61) conditions -> SI expL . ENTONCES statements endcondition
    (65) expL -> expL . OR termoB

    ENTONCES        shift and go to state 57
    OR              shift and go to state 58


state 31

    (64) expL -> termoB .
    (67) termoB -> termoB . AND fatorB

    ENTONCES        reduce using rule 64 (expL -> termoB .)
    OR              reduce using rule 64 (expL -> termoB .)
    HACER           reduce using rule 64 (expL -> termoB .)
    SIGUIENTE       reduce using rule 64 (expL -> termoB .)
    )               reduce using rule 64 (expL -> termoB .)
    AND             shift and go to state 59


state 32

    (66) termoB -> fatorB .

    AND             reduce using rule 66 (termoB -> fatorB .)
    ENTONCES        reduce using rule 66 (termoB -> fatorB .)
    OR              reduce using rule 66 (termoB -> fatorB .)
    HACER           reduce using rule 66 (termoB -> fatorB .)
    SIGUIENTE       reduce using rule 66 (termoB -> fatorB .)
    )               reduce using rule 66 (termoB -> fatorB .)


state 33

    (68) fatorB -> condition .

    AND             reduce using rule 68 (fatorB -> condition .)
    ENTONCES        reduce using rule 68 (fatorB -> condition .)
    OR              reduce using rule 68 (fatorB -> condition .)
    HACER           reduce using rule 68 (fatorB -> condition .)
    SIGUIENTE       reduce using rule 68 (fatorB -> condition .)
    )               reduce using rule 68 (fatorB -> condition .)


state 34

    (69) fatorB -> VERDADERO .

    AND             reduce using rule 69 (fatorB -> VERDADERO .)
    ENTONCES        reduce using rule 69 (fatorB -> VERDADERO .)
    OR              reduce using rule 69 (fatorB -> VERDADERO .)
    HACER           reduce using rule 69 (fatorB -> VERDADERO .)
    SIGUIENTE       reduce using rule 69 (fatorB -> VERDADERO .)
    )               reduce using rule 69 (fatorB -> VERDADERO .)


state 35

    (70) fatorB -> FALSO .

    AND             reduce using rule 70 (fatorB -> FALSO .)
    ENTONCES        reduce using rule 70 (fatorB -> FALSO .)
    OR              reduce using rule 70 (fatorB -> FALSO .)
    HACER           reduce using rule 70 (fatorB -> FALSO .)
    SIGUIENTE       reduce using rule 70 (fatorB -> FALSO .)
    )               reduce using rule 70 (fatorB -> FALSO .)


state 36

    (71) fatorB -> ( . expL )
    (60) fator -> ( . exp )
    (64) expL -> . termoB
    (65) expL -> . expL OR termoB
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (66) termoB -> . fatorB
    (67) termoB -> . termoB AND fatorB
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (68) fatorB -> . condition
    (69) fatorB -> . VERDADERO
    (70) fatorB -> . FALSO
    (71) fatorB -> . ( expL )
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )
    (72) condition -> . exp op exp

    VERDADERO       shift and go to state 34
    FALSO           shift and go to state 35
    (               shift and go to state 36
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42

    expL                           shift and go to state 60
    exp                            shift and go to state 61
    termoB                         shift and go to state 31
    termo                          shift and go to state 38
    fatorB                         shift and go to state 32
    fator                          shift and go to state 39
    condition                      shift and go to state 33

state 37

    (72) condition -> exp . op exp
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo
    (73) op -> . >
    (74) op -> . <
    (75) op -> . IGUAL
    (76) op -> . DIFERENTE
    (77) op -> . > IGUAL
    (78) op -> . < IGUAL

    +               shift and go to state 63
    -               shift and go to state 64
    >               shift and go to state 65
    <               shift and go to state 66
    IGUAL           shift and go to state 67
    DIFERENTE       shift and go to state 68

    op                             shift and go to state 62

state 38

    (52) exp -> termo .
    (53) termo -> termo . * fator
    (54) termo -> termo . / fator
    (55) termo -> termo . ^ fator

    +               reduce using rule 52 (exp -> termo .)
    -               reduce using rule 52 (exp -> termo .)
    >               reduce using rule 52 (exp -> termo .)
    <               reduce using rule 52 (exp -> termo .)
    IGUAL           reduce using rule 52 (exp -> termo .)
    DIFERENTE       reduce using rule 52 (exp -> termo .)
    ;               reduce using rule 52 (exp -> termo .)
    )               reduce using rule 52 (exp -> termo .)
    :               reduce using rule 52 (exp -> termo .)
    ,               reduce using rule 52 (exp -> termo .)
    AND             reduce using rule 52 (exp -> termo .)
    ENTONCES        reduce using rule 52 (exp -> termo .)
    OR              reduce using rule 52 (exp -> termo .)
    HACER           reduce using rule 52 (exp -> termo .)
    SIGUIENTE       reduce using rule 52 (exp -> termo .)
    .               reduce using rule 52 (exp -> termo .)
    *               shift and go to state 69
    /               shift and go to state 70
    ^               shift and go to state 71


state 39

    (56) termo -> fator .

    *               reduce using rule 56 (termo -> fator .)
    /               reduce using rule 56 (termo -> fator .)
    ^               reduce using rule 56 (termo -> fator .)
    +               reduce using rule 56 (termo -> fator .)
    -               reduce using rule 56 (termo -> fator .)
    >               reduce using rule 56 (termo -> fator .)
    <               reduce using rule 56 (termo -> fator .)
    IGUAL           reduce using rule 56 (termo -> fator .)
    DIFERENTE       reduce using rule 56 (termo -> fator .)
    ;               reduce using rule 56 (termo -> fator .)
    )               reduce using rule 56 (termo -> fator .)
    :               reduce using rule 56 (termo -> fator .)
    ,               reduce using rule 56 (termo -> fator .)
    AND             reduce using rule 56 (termo -> fator .)
    ENTONCES        reduce using rule 56 (termo -> fator .)
    OR              reduce using rule 56 (termo -> fator .)
    HACER           reduce using rule 56 (termo -> fator .)
    SIGUIENTE       reduce using rule 56 (termo -> fator .)
    .               reduce using rule 56 (termo -> fator .)


state 40

    (57) fator -> INT .

    *               reduce using rule 57 (fator -> INT .)
    /               reduce using rule 57 (fator -> INT .)
    ^               reduce using rule 57 (fator -> INT .)
    +               reduce using rule 57 (fator -> INT .)
    -               reduce using rule 57 (fator -> INT .)
    >               reduce using rule 57 (fator -> INT .)
    <               reduce using rule 57 (fator -> INT .)
    IGUAL           reduce using rule 57 (fator -> INT .)
    DIFERENTE       reduce using rule 57 (fator -> INT .)
    ;               reduce using rule 57 (fator -> INT .)
    )               reduce using rule 57 (fator -> INT .)
    :               reduce using rule 57 (fator -> INT .)
    ,               reduce using rule 57 (fator -> INT .)
    AND             reduce using rule 57 (fator -> INT .)
    ENTONCES        reduce using rule 57 (fator -> INT .)
    OR              reduce using rule 57 (fator -> INT .)
    HACER           reduce using rule 57 (fator -> INT .)
    SIGUIENTE       reduce using rule 57 (fator -> INT .)
    .               reduce using rule 57 (fator -> INT .)


state 41

    (58) fator -> FLOAT .

    *               reduce using rule 58 (fator -> FLOAT .)
    /               reduce using rule 58 (fator -> FLOAT .)
    ^               reduce using rule 58 (fator -> FLOAT .)
    +               reduce using rule 58 (fator -> FLOAT .)
    -               reduce using rule 58 (fator -> FLOAT .)
    >               reduce using rule 58 (fator -> FLOAT .)
    <               reduce using rule 58 (fator -> FLOAT .)
    IGUAL           reduce using rule 58 (fator -> FLOAT .)
    DIFERENTE       reduce using rule 58 (fator -> FLOAT .)
    ;               reduce using rule 58 (fator -> FLOAT .)
    )               reduce using rule 58 (fator -> FLOAT .)
    :               reduce using rule 58 (fator -> FLOAT .)
    ,               reduce using rule 58 (fator -> FLOAT .)
    AND             reduce using rule 58 (fator -> FLOAT .)
    ENTONCES        reduce using rule 58 (fator -> FLOAT .)
    OR              reduce using rule 58 (fator -> FLOAT .)
    HACER           reduce using rule 58 (fator -> FLOAT .)
    SIGUIENTE       reduce using rule 58 (fator -> FLOAT .)
    .               reduce using rule 58 (fator -> FLOAT .)


state 42

    (59) fator -> ID .

    *               reduce using rule 59 (fator -> ID .)
    /               reduce using rule 59 (fator -> ID .)
    ^               reduce using rule 59 (fator -> ID .)
    +               reduce using rule 59 (fator -> ID .)
    -               reduce using rule 59 (fator -> ID .)
    >               reduce using rule 59 (fator -> ID .)
    <               reduce using rule 59 (fator -> ID .)
    IGUAL           reduce using rule 59 (fator -> ID .)
    DIFERENTE       reduce using rule 59 (fator -> ID .)
    ;               reduce using rule 59 (fator -> ID .)
    )               reduce using rule 59 (fator -> ID .)
    :               reduce using rule 59 (fator -> ID .)
    ,               reduce using rule 59 (fator -> ID .)
    AND             reduce using rule 59 (fator -> ID .)
    ENTONCES        reduce using rule 59 (fator -> ID .)
    OR              reduce using rule 59 (fator -> ID .)
    HACER           reduce using rule 59 (fator -> ID .)
    SIGUIENTE       reduce using rule 59 (fator -> ID .)
    .               reduce using rule 59 (fator -> ID .)


state 43

    (79) ciclos -> ENCUANTO expL . HACER statements .
    (65) expL -> expL . OR termoB

    HACER           shift and go to state 72
    OR              shift and go to state 58


state 44

    (80) ciclos -> PARA expL . SIGUIENTE atrib .
    (81) ciclos -> PARA expL . SIGUIENTE atrib HACER statements .
    (65) expL -> expL . OR termoB

    SIGUIENTE       shift and go to state 73
    OR              shift and go to state 58


state 45

    (82) readwrite -> ESCRIBIR ( . ID ) ;
    (83) readwrite -> ESCRIBIR ( . STRING ) ;

    ID              shift and go to state 74
    STRING          shift and go to state 75


state 46

    (7) declV -> VAR vari : . tipo
    (12) tipo -> . ENTERO
    (13) tipo -> . REAL
    (14) tipo -> . BOOLEANO
    (15) tipo -> . STR

    ENTERO          shift and go to state 77
    REAL            shift and go to state 78
    BOOLEANO        shift and go to state 79
    STR             shift and go to state 80

    tipo                           shift and go to state 76

state 47

    (10) vari -> vari , . atribD
    (11) vari -> vari , . ID
    (16) atribD -> . ID = STRING
    (17) atribD -> . ID = VERDADERO
    (18) atribD -> . ID = FALSO
    (19) atribD -> . ID = exp

    ID              shift and go to state 82

    atribD                         shift and go to state 81

state 48

    (16) atribD -> ID = . STRING
    (17) atribD -> ID = . VERDADERO
    (18) atribD -> ID = . FALSO
    (19) atribD -> ID = . exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )

    STRING          shift and go to state 83
    VERDADERO       shift and go to state 84
    FALSO           shift and go to state 85
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    (               shift and go to state 56

    exp                            shift and go to state 86
    termo                          shift and go to state 38
    fator                          shift and go to state 39

state 49

    (31) declF -> FUNCION ID ( . parametros ) : tipo declarations statements DEVUELVE return .
    (32) parametros -> .
    (33) parametros -> . ID : tipo
    (34) parametros -> . parametros , ID : tipo

    )               reduce using rule 32 (parametros -> .)
    ,               reduce using rule 32 (parametros -> .)
    ID              shift and go to state 87

    parametros                     shift and go to state 88

state 50

    (20) declL -> LISTA ID = . lista
    (21) lista -> . [ ]
    (22) lista -> . [ elementos ]

    [               shift and go to state 90

    lista                          shift and go to state 89

state 51

    (46) atrib -> ID = STRING .

    ;               reduce using rule 46 (atrib -> ID = STRING .)
    .               reduce using rule 46 (atrib -> ID = STRING .)
    HACER           reduce using rule 46 (atrib -> ID = STRING .)


state 52

    (47) atrib -> ID = VERDADERO .

    ;               reduce using rule 47 (atrib -> ID = VERDADERO .)
    .               reduce using rule 47 (atrib -> ID = VERDADERO .)
    HACER           reduce using rule 47 (atrib -> ID = VERDADERO .)


state 53

    (48) atrib -> ID = FALSO .

    ;               reduce using rule 48 (atrib -> ID = FALSO .)
    .               reduce using rule 48 (atrib -> ID = FALSO .)
    HACER           reduce using rule 48 (atrib -> ID = FALSO .)


state 54

    (49) atrib -> ID = exp .
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo

    ;               reduce using rule 49 (atrib -> ID = exp .)
    .               reduce using rule 49 (atrib -> ID = exp .)
    HACER           reduce using rule 49 (atrib -> ID = exp .)
    +               shift and go to state 63
    -               shift and go to state 64


state 55

    (84) readwrite -> ID = LEER . ( STRING ) ;

    (               shift and go to state 91


state 56

    (60) fator -> ( . exp )
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    (               shift and go to state 56

    exp                            shift and go to state 92
    termo                          shift and go to state 38
    fator                          shift and go to state 39

state 57

    (61) conditions -> SI expL ENTONCES . statements endcondition
    (40) statements -> . stat
    (41) statements -> . statements stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (61) conditions -> . SI expL ENTONCES statements endcondition
    (79) ciclos -> . ENCUANTO expL HACER statements .
    (80) ciclos -> . PARA expL SIGUIENTE atrib .
    (81) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (82) readwrite -> . ESCRIBIR ( ID ) ;
    (83) readwrite -> . ESCRIBIR ( STRING ) ;
    (84) readwrite -> . ID = LEER ( STRING ) ;

    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    statements                     shift and go to state 93
    stat                           shift and go to state 12
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 58

    (65) expL -> expL OR . termoB
    (66) termoB -> . fatorB
    (67) termoB -> . termoB AND fatorB
    (68) fatorB -> . condition
    (69) fatorB -> . VERDADERO
    (70) fatorB -> . FALSO
    (71) fatorB -> . ( expL )
    (72) condition -> . exp op exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )

    VERDADERO       shift and go to state 34
    FALSO           shift and go to state 35
    (               shift and go to state 36
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42

    termoB                         shift and go to state 94
    fatorB                         shift and go to state 32
    condition                      shift and go to state 33
    exp                            shift and go to state 37
    termo                          shift and go to state 38
    fator                          shift and go to state 39

state 59

    (67) termoB -> termoB AND . fatorB
    (68) fatorB -> . condition
    (69) fatorB -> . VERDADERO
    (70) fatorB -> . FALSO
    (71) fatorB -> . ( expL )
    (72) condition -> . exp op exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )

    VERDADERO       shift and go to state 34
    FALSO           shift and go to state 35
    (               shift and go to state 36
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42

    fatorB                         shift and go to state 95
    condition                      shift and go to state 33
    exp                            shift and go to state 37
    termo                          shift and go to state 38
    fator                          shift and go to state 39

state 60

    (71) fatorB -> ( expL . )
    (65) expL -> expL . OR termoB

    )               shift and go to state 96
    OR              shift and go to state 58


state 61

    (60) fator -> ( exp . )
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo
    (72) condition -> exp . op exp
    (73) op -> . >
    (74) op -> . <
    (75) op -> . IGUAL
    (76) op -> . DIFERENTE
    (77) op -> . > IGUAL
    (78) op -> . < IGUAL

    )               shift and go to state 97
    +               shift and go to state 63
    -               shift and go to state 64
    >               shift and go to state 65
    <               shift and go to state 66
    IGUAL           shift and go to state 67
    DIFERENTE       shift and go to state 68

    op                             shift and go to state 62

state 62

    (72) condition -> exp op . exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    (               shift and go to state 56

    exp                            shift and go to state 98
    termo                          shift and go to state 38
    fator                          shift and go to state 39

state 63

    (50) exp -> exp + . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    (               shift and go to state 56

    termo                          shift and go to state 99
    fator                          shift and go to state 39

state 64

    (51) exp -> exp - . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    (               shift and go to state 56

    termo                          shift and go to state 100
    fator                          shift and go to state 39

state 65

    (73) op -> > .
    (77) op -> > . IGUAL

    INT             reduce using rule 73 (op -> > .)
    FLOAT           reduce using rule 73 (op -> > .)
    ID              reduce using rule 73 (op -> > .)
    (               reduce using rule 73 (op -> > .)
    IGUAL           shift and go to state 101


state 66

    (74) op -> < .
    (78) op -> < . IGUAL

    INT             reduce using rule 74 (op -> < .)
    FLOAT           reduce using rule 74 (op -> < .)
    ID              reduce using rule 74 (op -> < .)
    (               reduce using rule 74 (op -> < .)
    IGUAL           shift and go to state 102


state 67

    (75) op -> IGUAL .

    INT             reduce using rule 75 (op -> IGUAL .)
    FLOAT           reduce using rule 75 (op -> IGUAL .)
    ID              reduce using rule 75 (op -> IGUAL .)
    (               reduce using rule 75 (op -> IGUAL .)


state 68

    (76) op -> DIFERENTE .

    INT             reduce using rule 76 (op -> DIFERENTE .)
    FLOAT           reduce using rule 76 (op -> DIFERENTE .)
    ID              reduce using rule 76 (op -> DIFERENTE .)
    (               reduce using rule 76 (op -> DIFERENTE .)


state 69

    (53) termo -> termo * . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    (               shift and go to state 56

    fator                          shift and go to state 103

state 70

    (54) termo -> termo / . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    (               shift and go to state 56

    fator                          shift and go to state 104

state 71

    (55) termo -> termo ^ . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    (               shift and go to state 56

    fator                          shift and go to state 105

state 72

    (79) ciclos -> ENCUANTO expL HACER . statements .
    (40) statements -> . stat
    (41) statements -> . statements stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (61) conditions -> . SI expL ENTONCES statements endcondition
    (79) ciclos -> . ENCUANTO expL HACER statements .
    (80) ciclos -> . PARA expL SIGUIENTE atrib .
    (81) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (82) readwrite -> . ESCRIBIR ( ID ) ;
    (83) readwrite -> . ESCRIBIR ( STRING ) ;
    (84) readwrite -> . ID = LEER ( STRING ) ;

    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    statements                     shift and go to state 106
    stat                           shift and go to state 12
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 73

    (80) ciclos -> PARA expL SIGUIENTE . atrib .
    (81) ciclos -> PARA expL SIGUIENTE . atrib HACER statements .
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp

    ID              shift and go to state 108

    atrib                          shift and go to state 107

state 74

    (82) readwrite -> ESCRIBIR ( ID . ) ;

    )               shift and go to state 109


state 75

    (83) readwrite -> ESCRIBIR ( STRING . ) ;

    )               shift and go to state 110


state 76

    (7) declV -> VAR vari : tipo .

    VAR             reduce using rule 7 (declV -> VAR vari : tipo .)
    FUNCION         reduce using rule 7 (declV -> VAR vari : tipo .)
    LISTA           reduce using rule 7 (declV -> VAR vari : tipo .)
    ID              reduce using rule 7 (declV -> VAR vari : tipo .)
    SI              reduce using rule 7 (declV -> VAR vari : tipo .)
    ENCUANTO        reduce using rule 7 (declV -> VAR vari : tipo .)
    PARA            reduce using rule 7 (declV -> VAR vari : tipo .)
    ESCRIBIR        reduce using rule 7 (declV -> VAR vari : tipo .)


state 77

    (12) tipo -> ENTERO .

    VAR             reduce using rule 12 (tipo -> ENTERO .)
    FUNCION         reduce using rule 12 (tipo -> ENTERO .)
    LISTA           reduce using rule 12 (tipo -> ENTERO .)
    ID              reduce using rule 12 (tipo -> ENTERO .)
    SI              reduce using rule 12 (tipo -> ENTERO .)
    ENCUANTO        reduce using rule 12 (tipo -> ENTERO .)
    PARA            reduce using rule 12 (tipo -> ENTERO .)
    ESCRIBIR        reduce using rule 12 (tipo -> ENTERO .)
    )               reduce using rule 12 (tipo -> ENTERO .)
    ,               reduce using rule 12 (tipo -> ENTERO .)


state 78

    (13) tipo -> REAL .

    VAR             reduce using rule 13 (tipo -> REAL .)
    FUNCION         reduce using rule 13 (tipo -> REAL .)
    LISTA           reduce using rule 13 (tipo -> REAL .)
    ID              reduce using rule 13 (tipo -> REAL .)
    SI              reduce using rule 13 (tipo -> REAL .)
    ENCUANTO        reduce using rule 13 (tipo -> REAL .)
    PARA            reduce using rule 13 (tipo -> REAL .)
    ESCRIBIR        reduce using rule 13 (tipo -> REAL .)
    )               reduce using rule 13 (tipo -> REAL .)
    ,               reduce using rule 13 (tipo -> REAL .)


state 79

    (14) tipo -> BOOLEANO .

    VAR             reduce using rule 14 (tipo -> BOOLEANO .)
    FUNCION         reduce using rule 14 (tipo -> BOOLEANO .)
    LISTA           reduce using rule 14 (tipo -> BOOLEANO .)
    ID              reduce using rule 14 (tipo -> BOOLEANO .)
    SI              reduce using rule 14 (tipo -> BOOLEANO .)
    ENCUANTO        reduce using rule 14 (tipo -> BOOLEANO .)
    PARA            reduce using rule 14 (tipo -> BOOLEANO .)
    ESCRIBIR        reduce using rule 14 (tipo -> BOOLEANO .)
    )               reduce using rule 14 (tipo -> BOOLEANO .)
    ,               reduce using rule 14 (tipo -> BOOLEANO .)


state 80

    (15) tipo -> STR .

    VAR             reduce using rule 15 (tipo -> STR .)
    FUNCION         reduce using rule 15 (tipo -> STR .)
    LISTA           reduce using rule 15 (tipo -> STR .)
    ID              reduce using rule 15 (tipo -> STR .)
    SI              reduce using rule 15 (tipo -> STR .)
    ENCUANTO        reduce using rule 15 (tipo -> STR .)
    PARA            reduce using rule 15 (tipo -> STR .)
    ESCRIBIR        reduce using rule 15 (tipo -> STR .)
    )               reduce using rule 15 (tipo -> STR .)
    ,               reduce using rule 15 (tipo -> STR .)


state 81

    (10) vari -> vari , atribD .

    :               reduce using rule 10 (vari -> vari , atribD .)
    ,               reduce using rule 10 (vari -> vari , atribD .)


state 82

    (11) vari -> vari , ID .
    (16) atribD -> ID . = STRING
    (17) atribD -> ID . = VERDADERO
    (18) atribD -> ID . = FALSO
    (19) atribD -> ID . = exp

    :               reduce using rule 11 (vari -> vari , ID .)
    ,               reduce using rule 11 (vari -> vari , ID .)
    =               shift and go to state 48


state 83

    (16) atribD -> ID = STRING .

    :               reduce using rule 16 (atribD -> ID = STRING .)
    ,               reduce using rule 16 (atribD -> ID = STRING .)


state 84

    (17) atribD -> ID = VERDADERO .

    :               reduce using rule 17 (atribD -> ID = VERDADERO .)
    ,               reduce using rule 17 (atribD -> ID = VERDADERO .)


state 85

    (18) atribD -> ID = FALSO .

    :               reduce using rule 18 (atribD -> ID = FALSO .)
    ,               reduce using rule 18 (atribD -> ID = FALSO .)


state 86

    (19) atribD -> ID = exp .
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo

    :               reduce using rule 19 (atribD -> ID = exp .)
    ,               reduce using rule 19 (atribD -> ID = exp .)
    +               shift and go to state 63
    -               shift and go to state 64


state 87

    (33) parametros -> ID . : tipo

    :               shift and go to state 111


state 88

    (31) declF -> FUNCION ID ( parametros . ) : tipo declarations statements DEVUELVE return .
    (34) parametros -> parametros . , ID : tipo

    )               shift and go to state 112
    ,               shift and go to state 113


state 89

    (20) declL -> LISTA ID = lista .

    VAR             reduce using rule 20 (declL -> LISTA ID = lista .)
    FUNCION         reduce using rule 20 (declL -> LISTA ID = lista .)
    LISTA           reduce using rule 20 (declL -> LISTA ID = lista .)
    ID              reduce using rule 20 (declL -> LISTA ID = lista .)
    SI              reduce using rule 20 (declL -> LISTA ID = lista .)
    ENCUANTO        reduce using rule 20 (declL -> LISTA ID = lista .)
    PARA            reduce using rule 20 (declL -> LISTA ID = lista .)
    ESCRIBIR        reduce using rule 20 (declL -> LISTA ID = lista .)


state 90

    (21) lista -> [ . ]
    (22) lista -> [ . elementos ]
    (23) elementos -> . elemento
    (24) elementos -> . elementos , elemento
    (25) elemento -> . INT
    (26) elemento -> . FLOAT
    (27) elemento -> . BOOLEANO
    (28) elemento -> . STRING
    (29) elemento -> . ID
    (30) elemento -> . lista
    (21) lista -> . [ ]
    (22) lista -> . [ elementos ]

    ]               shift and go to state 114
    INT             shift and go to state 117
    FLOAT           shift and go to state 118
    BOOLEANO        shift and go to state 119
    STRING          shift and go to state 120
    ID              shift and go to state 121
    [               shift and go to state 90

    elementos                      shift and go to state 115
    elemento                       shift and go to state 116
    lista                          shift and go to state 122

state 91

    (84) readwrite -> ID = LEER ( . STRING ) ;

    STRING          shift and go to state 123


state 92

    (60) fator -> ( exp . )
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo

    )               shift and go to state 97
    +               shift and go to state 63
    -               shift and go to state 64


state 93

    (61) conditions -> SI expL ENTONCES statements . endcondition
    (41) statements -> statements . stat
    (62) endcondition -> . .
    (63) endcondition -> . CASO CONTRARIO statements .
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (61) conditions -> . SI expL ENTONCES statements endcondition
    (79) ciclos -> . ENCUANTO expL HACER statements .
    (80) ciclos -> . PARA expL SIGUIENTE atrib .
    (81) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (82) readwrite -> . ESCRIBIR ( ID ) ;
    (83) readwrite -> . ESCRIBIR ( STRING ) ;
    (84) readwrite -> . ID = LEER ( STRING ) ;

    .               shift and go to state 125
    CASO            shift and go to state 126
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    endcondition                   shift and go to state 124
    stat                           shift and go to state 27
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 94

    (65) expL -> expL OR termoB .
    (67) termoB -> termoB . AND fatorB

    ENTONCES        reduce using rule 65 (expL -> expL OR termoB .)
    OR              reduce using rule 65 (expL -> expL OR termoB .)
    HACER           reduce using rule 65 (expL -> expL OR termoB .)
    SIGUIENTE       reduce using rule 65 (expL -> expL OR termoB .)
    )               reduce using rule 65 (expL -> expL OR termoB .)
    AND             shift and go to state 59


state 95

    (67) termoB -> termoB AND fatorB .

    AND             reduce using rule 67 (termoB -> termoB AND fatorB .)
    ENTONCES        reduce using rule 67 (termoB -> termoB AND fatorB .)
    OR              reduce using rule 67 (termoB -> termoB AND fatorB .)
    HACER           reduce using rule 67 (termoB -> termoB AND fatorB .)
    SIGUIENTE       reduce using rule 67 (termoB -> termoB AND fatorB .)
    )               reduce using rule 67 (termoB -> termoB AND fatorB .)


state 96

    (71) fatorB -> ( expL ) .

    AND             reduce using rule 71 (fatorB -> ( expL ) .)
    ENTONCES        reduce using rule 71 (fatorB -> ( expL ) .)
    OR              reduce using rule 71 (fatorB -> ( expL ) .)
    HACER           reduce using rule 71 (fatorB -> ( expL ) .)
    SIGUIENTE       reduce using rule 71 (fatorB -> ( expL ) .)
    )               reduce using rule 71 (fatorB -> ( expL ) .)


state 97

    (60) fator -> ( exp ) .

    *               reduce using rule 60 (fator -> ( exp ) .)
    /               reduce using rule 60 (fator -> ( exp ) .)
    ^               reduce using rule 60 (fator -> ( exp ) .)
    +               reduce using rule 60 (fator -> ( exp ) .)
    -               reduce using rule 60 (fator -> ( exp ) .)
    >               reduce using rule 60 (fator -> ( exp ) .)
    <               reduce using rule 60 (fator -> ( exp ) .)
    IGUAL           reduce using rule 60 (fator -> ( exp ) .)
    DIFERENTE       reduce using rule 60 (fator -> ( exp ) .)
    ;               reduce using rule 60 (fator -> ( exp ) .)
    )               reduce using rule 60 (fator -> ( exp ) .)
    :               reduce using rule 60 (fator -> ( exp ) .)
    ,               reduce using rule 60 (fator -> ( exp ) .)
    AND             reduce using rule 60 (fator -> ( exp ) .)
    ENTONCES        reduce using rule 60 (fator -> ( exp ) .)
    OR              reduce using rule 60 (fator -> ( exp ) .)
    HACER           reduce using rule 60 (fator -> ( exp ) .)
    SIGUIENTE       reduce using rule 60 (fator -> ( exp ) .)
    .               reduce using rule 60 (fator -> ( exp ) .)


state 98

    (72) condition -> exp op exp .
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo

    AND             reduce using rule 72 (condition -> exp op exp .)
    ENTONCES        reduce using rule 72 (condition -> exp op exp .)
    OR              reduce using rule 72 (condition -> exp op exp .)
    HACER           reduce using rule 72 (condition -> exp op exp .)
    SIGUIENTE       reduce using rule 72 (condition -> exp op exp .)
    )               reduce using rule 72 (condition -> exp op exp .)
    +               shift and go to state 63
    -               shift and go to state 64


state 99

    (50) exp -> exp + termo .
    (53) termo -> termo . * fator
    (54) termo -> termo . / fator
    (55) termo -> termo . ^ fator

    +               reduce using rule 50 (exp -> exp + termo .)
    -               reduce using rule 50 (exp -> exp + termo .)
    >               reduce using rule 50 (exp -> exp + termo .)
    <               reduce using rule 50 (exp -> exp + termo .)
    IGUAL           reduce using rule 50 (exp -> exp + termo .)
    DIFERENTE       reduce using rule 50 (exp -> exp + termo .)
    ;               reduce using rule 50 (exp -> exp + termo .)
    )               reduce using rule 50 (exp -> exp + termo .)
    :               reduce using rule 50 (exp -> exp + termo .)
    ,               reduce using rule 50 (exp -> exp + termo .)
    AND             reduce using rule 50 (exp -> exp + termo .)
    ENTONCES        reduce using rule 50 (exp -> exp + termo .)
    OR              reduce using rule 50 (exp -> exp + termo .)
    HACER           reduce using rule 50 (exp -> exp + termo .)
    SIGUIENTE       reduce using rule 50 (exp -> exp + termo .)
    .               reduce using rule 50 (exp -> exp + termo .)
    *               shift and go to state 69
    /               shift and go to state 70
    ^               shift and go to state 71


state 100

    (51) exp -> exp - termo .
    (53) termo -> termo . * fator
    (54) termo -> termo . / fator
    (55) termo -> termo . ^ fator

    +               reduce using rule 51 (exp -> exp - termo .)
    -               reduce using rule 51 (exp -> exp - termo .)
    >               reduce using rule 51 (exp -> exp - termo .)
    <               reduce using rule 51 (exp -> exp - termo .)
    IGUAL           reduce using rule 51 (exp -> exp - termo .)
    DIFERENTE       reduce using rule 51 (exp -> exp - termo .)
    ;               reduce using rule 51 (exp -> exp - termo .)
    )               reduce using rule 51 (exp -> exp - termo .)
    :               reduce using rule 51 (exp -> exp - termo .)
    ,               reduce using rule 51 (exp -> exp - termo .)
    AND             reduce using rule 51 (exp -> exp - termo .)
    ENTONCES        reduce using rule 51 (exp -> exp - termo .)
    OR              reduce using rule 51 (exp -> exp - termo .)
    HACER           reduce using rule 51 (exp -> exp - termo .)
    SIGUIENTE       reduce using rule 51 (exp -> exp - termo .)
    .               reduce using rule 51 (exp -> exp - termo .)
    *               shift and go to state 69
    /               shift and go to state 70
    ^               shift and go to state 71


state 101

    (77) op -> > IGUAL .

    INT             reduce using rule 77 (op -> > IGUAL .)
    FLOAT           reduce using rule 77 (op -> > IGUAL .)
    ID              reduce using rule 77 (op -> > IGUAL .)
    (               reduce using rule 77 (op -> > IGUAL .)


state 102

    (78) op -> < IGUAL .

    INT             reduce using rule 78 (op -> < IGUAL .)
    FLOAT           reduce using rule 78 (op -> < IGUAL .)
    ID              reduce using rule 78 (op -> < IGUAL .)
    (               reduce using rule 78 (op -> < IGUAL .)


state 103

    (53) termo -> termo * fator .

    *               reduce using rule 53 (termo -> termo * fator .)
    /               reduce using rule 53 (termo -> termo * fator .)
    ^               reduce using rule 53 (termo -> termo * fator .)
    +               reduce using rule 53 (termo -> termo * fator .)
    -               reduce using rule 53 (termo -> termo * fator .)
    >               reduce using rule 53 (termo -> termo * fator .)
    <               reduce using rule 53 (termo -> termo * fator .)
    IGUAL           reduce using rule 53 (termo -> termo * fator .)
    DIFERENTE       reduce using rule 53 (termo -> termo * fator .)
    ;               reduce using rule 53 (termo -> termo * fator .)
    )               reduce using rule 53 (termo -> termo * fator .)
    :               reduce using rule 53 (termo -> termo * fator .)
    ,               reduce using rule 53 (termo -> termo * fator .)
    AND             reduce using rule 53 (termo -> termo * fator .)
    ENTONCES        reduce using rule 53 (termo -> termo * fator .)
    OR              reduce using rule 53 (termo -> termo * fator .)
    HACER           reduce using rule 53 (termo -> termo * fator .)
    SIGUIENTE       reduce using rule 53 (termo -> termo * fator .)
    .               reduce using rule 53 (termo -> termo * fator .)


state 104

    (54) termo -> termo / fator .

    *               reduce using rule 54 (termo -> termo / fator .)
    /               reduce using rule 54 (termo -> termo / fator .)
    ^               reduce using rule 54 (termo -> termo / fator .)
    +               reduce using rule 54 (termo -> termo / fator .)
    -               reduce using rule 54 (termo -> termo / fator .)
    >               reduce using rule 54 (termo -> termo / fator .)
    <               reduce using rule 54 (termo -> termo / fator .)
    IGUAL           reduce using rule 54 (termo -> termo / fator .)
    DIFERENTE       reduce using rule 54 (termo -> termo / fator .)
    ;               reduce using rule 54 (termo -> termo / fator .)
    )               reduce using rule 54 (termo -> termo / fator .)
    :               reduce using rule 54 (termo -> termo / fator .)
    ,               reduce using rule 54 (termo -> termo / fator .)
    AND             reduce using rule 54 (termo -> termo / fator .)
    ENTONCES        reduce using rule 54 (termo -> termo / fator .)
    OR              reduce using rule 54 (termo -> termo / fator .)
    HACER           reduce using rule 54 (termo -> termo / fator .)
    SIGUIENTE       reduce using rule 54 (termo -> termo / fator .)
    .               reduce using rule 54 (termo -> termo / fator .)


state 105

    (55) termo -> termo ^ fator .

    *               reduce using rule 55 (termo -> termo ^ fator .)
    /               reduce using rule 55 (termo -> termo ^ fator .)
    ^               reduce using rule 55 (termo -> termo ^ fator .)
    +               reduce using rule 55 (termo -> termo ^ fator .)
    -               reduce using rule 55 (termo -> termo ^ fator .)
    >               reduce using rule 55 (termo -> termo ^ fator .)
    <               reduce using rule 55 (termo -> termo ^ fator .)
    IGUAL           reduce using rule 55 (termo -> termo ^ fator .)
    DIFERENTE       reduce using rule 55 (termo -> termo ^ fator .)
    ;               reduce using rule 55 (termo -> termo ^ fator .)
    )               reduce using rule 55 (termo -> termo ^ fator .)
    :               reduce using rule 55 (termo -> termo ^ fator .)
    ,               reduce using rule 55 (termo -> termo ^ fator .)
    AND             reduce using rule 55 (termo -> termo ^ fator .)
    ENTONCES        reduce using rule 55 (termo -> termo ^ fator .)
    OR              reduce using rule 55 (termo -> termo ^ fator .)
    HACER           reduce using rule 55 (termo -> termo ^ fator .)
    SIGUIENTE       reduce using rule 55 (termo -> termo ^ fator .)
    .               reduce using rule 55 (termo -> termo ^ fator .)


state 106

    (79) ciclos -> ENCUANTO expL HACER statements . .
    (41) statements -> statements . stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (61) conditions -> . SI expL ENTONCES statements endcondition
    (79) ciclos -> . ENCUANTO expL HACER statements .
    (80) ciclos -> . PARA expL SIGUIENTE atrib .
    (81) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (82) readwrite -> . ESCRIBIR ( ID ) ;
    (83) readwrite -> . ESCRIBIR ( STRING ) ;
    (84) readwrite -> . ID = LEER ( STRING ) ;

    .               shift and go to state 127
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    stat                           shift and go to state 27
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 107

    (80) ciclos -> PARA expL SIGUIENTE atrib . .
    (81) ciclos -> PARA expL SIGUIENTE atrib . HACER statements .

    .               shift and go to state 128
    HACER           shift and go to state 129


state 108

    (46) atrib -> ID . = STRING
    (47) atrib -> ID . = VERDADERO
    (48) atrib -> ID . = FALSO
    (49) atrib -> ID . = exp

    =               shift and go to state 130


state 109

    (82) readwrite -> ESCRIBIR ( ID ) . ;

    ;               shift and go to state 131


state 110

    (83) readwrite -> ESCRIBIR ( STRING ) . ;

    ;               shift and go to state 132


state 111

    (33) parametros -> ID : . tipo
    (12) tipo -> . ENTERO
    (13) tipo -> . REAL
    (14) tipo -> . BOOLEANO
    (15) tipo -> . STR

    ENTERO          shift and go to state 77
    REAL            shift and go to state 78
    BOOLEANO        shift and go to state 79
    STR             shift and go to state 80

    tipo                           shift and go to state 133

state 112

    (31) declF -> FUNCION ID ( parametros ) . : tipo declarations statements DEVUELVE return .

    :               shift and go to state 134


state 113

    (34) parametros -> parametros , . ID : tipo

    ID              shift and go to state 135


state 114

    (21) lista -> [ ] .

    VAR             reduce using rule 21 (lista -> [ ] .)
    FUNCION         reduce using rule 21 (lista -> [ ] .)
    LISTA           reduce using rule 21 (lista -> [ ] .)
    ID              reduce using rule 21 (lista -> [ ] .)
    SI              reduce using rule 21 (lista -> [ ] .)
    ENCUANTO        reduce using rule 21 (lista -> [ ] .)
    PARA            reduce using rule 21 (lista -> [ ] .)
    ESCRIBIR        reduce using rule 21 (lista -> [ ] .)
    ]               reduce using rule 21 (lista -> [ ] .)
    ,               reduce using rule 21 (lista -> [ ] .)


state 115

    (22) lista -> [ elementos . ]
    (24) elementos -> elementos . , elemento

    ]               shift and go to state 136
    ,               shift and go to state 137


state 116

    (23) elementos -> elemento .

    ]               reduce using rule 23 (elementos -> elemento .)
    ,               reduce using rule 23 (elementos -> elemento .)


state 117

    (25) elemento -> INT .

    ]               reduce using rule 25 (elemento -> INT .)
    ,               reduce using rule 25 (elemento -> INT .)


state 118

    (26) elemento -> FLOAT .

    ]               reduce using rule 26 (elemento -> FLOAT .)
    ,               reduce using rule 26 (elemento -> FLOAT .)


state 119

    (27) elemento -> BOOLEANO .

    ]               reduce using rule 27 (elemento -> BOOLEANO .)
    ,               reduce using rule 27 (elemento -> BOOLEANO .)


state 120

    (28) elemento -> STRING .

    ]               reduce using rule 28 (elemento -> STRING .)
    ,               reduce using rule 28 (elemento -> STRING .)


state 121

    (29) elemento -> ID .

    ]               reduce using rule 29 (elemento -> ID .)
    ,               reduce using rule 29 (elemento -> ID .)


state 122

    (30) elemento -> lista .

    ]               reduce using rule 30 (elemento -> lista .)
    ,               reduce using rule 30 (elemento -> lista .)


state 123

    (84) readwrite -> ID = LEER ( STRING . ) ;

    )               shift and go to state 138


state 124

    (61) conditions -> SI expL ENTONCES statements endcondition .

    ID              reduce using rule 61 (conditions -> SI expL ENTONCES statements endcondition .)
    SI              reduce using rule 61 (conditions -> SI expL ENTONCES statements endcondition .)
    ENCUANTO        reduce using rule 61 (conditions -> SI expL ENTONCES statements endcondition .)
    PARA            reduce using rule 61 (conditions -> SI expL ENTONCES statements endcondition .)
    ESCRIBIR        reduce using rule 61 (conditions -> SI expL ENTONCES statements endcondition .)
    $end            reduce using rule 61 (conditions -> SI expL ENTONCES statements endcondition .)
    .               reduce using rule 61 (conditions -> SI expL ENTONCES statements endcondition .)
    CASO            reduce using rule 61 (conditions -> SI expL ENTONCES statements endcondition .)
    DEVUELVE        reduce using rule 61 (conditions -> SI expL ENTONCES statements endcondition .)


state 125

    (62) endcondition -> . .

    ID              reduce using rule 62 (endcondition -> . .)
    SI              reduce using rule 62 (endcondition -> . .)
    ENCUANTO        reduce using rule 62 (endcondition -> . .)
    PARA            reduce using rule 62 (endcondition -> . .)
    ESCRIBIR        reduce using rule 62 (endcondition -> . .)
    $end            reduce using rule 62 (endcondition -> . .)
    .               reduce using rule 62 (endcondition -> . .)
    CASO            reduce using rule 62 (endcondition -> . .)
    DEVUELVE        reduce using rule 62 (endcondition -> . .)


state 126

    (63) endcondition -> CASO . CONTRARIO statements .

    CONTRARIO       shift and go to state 139


state 127

    (79) ciclos -> ENCUANTO expL HACER statements . .

    ID              reduce using rule 79 (ciclos -> ENCUANTO expL HACER statements . .)
    SI              reduce using rule 79 (ciclos -> ENCUANTO expL HACER statements . .)
    ENCUANTO        reduce using rule 79 (ciclos -> ENCUANTO expL HACER statements . .)
    PARA            reduce using rule 79 (ciclos -> ENCUANTO expL HACER statements . .)
    ESCRIBIR        reduce using rule 79 (ciclos -> ENCUANTO expL HACER statements . .)
    $end            reduce using rule 79 (ciclos -> ENCUANTO expL HACER statements . .)
    .               reduce using rule 79 (ciclos -> ENCUANTO expL HACER statements . .)
    CASO            reduce using rule 79 (ciclos -> ENCUANTO expL HACER statements . .)
    DEVUELVE        reduce using rule 79 (ciclos -> ENCUANTO expL HACER statements . .)


state 128

    (80) ciclos -> PARA expL SIGUIENTE atrib . .

    ID              reduce using rule 80 (ciclos -> PARA expL SIGUIENTE atrib . .)
    SI              reduce using rule 80 (ciclos -> PARA expL SIGUIENTE atrib . .)
    ENCUANTO        reduce using rule 80 (ciclos -> PARA expL SIGUIENTE atrib . .)
    PARA            reduce using rule 80 (ciclos -> PARA expL SIGUIENTE atrib . .)
    ESCRIBIR        reduce using rule 80 (ciclos -> PARA expL SIGUIENTE atrib . .)
    $end            reduce using rule 80 (ciclos -> PARA expL SIGUIENTE atrib . .)
    .               reduce using rule 80 (ciclos -> PARA expL SIGUIENTE atrib . .)
    CASO            reduce using rule 80 (ciclos -> PARA expL SIGUIENTE atrib . .)
    DEVUELVE        reduce using rule 80 (ciclos -> PARA expL SIGUIENTE atrib . .)


state 129

    (81) ciclos -> PARA expL SIGUIENTE atrib HACER . statements .
    (40) statements -> . stat
    (41) statements -> . statements stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (61) conditions -> . SI expL ENTONCES statements endcondition
    (79) ciclos -> . ENCUANTO expL HACER statements .
    (80) ciclos -> . PARA expL SIGUIENTE atrib .
    (81) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (82) readwrite -> . ESCRIBIR ( ID ) ;
    (83) readwrite -> . ESCRIBIR ( STRING ) ;
    (84) readwrite -> . ID = LEER ( STRING ) ;

    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    atrib                          shift and go to state 13
    statements                     shift and go to state 140
    stat                           shift and go to state 12
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 130

    (46) atrib -> ID = . STRING
    (47) atrib -> ID = . VERDADERO
    (48) atrib -> ID = . FALSO
    (49) atrib -> ID = . exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo ^ fator
    (56) termo -> . fator
    (57) fator -> . INT
    (58) fator -> . FLOAT
    (59) fator -> . ID
    (60) fator -> . ( exp )

    STRING          shift and go to state 51
    VERDADERO       shift and go to state 52
    FALSO           shift and go to state 53
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 42
    (               shift and go to state 56

    exp                            shift and go to state 54
    termo                          shift and go to state 38
    fator                          shift and go to state 39

state 131

    (82) readwrite -> ESCRIBIR ( ID ) ; .

    ID              reduce using rule 82 (readwrite -> ESCRIBIR ( ID ) ; .)
    SI              reduce using rule 82 (readwrite -> ESCRIBIR ( ID ) ; .)
    ENCUANTO        reduce using rule 82 (readwrite -> ESCRIBIR ( ID ) ; .)
    PARA            reduce using rule 82 (readwrite -> ESCRIBIR ( ID ) ; .)
    ESCRIBIR        reduce using rule 82 (readwrite -> ESCRIBIR ( ID ) ; .)
    $end            reduce using rule 82 (readwrite -> ESCRIBIR ( ID ) ; .)
    .               reduce using rule 82 (readwrite -> ESCRIBIR ( ID ) ; .)
    CASO            reduce using rule 82 (readwrite -> ESCRIBIR ( ID ) ; .)
    DEVUELVE        reduce using rule 82 (readwrite -> ESCRIBIR ( ID ) ; .)


state 132

    (83) readwrite -> ESCRIBIR ( STRING ) ; .

    ID              reduce using rule 83 (readwrite -> ESCRIBIR ( STRING ) ; .)
    SI              reduce using rule 83 (readwrite -> ESCRIBIR ( STRING ) ; .)
    ENCUANTO        reduce using rule 83 (readwrite -> ESCRIBIR ( STRING ) ; .)
    PARA            reduce using rule 83 (readwrite -> ESCRIBIR ( STRING ) ; .)
    ESCRIBIR        reduce using rule 83 (readwrite -> ESCRIBIR ( STRING ) ; .)
    $end            reduce using rule 83 (readwrite -> ESCRIBIR ( STRING ) ; .)
    .               reduce using rule 83 (readwrite -> ESCRIBIR ( STRING ) ; .)
    CASO            reduce using rule 83 (readwrite -> ESCRIBIR ( STRING ) ; .)
    DEVUELVE        reduce using rule 83 (readwrite -> ESCRIBIR ( STRING ) ; .)


state 133

    (33) parametros -> ID : tipo .

    )               reduce using rule 33 (parametros -> ID : tipo .)
    ,               reduce using rule 33 (parametros -> ID : tipo .)


state 134

    (31) declF -> FUNCION ID ( parametros ) : . tipo declarations statements DEVUELVE return .
    (12) tipo -> . ENTERO
    (13) tipo -> . REAL
    (14) tipo -> . BOOLEANO
    (15) tipo -> . STR

    ENTERO          shift and go to state 77
    REAL            shift and go to state 78
    BOOLEANO        shift and go to state 79
    STR             shift and go to state 80

    tipo                           shift and go to state 141

state 135

    (34) parametros -> parametros , ID . : tipo

    :               shift and go to state 142


state 136

    (22) lista -> [ elementos ] .

    VAR             reduce using rule 22 (lista -> [ elementos ] .)
    FUNCION         reduce using rule 22 (lista -> [ elementos ] .)
    LISTA           reduce using rule 22 (lista -> [ elementos ] .)
    ID              reduce using rule 22 (lista -> [ elementos ] .)
    SI              reduce using rule 22 (lista -> [ elementos ] .)
    ENCUANTO        reduce using rule 22 (lista -> [ elementos ] .)
    PARA            reduce using rule 22 (lista -> [ elementos ] .)
    ESCRIBIR        reduce using rule 22 (lista -> [ elementos ] .)
    ]               reduce using rule 22 (lista -> [ elementos ] .)
    ,               reduce using rule 22 (lista -> [ elementos ] .)


state 137

    (24) elementos -> elementos , . elemento
    (25) elemento -> . INT
    (26) elemento -> . FLOAT
    (27) elemento -> . BOOLEANO
    (28) elemento -> . STRING
    (29) elemento -> . ID
    (30) elemento -> . lista
    (21) lista -> . [ ]
    (22) lista -> . [ elementos ]

    INT             shift and go to state 117
    FLOAT           shift and go to state 118
    BOOLEANO        shift and go to state 119
    STRING          shift and go to state 120
    ID              shift and go to state 121
    [               shift and go to state 90

    elemento                       shift and go to state 143
    lista                          shift and go to state 122

state 138

    (84) readwrite -> ID = LEER ( STRING ) . ;

    ;               shift and go to state 144


state 139

    (63) endcondition -> CASO CONTRARIO . statements .
    (40) statements -> . stat
    (41) statements -> . statements stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (61) conditions -> . SI expL ENTONCES statements endcondition
    (79) ciclos -> . ENCUANTO expL HACER statements .
    (80) ciclos -> . PARA expL SIGUIENTE atrib .
    (81) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (82) readwrite -> . ESCRIBIR ( ID ) ;
    (83) readwrite -> . ESCRIBIR ( STRING ) ;
    (84) readwrite -> . ID = LEER ( STRING ) ;

    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    statements                     shift and go to state 145
    stat                           shift and go to state 12
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 140

    (81) ciclos -> PARA expL SIGUIENTE atrib HACER statements . .
    (41) statements -> statements . stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (61) conditions -> . SI expL ENTONCES statements endcondition
    (79) ciclos -> . ENCUANTO expL HACER statements .
    (80) ciclos -> . PARA expL SIGUIENTE atrib .
    (81) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (82) readwrite -> . ESCRIBIR ( ID ) ;
    (83) readwrite -> . ESCRIBIR ( STRING ) ;
    (84) readwrite -> . ID = LEER ( STRING ) ;

    .               shift and go to state 146
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    atrib                          shift and go to state 13
    stat                           shift and go to state 27
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 141

    (31) declF -> FUNCION ID ( parametros ) : tipo . declarations statements DEVUELVE return .
    (2) declarations -> . decl
    (3) declarations -> . declarations decl
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (7) declV -> . VAR vari : tipo
    (31) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (20) declL -> . LISTA ID = lista

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9

    declarations                   shift and go to state 147
    decl                           shift and go to state 3
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6

state 142

    (34) parametros -> parametros , ID : . tipo
    (12) tipo -> . ENTERO
    (13) tipo -> . REAL
    (14) tipo -> . BOOLEANO
    (15) tipo -> . STR

    ENTERO          shift and go to state 77
    REAL            shift and go to state 78
    BOOLEANO        shift and go to state 79
    STR             shift and go to state 80

    tipo                           shift and go to state 148

state 143

    (24) elementos -> elementos , elemento .

    ]               reduce using rule 24 (elementos -> elementos , elemento .)
    ,               reduce using rule 24 (elementos -> elementos , elemento .)


state 144

    (84) readwrite -> ID = LEER ( STRING ) ; .

    ID              reduce using rule 84 (readwrite -> ID = LEER ( STRING ) ; .)
    SI              reduce using rule 84 (readwrite -> ID = LEER ( STRING ) ; .)
    ENCUANTO        reduce using rule 84 (readwrite -> ID = LEER ( STRING ) ; .)
    PARA            reduce using rule 84 (readwrite -> ID = LEER ( STRING ) ; .)
    ESCRIBIR        reduce using rule 84 (readwrite -> ID = LEER ( STRING ) ; .)
    $end            reduce using rule 84 (readwrite -> ID = LEER ( STRING ) ; .)
    .               reduce using rule 84 (readwrite -> ID = LEER ( STRING ) ; .)
    CASO            reduce using rule 84 (readwrite -> ID = LEER ( STRING ) ; .)
    DEVUELVE        reduce using rule 84 (readwrite -> ID = LEER ( STRING ) ; .)


state 145

    (63) endcondition -> CASO CONTRARIO statements . .
    (41) statements -> statements . stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (61) conditions -> . SI expL ENTONCES statements endcondition
    (79) ciclos -> . ENCUANTO expL HACER statements .
    (80) ciclos -> . PARA expL SIGUIENTE atrib .
    (81) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (82) readwrite -> . ESCRIBIR ( ID ) ;
    (83) readwrite -> . ESCRIBIR ( STRING ) ;
    (84) readwrite -> . ID = LEER ( STRING ) ;

    .               shift and go to state 149
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    stat                           shift and go to state 27
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 146

    (81) ciclos -> PARA expL SIGUIENTE atrib HACER statements . .

    ID              reduce using rule 81 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    SI              reduce using rule 81 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    ENCUANTO        reduce using rule 81 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    PARA            reduce using rule 81 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    ESCRIBIR        reduce using rule 81 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    $end            reduce using rule 81 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    .               reduce using rule 81 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    CASO            reduce using rule 81 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    DEVUELVE        reduce using rule 81 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)


state 147

    (31) declF -> FUNCION ID ( parametros ) : tipo declarations . statements DEVUELVE return .
    (3) declarations -> declarations . decl
    (40) statements -> . stat
    (41) statements -> . statements stat
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (7) declV -> . VAR vari : tipo
    (31) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (20) declL -> . LISTA ID = lista
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (61) conditions -> . SI expL ENTONCES statements endcondition
    (79) ciclos -> . ENCUANTO expL HACER statements .
    (80) ciclos -> . PARA expL SIGUIENTE atrib .
    (81) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (82) readwrite -> . ESCRIBIR ( ID ) ;
    (83) readwrite -> . ESCRIBIR ( STRING ) ;
    (84) readwrite -> . ID = LEER ( STRING ) ;

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    statements                     shift and go to state 150
    decl                           shift and go to state 11
    stat                           shift and go to state 12
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 148

    (34) parametros -> parametros , ID : tipo .

    )               reduce using rule 34 (parametros -> parametros , ID : tipo .)
    ,               reduce using rule 34 (parametros -> parametros , ID : tipo .)


state 149

    (63) endcondition -> CASO CONTRARIO statements . .

    ID              reduce using rule 63 (endcondition -> CASO CONTRARIO statements . .)
    SI              reduce using rule 63 (endcondition -> CASO CONTRARIO statements . .)
    ENCUANTO        reduce using rule 63 (endcondition -> CASO CONTRARIO statements . .)
    PARA            reduce using rule 63 (endcondition -> CASO CONTRARIO statements . .)
    ESCRIBIR        reduce using rule 63 (endcondition -> CASO CONTRARIO statements . .)
    $end            reduce using rule 63 (endcondition -> CASO CONTRARIO statements . .)
    .               reduce using rule 63 (endcondition -> CASO CONTRARIO statements . .)
    CASO            reduce using rule 63 (endcondition -> CASO CONTRARIO statements . .)
    DEVUELVE        reduce using rule 63 (endcondition -> CASO CONTRARIO statements . .)


state 150

    (31) declF -> FUNCION ID ( parametros ) : tipo declarations statements . DEVUELVE return .
    (41) statements -> statements . stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (61) conditions -> . SI expL ENTONCES statements endcondition
    (79) ciclos -> . ENCUANTO expL HACER statements .
    (80) ciclos -> . PARA expL SIGUIENTE atrib .
    (81) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (82) readwrite -> . ESCRIBIR ( ID ) ;
    (83) readwrite -> . ESCRIBIR ( STRING ) ;
    (84) readwrite -> . ID = LEER ( STRING ) ;

    DEVUELVE        shift and go to state 151
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    stat                           shift and go to state 27
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 151

    (31) declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE . return .
    (35) return -> . INT
    (36) return -> . ID
    (37) return -> . FLOAT
    (38) return -> . VERDADERO
    (39) return -> . FALSO

    INT             shift and go to state 154
    ID              shift and go to state 152
    FLOAT           shift and go to state 155
    VERDADERO       shift and go to state 156
    FALSO           shift and go to state 157

    return                         shift and go to state 153

state 152

    (36) return -> ID .

    .               reduce using rule 36 (return -> ID .)


state 153

    (31) declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .

    .               shift and go to state 158


state 154

    (35) return -> INT .

    .               reduce using rule 35 (return -> INT .)


state 155

    (37) return -> FLOAT .

    .               reduce using rule 37 (return -> FLOAT .)


state 156

    (38) return -> VERDADERO .

    .               reduce using rule 38 (return -> VERDADERO .)


state 157

    (39) return -> FALSO .

    .               reduce using rule 39 (return -> FALSO .)


state 158

    (31) declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .

    VAR             reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    FUNCION         reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    LISTA           reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    ID              reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    SI              reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    ENCUANTO        reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    PARA            reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    ESCRIBIR        reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)

