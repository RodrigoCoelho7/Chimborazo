Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ENTER
    ESCRIBE
    ESCRIBIR
    LEER
    NADA
    RESTO

Grammar

Rule 0     S' -> prg
Rule 1     prg -> declarations statements
Rule 2     declarations -> decl
Rule 3     declarations -> declarations decl
Rule 4     decl -> declV
Rule 5     decl -> declF
Rule 6     decl -> declL
Rule 7     declV -> VAR ids : tipo
Rule 8     ids -> ID
Rule 9     ids -> ids , ID
Rule 10    tipo -> ENTERO
Rule 11    tipo -> REAL
Rule 12    tipo -> BOOLEANO
Rule 13    declL -> LISTA ID = lista
Rule 14    lista -> [ ]
Rule 15    lista -> [ elementos ]
Rule 16    elementos -> elemento
Rule 17    elementos -> elementos , elemento
Rule 18    elemento -> INT
Rule 19    elemento -> FLOAT
Rule 20    elemento -> BOOLEANO
Rule 21    elemento -> STRING
Rule 22    elemento -> ID
Rule 23    elemento -> lista
Rule 24    declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
Rule 25    parametros -> <empty>
Rule 26    parametros -> ID : tipo
Rule 27    parametros -> parametros , ID : tipo
Rule 28    return -> INT
Rule 29    return -> ID
Rule 30    return -> FLOAT
Rule 31    return -> VERDADERO
Rule 32    return -> FALSO
Rule 33    statements -> stat
Rule 34    statements -> statements stat
Rule 35    stat -> atrib ;
Rule 36    stat -> conditions
Rule 37    stat -> ciclos
Rule 38    atrib -> ID = exp
Rule 39    exp -> exp + termo
Rule 40    exp -> exp - termo
Rule 41    exp -> termo
Rule 42    termo -> termo * fator
Rule 43    termo -> termo / fator
Rule 44    termo -> termo ^ fator
Rule 45    termo -> fator
Rule 46    fator -> INT
Rule 47    fator -> FLOAT
Rule 48    fator -> ID
Rule 49    fator -> ( exp )
Rule 50    conditions -> SI expL ENTONCES statements endcondition
Rule 51    endcondition -> .
Rule 52    endcondition -> CASO CONTRARIO statements .
Rule 53    expL -> termoB
Rule 54    expL -> expL OR termoB
Rule 55    termoB -> fatorB
Rule 56    termoB -> termoB AND fatorB
Rule 57    fatorB -> condition
Rule 58    fatorB -> BOOLEANO
Rule 59    fatorB -> ( expL )
Rule 60    condition -> exp op exp
Rule 61    op -> >
Rule 62    op -> <
Rule 63    op -> IGUAL
Rule 64    op -> DIFERENTE
Rule 65    op -> > IGUAL
Rule 66    op -> < IGUAL
Rule 67    ciclos -> ENCUANTO expL HACER statements .
Rule 68    ciclos -> PARA expL SIGUIENTE atrib .
Rule 69    ciclos -> PARA expL SIGUIENTE atrib HACER statements .

Terminals, with rules where they appear

(                    : 24 49 59
)                    : 24 49 59
*                    : 42
+                    : 39
,                    : 9 17 27
-                    : 40
.                    : 24 51 52 67 68 69
/                    : 43
:                    : 7 24 26 27
;                    : 35
<                    : 62 66
=                    : 13 38
>                    : 61 65
AND                  : 56
BOOLEANO             : 12 20 58
CASO                 : 52
CONTRARIO            : 52
DEVUELVE             : 24
DIFERENTE            : 64
ENCUANTO             : 67
ENTER                : 
ENTERO               : 10
ENTONCES             : 50
ESCRIBE              : 
ESCRIBIR             : 
FALSO                : 32
FLOAT                : 19 30 47
FUNCION              : 24
HACER                : 67 69
ID                   : 8 9 13 22 24 26 27 29 38 48
IGUAL                : 63 65 66
INT                  : 18 28 46
LEER                 : 
LISTA                : 13
NADA                 : 
OR                   : 54
PARA                 : 68 69
REAL                 : 11
RESTO                : 
SI                   : 50
SIGUIENTE            : 68 69
STRING               : 21
VAR                  : 7
VERDADERO            : 31
[                    : 14 15
]                    : 14 15
^                    : 44
error                : 

Nonterminals, with rules where they appear

atrib                : 35 68 69
ciclos               : 37
condition            : 57
conditions           : 36
decl                 : 2 3
declF                : 5
declL                : 6
declV                : 4
declarations         : 1 3 24
elemento             : 16 17
elementos            : 15 17
endcondition         : 50
exp                  : 38 39 40 49 60 60
expL                 : 50 54 59 67 68 69
fator                : 42 43 44 45
fatorB               : 55 56
ids                  : 7 9
lista                : 13 23
op                   : 60
parametros           : 24 27
prg                  : 0
return               : 24
stat                 : 33 34
statements           : 1 24 34 50 52 67 69
termo                : 39 40 41 42 43 44
termoB               : 53 54 56
tipo                 : 7 24 26 27

Parsing method: LALR

state 0

    (0) S' -> . prg
    (1) prg -> . declarations statements
    (2) declarations -> . decl
    (3) declarations -> . declarations decl
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (7) declV -> . VAR ids : tipo
    (24) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (13) declL -> . LISTA ID = lista

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9

    prg                            shift and go to state 1
    declarations                   shift and go to state 2
    decl                           shift and go to state 3
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6

state 1

    (0) S' -> prg .



state 2

    (1) prg -> declarations . statements
    (3) declarations -> declarations . decl
    (33) statements -> . stat
    (34) statements -> . statements stat
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (35) stat -> . atrib ;
    (36) stat -> . conditions
    (37) stat -> . ciclos
    (7) declV -> . VAR ids : tipo
    (24) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (13) declL -> . LISTA ID = lista
    (38) atrib -> . ID = exp
    (50) conditions -> . SI expL ENTONCES statements endcondition
    (67) ciclos -> . ENCUANTO expL HACER statements .
    (68) ciclos -> . PARA expL SIGUIENTE atrib .
    (69) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9
    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    statements                     shift and go to state 10
    decl                           shift and go to state 11
    stat                           shift and go to state 12
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 3

    (2) declarations -> decl .

    VAR             reduce using rule 2 (declarations -> decl .)
    FUNCION         reduce using rule 2 (declarations -> decl .)
    LISTA           reduce using rule 2 (declarations -> decl .)
    ID              reduce using rule 2 (declarations -> decl .)
    SI              reduce using rule 2 (declarations -> decl .)
    ENCUANTO        reduce using rule 2 (declarations -> decl .)
    PARA            reduce using rule 2 (declarations -> decl .)


state 4

    (4) decl -> declV .

    VAR             reduce using rule 4 (decl -> declV .)
    FUNCION         reduce using rule 4 (decl -> declV .)
    LISTA           reduce using rule 4 (decl -> declV .)
    ID              reduce using rule 4 (decl -> declV .)
    SI              reduce using rule 4 (decl -> declV .)
    ENCUANTO        reduce using rule 4 (decl -> declV .)
    PARA            reduce using rule 4 (decl -> declV .)


state 5

    (5) decl -> declF .

    VAR             reduce using rule 5 (decl -> declF .)
    FUNCION         reduce using rule 5 (decl -> declF .)
    LISTA           reduce using rule 5 (decl -> declF .)
    ID              reduce using rule 5 (decl -> declF .)
    SI              reduce using rule 5 (decl -> declF .)
    ENCUANTO        reduce using rule 5 (decl -> declF .)
    PARA            reduce using rule 5 (decl -> declF .)


state 6

    (6) decl -> declL .

    VAR             reduce using rule 6 (decl -> declL .)
    FUNCION         reduce using rule 6 (decl -> declL .)
    LISTA           reduce using rule 6 (decl -> declL .)
    ID              reduce using rule 6 (decl -> declL .)
    SI              reduce using rule 6 (decl -> declL .)
    ENCUANTO        reduce using rule 6 (decl -> declL .)
    PARA            reduce using rule 6 (decl -> declL .)


state 7

    (7) declV -> VAR . ids : tipo
    (8) ids -> . ID
    (9) ids -> . ids , ID

    ID              shift and go to state 21

    ids                            shift and go to state 20

state 8

    (24) declF -> FUNCION . ID ( parametros ) : tipo declarations statements DEVUELVE return .

    ID              shift and go to state 22


state 9

    (13) declL -> LISTA . ID = lista

    ID              shift and go to state 23


state 10

    (1) prg -> declarations statements .
    (34) statements -> statements . stat
    (35) stat -> . atrib ;
    (36) stat -> . conditions
    (37) stat -> . ciclos
    (38) atrib -> . ID = exp
    (50) conditions -> . SI expL ENTONCES statements endcondition
    (67) ciclos -> . ENCUANTO expL HACER statements .
    (68) ciclos -> . PARA expL SIGUIENTE atrib .
    (69) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    $end            reduce using rule 1 (prg -> declarations statements .)
    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    stat                           shift and go to state 24
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 11

    (3) declarations -> declarations decl .

    VAR             reduce using rule 3 (declarations -> declarations decl .)
    FUNCION         reduce using rule 3 (declarations -> declarations decl .)
    LISTA           reduce using rule 3 (declarations -> declarations decl .)
    ID              reduce using rule 3 (declarations -> declarations decl .)
    SI              reduce using rule 3 (declarations -> declarations decl .)
    ENCUANTO        reduce using rule 3 (declarations -> declarations decl .)
    PARA            reduce using rule 3 (declarations -> declarations decl .)


state 12

    (33) statements -> stat .

    ID              reduce using rule 33 (statements -> stat .)
    SI              reduce using rule 33 (statements -> stat .)
    ENCUANTO        reduce using rule 33 (statements -> stat .)
    PARA            reduce using rule 33 (statements -> stat .)
    $end            reduce using rule 33 (statements -> stat .)
    .               reduce using rule 33 (statements -> stat .)
    CASO            reduce using rule 33 (statements -> stat .)
    DEVUELVE        reduce using rule 33 (statements -> stat .)


state 13

    (35) stat -> atrib . ;

    ;               shift and go to state 25


state 14

    (36) stat -> conditions .

    ID              reduce using rule 36 (stat -> conditions .)
    SI              reduce using rule 36 (stat -> conditions .)
    ENCUANTO        reduce using rule 36 (stat -> conditions .)
    PARA            reduce using rule 36 (stat -> conditions .)
    $end            reduce using rule 36 (stat -> conditions .)
    .               reduce using rule 36 (stat -> conditions .)
    CASO            reduce using rule 36 (stat -> conditions .)
    DEVUELVE        reduce using rule 36 (stat -> conditions .)


state 15

    (37) stat -> ciclos .

    ID              reduce using rule 37 (stat -> ciclos .)
    SI              reduce using rule 37 (stat -> ciclos .)
    ENCUANTO        reduce using rule 37 (stat -> ciclos .)
    PARA            reduce using rule 37 (stat -> ciclos .)
    $end            reduce using rule 37 (stat -> ciclos .)
    .               reduce using rule 37 (stat -> ciclos .)
    CASO            reduce using rule 37 (stat -> ciclos .)
    DEVUELVE        reduce using rule 37 (stat -> ciclos .)


state 16

    (38) atrib -> ID . = exp

    =               shift and go to state 26


state 17

    (50) conditions -> SI . expL ENTONCES statements endcondition
    (53) expL -> . termoB
    (54) expL -> . expL OR termoB
    (55) termoB -> . fatorB
    (56) termoB -> . termoB AND fatorB
    (57) fatorB -> . condition
    (58) fatorB -> . BOOLEANO
    (59) fatorB -> . ( expL )
    (60) condition -> . exp op exp
    (39) exp -> . exp + termo
    (40) exp -> . exp - termo
    (41) exp -> . termo
    (42) termo -> . termo * fator
    (43) termo -> . termo / fator
    (44) termo -> . termo ^ fator
    (45) termo -> . fator
    (46) fator -> . INT
    (47) fator -> . FLOAT
    (48) fator -> . ID
    (49) fator -> . ( exp )

    BOOLEANO        shift and go to state 31
    (               shift and go to state 32
    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38

    expL                           shift and go to state 27
    termoB                         shift and go to state 28
    fatorB                         shift and go to state 29
    condition                      shift and go to state 30
    exp                            shift and go to state 33
    termo                          shift and go to state 34
    fator                          shift and go to state 35

state 18

    (67) ciclos -> ENCUANTO . expL HACER statements .
    (53) expL -> . termoB
    (54) expL -> . expL OR termoB
    (55) termoB -> . fatorB
    (56) termoB -> . termoB AND fatorB
    (57) fatorB -> . condition
    (58) fatorB -> . BOOLEANO
    (59) fatorB -> . ( expL )
    (60) condition -> . exp op exp
    (39) exp -> . exp + termo
    (40) exp -> . exp - termo
    (41) exp -> . termo
    (42) termo -> . termo * fator
    (43) termo -> . termo / fator
    (44) termo -> . termo ^ fator
    (45) termo -> . fator
    (46) fator -> . INT
    (47) fator -> . FLOAT
    (48) fator -> . ID
    (49) fator -> . ( exp )

    BOOLEANO        shift and go to state 31
    (               shift and go to state 32
    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38

    expL                           shift and go to state 39
    termoB                         shift and go to state 28
    fatorB                         shift and go to state 29
    condition                      shift and go to state 30
    exp                            shift and go to state 33
    termo                          shift and go to state 34
    fator                          shift and go to state 35

state 19

    (68) ciclos -> PARA . expL SIGUIENTE atrib .
    (69) ciclos -> PARA . expL SIGUIENTE atrib HACER statements .
    (53) expL -> . termoB
    (54) expL -> . expL OR termoB
    (55) termoB -> . fatorB
    (56) termoB -> . termoB AND fatorB
    (57) fatorB -> . condition
    (58) fatorB -> . BOOLEANO
    (59) fatorB -> . ( expL )
    (60) condition -> . exp op exp
    (39) exp -> . exp + termo
    (40) exp -> . exp - termo
    (41) exp -> . termo
    (42) termo -> . termo * fator
    (43) termo -> . termo / fator
    (44) termo -> . termo ^ fator
    (45) termo -> . fator
    (46) fator -> . INT
    (47) fator -> . FLOAT
    (48) fator -> . ID
    (49) fator -> . ( exp )

    BOOLEANO        shift and go to state 31
    (               shift and go to state 32
    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38

    expL                           shift and go to state 40
    termoB                         shift and go to state 28
    fatorB                         shift and go to state 29
    condition                      shift and go to state 30
    exp                            shift and go to state 33
    termo                          shift and go to state 34
    fator                          shift and go to state 35

state 20

    (7) declV -> VAR ids . : tipo
    (9) ids -> ids . , ID

    :               shift and go to state 41
    ,               shift and go to state 42


state 21

    (8) ids -> ID .

    :               reduce using rule 8 (ids -> ID .)
    ,               reduce using rule 8 (ids -> ID .)


state 22

    (24) declF -> FUNCION ID . ( parametros ) : tipo declarations statements DEVUELVE return .

    (               shift and go to state 43


state 23

    (13) declL -> LISTA ID . = lista

    =               shift and go to state 44


state 24

    (34) statements -> statements stat .

    ID              reduce using rule 34 (statements -> statements stat .)
    SI              reduce using rule 34 (statements -> statements stat .)
    ENCUANTO        reduce using rule 34 (statements -> statements stat .)
    PARA            reduce using rule 34 (statements -> statements stat .)
    $end            reduce using rule 34 (statements -> statements stat .)
    .               reduce using rule 34 (statements -> statements stat .)
    CASO            reduce using rule 34 (statements -> statements stat .)
    DEVUELVE        reduce using rule 34 (statements -> statements stat .)


state 25

    (35) stat -> atrib ; .

    ID              reduce using rule 35 (stat -> atrib ; .)
    SI              reduce using rule 35 (stat -> atrib ; .)
    ENCUANTO        reduce using rule 35 (stat -> atrib ; .)
    PARA            reduce using rule 35 (stat -> atrib ; .)
    $end            reduce using rule 35 (stat -> atrib ; .)
    .               reduce using rule 35 (stat -> atrib ; .)
    CASO            reduce using rule 35 (stat -> atrib ; .)
    DEVUELVE        reduce using rule 35 (stat -> atrib ; .)


state 26

    (38) atrib -> ID = . exp
    (39) exp -> . exp + termo
    (40) exp -> . exp - termo
    (41) exp -> . termo
    (42) termo -> . termo * fator
    (43) termo -> . termo / fator
    (44) termo -> . termo ^ fator
    (45) termo -> . fator
    (46) fator -> . INT
    (47) fator -> . FLOAT
    (48) fator -> . ID
    (49) fator -> . ( exp )

    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38
    (               shift and go to state 46

    exp                            shift and go to state 45
    termo                          shift and go to state 34
    fator                          shift and go to state 35

state 27

    (50) conditions -> SI expL . ENTONCES statements endcondition
    (54) expL -> expL . OR termoB

    ENTONCES        shift and go to state 47
    OR              shift and go to state 48


state 28

    (53) expL -> termoB .
    (56) termoB -> termoB . AND fatorB

    ENTONCES        reduce using rule 53 (expL -> termoB .)
    OR              reduce using rule 53 (expL -> termoB .)
    HACER           reduce using rule 53 (expL -> termoB .)
    SIGUIENTE       reduce using rule 53 (expL -> termoB .)
    )               reduce using rule 53 (expL -> termoB .)
    AND             shift and go to state 49


state 29

    (55) termoB -> fatorB .

    AND             reduce using rule 55 (termoB -> fatorB .)
    ENTONCES        reduce using rule 55 (termoB -> fatorB .)
    OR              reduce using rule 55 (termoB -> fatorB .)
    HACER           reduce using rule 55 (termoB -> fatorB .)
    SIGUIENTE       reduce using rule 55 (termoB -> fatorB .)
    )               reduce using rule 55 (termoB -> fatorB .)


state 30

    (57) fatorB -> condition .

    AND             reduce using rule 57 (fatorB -> condition .)
    ENTONCES        reduce using rule 57 (fatorB -> condition .)
    OR              reduce using rule 57 (fatorB -> condition .)
    HACER           reduce using rule 57 (fatorB -> condition .)
    SIGUIENTE       reduce using rule 57 (fatorB -> condition .)
    )               reduce using rule 57 (fatorB -> condition .)


state 31

    (58) fatorB -> BOOLEANO .

    AND             reduce using rule 58 (fatorB -> BOOLEANO .)
    ENTONCES        reduce using rule 58 (fatorB -> BOOLEANO .)
    OR              reduce using rule 58 (fatorB -> BOOLEANO .)
    HACER           reduce using rule 58 (fatorB -> BOOLEANO .)
    SIGUIENTE       reduce using rule 58 (fatorB -> BOOLEANO .)
    )               reduce using rule 58 (fatorB -> BOOLEANO .)


state 32

    (59) fatorB -> ( . expL )
    (49) fator -> ( . exp )
    (53) expL -> . termoB
    (54) expL -> . expL OR termoB
    (39) exp -> . exp + termo
    (40) exp -> . exp - termo
    (41) exp -> . termo
    (55) termoB -> . fatorB
    (56) termoB -> . termoB AND fatorB
    (42) termo -> . termo * fator
    (43) termo -> . termo / fator
    (44) termo -> . termo ^ fator
    (45) termo -> . fator
    (57) fatorB -> . condition
    (58) fatorB -> . BOOLEANO
    (59) fatorB -> . ( expL )
    (46) fator -> . INT
    (47) fator -> . FLOAT
    (48) fator -> . ID
    (49) fator -> . ( exp )
    (60) condition -> . exp op exp

    BOOLEANO        shift and go to state 31
    (               shift and go to state 32
    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38

    expL                           shift and go to state 50
    exp                            shift and go to state 51
    termoB                         shift and go to state 28
    termo                          shift and go to state 34
    fatorB                         shift and go to state 29
    fator                          shift and go to state 35
    condition                      shift and go to state 30

state 33

    (60) condition -> exp . op exp
    (39) exp -> exp . + termo
    (40) exp -> exp . - termo
    (61) op -> . >
    (62) op -> . <
    (63) op -> . IGUAL
    (64) op -> . DIFERENTE
    (65) op -> . > IGUAL
    (66) op -> . < IGUAL

    +               shift and go to state 53
    -               shift and go to state 54
    >               shift and go to state 55
    <               shift and go to state 56
    IGUAL           shift and go to state 57
    DIFERENTE       shift and go to state 58

    op                             shift and go to state 52

state 34

    (41) exp -> termo .
    (42) termo -> termo . * fator
    (43) termo -> termo . / fator
    (44) termo -> termo . ^ fator

    +               reduce using rule 41 (exp -> termo .)
    -               reduce using rule 41 (exp -> termo .)
    >               reduce using rule 41 (exp -> termo .)
    <               reduce using rule 41 (exp -> termo .)
    IGUAL           reduce using rule 41 (exp -> termo .)
    DIFERENTE       reduce using rule 41 (exp -> termo .)
    ;               reduce using rule 41 (exp -> termo .)
    .               reduce using rule 41 (exp -> termo .)
    HACER           reduce using rule 41 (exp -> termo .)
    )               reduce using rule 41 (exp -> termo .)
    AND             reduce using rule 41 (exp -> termo .)
    ENTONCES        reduce using rule 41 (exp -> termo .)
    OR              reduce using rule 41 (exp -> termo .)
    SIGUIENTE       reduce using rule 41 (exp -> termo .)
    *               shift and go to state 59
    /               shift and go to state 60
    ^               shift and go to state 61


state 35

    (45) termo -> fator .

    *               reduce using rule 45 (termo -> fator .)
    /               reduce using rule 45 (termo -> fator .)
    ^               reduce using rule 45 (termo -> fator .)
    +               reduce using rule 45 (termo -> fator .)
    -               reduce using rule 45 (termo -> fator .)
    >               reduce using rule 45 (termo -> fator .)
    <               reduce using rule 45 (termo -> fator .)
    IGUAL           reduce using rule 45 (termo -> fator .)
    DIFERENTE       reduce using rule 45 (termo -> fator .)
    ;               reduce using rule 45 (termo -> fator .)
    .               reduce using rule 45 (termo -> fator .)
    HACER           reduce using rule 45 (termo -> fator .)
    )               reduce using rule 45 (termo -> fator .)
    AND             reduce using rule 45 (termo -> fator .)
    ENTONCES        reduce using rule 45 (termo -> fator .)
    OR              reduce using rule 45 (termo -> fator .)
    SIGUIENTE       reduce using rule 45 (termo -> fator .)


state 36

    (46) fator -> INT .

    *               reduce using rule 46 (fator -> INT .)
    /               reduce using rule 46 (fator -> INT .)
    ^               reduce using rule 46 (fator -> INT .)
    +               reduce using rule 46 (fator -> INT .)
    -               reduce using rule 46 (fator -> INT .)
    >               reduce using rule 46 (fator -> INT .)
    <               reduce using rule 46 (fator -> INT .)
    IGUAL           reduce using rule 46 (fator -> INT .)
    DIFERENTE       reduce using rule 46 (fator -> INT .)
    ;               reduce using rule 46 (fator -> INT .)
    .               reduce using rule 46 (fator -> INT .)
    HACER           reduce using rule 46 (fator -> INT .)
    )               reduce using rule 46 (fator -> INT .)
    AND             reduce using rule 46 (fator -> INT .)
    ENTONCES        reduce using rule 46 (fator -> INT .)
    OR              reduce using rule 46 (fator -> INT .)
    SIGUIENTE       reduce using rule 46 (fator -> INT .)


state 37

    (47) fator -> FLOAT .

    *               reduce using rule 47 (fator -> FLOAT .)
    /               reduce using rule 47 (fator -> FLOAT .)
    ^               reduce using rule 47 (fator -> FLOAT .)
    +               reduce using rule 47 (fator -> FLOAT .)
    -               reduce using rule 47 (fator -> FLOAT .)
    >               reduce using rule 47 (fator -> FLOAT .)
    <               reduce using rule 47 (fator -> FLOAT .)
    IGUAL           reduce using rule 47 (fator -> FLOAT .)
    DIFERENTE       reduce using rule 47 (fator -> FLOAT .)
    ;               reduce using rule 47 (fator -> FLOAT .)
    .               reduce using rule 47 (fator -> FLOAT .)
    HACER           reduce using rule 47 (fator -> FLOAT .)
    )               reduce using rule 47 (fator -> FLOAT .)
    AND             reduce using rule 47 (fator -> FLOAT .)
    ENTONCES        reduce using rule 47 (fator -> FLOAT .)
    OR              reduce using rule 47 (fator -> FLOAT .)
    SIGUIENTE       reduce using rule 47 (fator -> FLOAT .)


state 38

    (48) fator -> ID .

    *               reduce using rule 48 (fator -> ID .)
    /               reduce using rule 48 (fator -> ID .)
    ^               reduce using rule 48 (fator -> ID .)
    +               reduce using rule 48 (fator -> ID .)
    -               reduce using rule 48 (fator -> ID .)
    >               reduce using rule 48 (fator -> ID .)
    <               reduce using rule 48 (fator -> ID .)
    IGUAL           reduce using rule 48 (fator -> ID .)
    DIFERENTE       reduce using rule 48 (fator -> ID .)
    ;               reduce using rule 48 (fator -> ID .)
    .               reduce using rule 48 (fator -> ID .)
    HACER           reduce using rule 48 (fator -> ID .)
    )               reduce using rule 48 (fator -> ID .)
    AND             reduce using rule 48 (fator -> ID .)
    ENTONCES        reduce using rule 48 (fator -> ID .)
    OR              reduce using rule 48 (fator -> ID .)
    SIGUIENTE       reduce using rule 48 (fator -> ID .)


state 39

    (67) ciclos -> ENCUANTO expL . HACER statements .
    (54) expL -> expL . OR termoB

    HACER           shift and go to state 62
    OR              shift and go to state 48


state 40

    (68) ciclos -> PARA expL . SIGUIENTE atrib .
    (69) ciclos -> PARA expL . SIGUIENTE atrib HACER statements .
    (54) expL -> expL . OR termoB

    SIGUIENTE       shift and go to state 63
    OR              shift and go to state 48


state 41

    (7) declV -> VAR ids : . tipo
    (10) tipo -> . ENTERO
    (11) tipo -> . REAL
    (12) tipo -> . BOOLEANO

    ENTERO          shift and go to state 65
    REAL            shift and go to state 66
    BOOLEANO        shift and go to state 67

    tipo                           shift and go to state 64

state 42

    (9) ids -> ids , . ID

    ID              shift and go to state 68


state 43

    (24) declF -> FUNCION ID ( . parametros ) : tipo declarations statements DEVUELVE return .
    (25) parametros -> .
    (26) parametros -> . ID : tipo
    (27) parametros -> . parametros , ID : tipo

    )               reduce using rule 25 (parametros -> .)
    ,               reduce using rule 25 (parametros -> .)
    ID              shift and go to state 69

    parametros                     shift and go to state 70

state 44

    (13) declL -> LISTA ID = . lista
    (14) lista -> . [ ]
    (15) lista -> . [ elementos ]

    [               shift and go to state 72

    lista                          shift and go to state 71

state 45

    (38) atrib -> ID = exp .
    (39) exp -> exp . + termo
    (40) exp -> exp . - termo

    ;               reduce using rule 38 (atrib -> ID = exp .)
    .               reduce using rule 38 (atrib -> ID = exp .)
    HACER           reduce using rule 38 (atrib -> ID = exp .)
    +               shift and go to state 53
    -               shift and go to state 54


state 46

    (49) fator -> ( . exp )
    (39) exp -> . exp + termo
    (40) exp -> . exp - termo
    (41) exp -> . termo
    (42) termo -> . termo * fator
    (43) termo -> . termo / fator
    (44) termo -> . termo ^ fator
    (45) termo -> . fator
    (46) fator -> . INT
    (47) fator -> . FLOAT
    (48) fator -> . ID
    (49) fator -> . ( exp )

    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38
    (               shift and go to state 46

    exp                            shift and go to state 73
    termo                          shift and go to state 34
    fator                          shift and go to state 35

state 47

    (50) conditions -> SI expL ENTONCES . statements endcondition
    (33) statements -> . stat
    (34) statements -> . statements stat
    (35) stat -> . atrib ;
    (36) stat -> . conditions
    (37) stat -> . ciclos
    (38) atrib -> . ID = exp
    (50) conditions -> . SI expL ENTONCES statements endcondition
    (67) ciclos -> . ENCUANTO expL HACER statements .
    (68) ciclos -> . PARA expL SIGUIENTE atrib .
    (69) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    statements                     shift and go to state 74
    stat                           shift and go to state 12
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 48

    (54) expL -> expL OR . termoB
    (55) termoB -> . fatorB
    (56) termoB -> . termoB AND fatorB
    (57) fatorB -> . condition
    (58) fatorB -> . BOOLEANO
    (59) fatorB -> . ( expL )
    (60) condition -> . exp op exp
    (39) exp -> . exp + termo
    (40) exp -> . exp - termo
    (41) exp -> . termo
    (42) termo -> . termo * fator
    (43) termo -> . termo / fator
    (44) termo -> . termo ^ fator
    (45) termo -> . fator
    (46) fator -> . INT
    (47) fator -> . FLOAT
    (48) fator -> . ID
    (49) fator -> . ( exp )

    BOOLEANO        shift and go to state 31
    (               shift and go to state 32
    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38

    termoB                         shift and go to state 75
    fatorB                         shift and go to state 29
    condition                      shift and go to state 30
    exp                            shift and go to state 33
    termo                          shift and go to state 34
    fator                          shift and go to state 35

state 49

    (56) termoB -> termoB AND . fatorB
    (57) fatorB -> . condition
    (58) fatorB -> . BOOLEANO
    (59) fatorB -> . ( expL )
    (60) condition -> . exp op exp
    (39) exp -> . exp + termo
    (40) exp -> . exp - termo
    (41) exp -> . termo
    (42) termo -> . termo * fator
    (43) termo -> . termo / fator
    (44) termo -> . termo ^ fator
    (45) termo -> . fator
    (46) fator -> . INT
    (47) fator -> . FLOAT
    (48) fator -> . ID
    (49) fator -> . ( exp )

    BOOLEANO        shift and go to state 31
    (               shift and go to state 32
    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38

    fatorB                         shift and go to state 76
    condition                      shift and go to state 30
    exp                            shift and go to state 33
    termo                          shift and go to state 34
    fator                          shift and go to state 35

state 50

    (59) fatorB -> ( expL . )
    (54) expL -> expL . OR termoB

    )               shift and go to state 77
    OR              shift and go to state 48


state 51

    (49) fator -> ( exp . )
    (39) exp -> exp . + termo
    (40) exp -> exp . - termo
    (60) condition -> exp . op exp
    (61) op -> . >
    (62) op -> . <
    (63) op -> . IGUAL
    (64) op -> . DIFERENTE
    (65) op -> . > IGUAL
    (66) op -> . < IGUAL

    )               shift and go to state 78
    +               shift and go to state 53
    -               shift and go to state 54
    >               shift and go to state 55
    <               shift and go to state 56
    IGUAL           shift and go to state 57
    DIFERENTE       shift and go to state 58

    op                             shift and go to state 52

state 52

    (60) condition -> exp op . exp
    (39) exp -> . exp + termo
    (40) exp -> . exp - termo
    (41) exp -> . termo
    (42) termo -> . termo * fator
    (43) termo -> . termo / fator
    (44) termo -> . termo ^ fator
    (45) termo -> . fator
    (46) fator -> . INT
    (47) fator -> . FLOAT
    (48) fator -> . ID
    (49) fator -> . ( exp )

    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38
    (               shift and go to state 46

    exp                            shift and go to state 79
    termo                          shift and go to state 34
    fator                          shift and go to state 35

state 53

    (39) exp -> exp + . termo
    (42) termo -> . termo * fator
    (43) termo -> . termo / fator
    (44) termo -> . termo ^ fator
    (45) termo -> . fator
    (46) fator -> . INT
    (47) fator -> . FLOAT
    (48) fator -> . ID
    (49) fator -> . ( exp )

    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38
    (               shift and go to state 46

    termo                          shift and go to state 80
    fator                          shift and go to state 35

state 54

    (40) exp -> exp - . termo
    (42) termo -> . termo * fator
    (43) termo -> . termo / fator
    (44) termo -> . termo ^ fator
    (45) termo -> . fator
    (46) fator -> . INT
    (47) fator -> . FLOAT
    (48) fator -> . ID
    (49) fator -> . ( exp )

    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38
    (               shift and go to state 46

    termo                          shift and go to state 81
    fator                          shift and go to state 35

state 55

    (61) op -> > .
    (65) op -> > . IGUAL

    INT             reduce using rule 61 (op -> > .)
    FLOAT           reduce using rule 61 (op -> > .)
    ID              reduce using rule 61 (op -> > .)
    (               reduce using rule 61 (op -> > .)
    IGUAL           shift and go to state 82


state 56

    (62) op -> < .
    (66) op -> < . IGUAL

    INT             reduce using rule 62 (op -> < .)
    FLOAT           reduce using rule 62 (op -> < .)
    ID              reduce using rule 62 (op -> < .)
    (               reduce using rule 62 (op -> < .)
    IGUAL           shift and go to state 83


state 57

    (63) op -> IGUAL .

    INT             reduce using rule 63 (op -> IGUAL .)
    FLOAT           reduce using rule 63 (op -> IGUAL .)
    ID              reduce using rule 63 (op -> IGUAL .)
    (               reduce using rule 63 (op -> IGUAL .)


state 58

    (64) op -> DIFERENTE .

    INT             reduce using rule 64 (op -> DIFERENTE .)
    FLOAT           reduce using rule 64 (op -> DIFERENTE .)
    ID              reduce using rule 64 (op -> DIFERENTE .)
    (               reduce using rule 64 (op -> DIFERENTE .)


state 59

    (42) termo -> termo * . fator
    (46) fator -> . INT
    (47) fator -> . FLOAT
    (48) fator -> . ID
    (49) fator -> . ( exp )

    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38
    (               shift and go to state 46

    fator                          shift and go to state 84

state 60

    (43) termo -> termo / . fator
    (46) fator -> . INT
    (47) fator -> . FLOAT
    (48) fator -> . ID
    (49) fator -> . ( exp )

    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38
    (               shift and go to state 46

    fator                          shift and go to state 85

state 61

    (44) termo -> termo ^ . fator
    (46) fator -> . INT
    (47) fator -> . FLOAT
    (48) fator -> . ID
    (49) fator -> . ( exp )

    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    ID              shift and go to state 38
    (               shift and go to state 46

    fator                          shift and go to state 86

state 62

    (67) ciclos -> ENCUANTO expL HACER . statements .
    (33) statements -> . stat
    (34) statements -> . statements stat
    (35) stat -> . atrib ;
    (36) stat -> . conditions
    (37) stat -> . ciclos
    (38) atrib -> . ID = exp
    (50) conditions -> . SI expL ENTONCES statements endcondition
    (67) ciclos -> . ENCUANTO expL HACER statements .
    (68) ciclos -> . PARA expL SIGUIENTE atrib .
    (69) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    statements                     shift and go to state 87
    stat                           shift and go to state 12
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 63

    (68) ciclos -> PARA expL SIGUIENTE . atrib .
    (69) ciclos -> PARA expL SIGUIENTE . atrib HACER statements .
    (38) atrib -> . ID = exp

    ID              shift and go to state 16

    atrib                          shift and go to state 88

state 64

    (7) declV -> VAR ids : tipo .

    VAR             reduce using rule 7 (declV -> VAR ids : tipo .)
    FUNCION         reduce using rule 7 (declV -> VAR ids : tipo .)
    LISTA           reduce using rule 7 (declV -> VAR ids : tipo .)
    ID              reduce using rule 7 (declV -> VAR ids : tipo .)
    SI              reduce using rule 7 (declV -> VAR ids : tipo .)
    ENCUANTO        reduce using rule 7 (declV -> VAR ids : tipo .)
    PARA            reduce using rule 7 (declV -> VAR ids : tipo .)


state 65

    (10) tipo -> ENTERO .

    VAR             reduce using rule 10 (tipo -> ENTERO .)
    FUNCION         reduce using rule 10 (tipo -> ENTERO .)
    LISTA           reduce using rule 10 (tipo -> ENTERO .)
    ID              reduce using rule 10 (tipo -> ENTERO .)
    SI              reduce using rule 10 (tipo -> ENTERO .)
    ENCUANTO        reduce using rule 10 (tipo -> ENTERO .)
    PARA            reduce using rule 10 (tipo -> ENTERO .)
    )               reduce using rule 10 (tipo -> ENTERO .)
    ,               reduce using rule 10 (tipo -> ENTERO .)


state 66

    (11) tipo -> REAL .

    VAR             reduce using rule 11 (tipo -> REAL .)
    FUNCION         reduce using rule 11 (tipo -> REAL .)
    LISTA           reduce using rule 11 (tipo -> REAL .)
    ID              reduce using rule 11 (tipo -> REAL .)
    SI              reduce using rule 11 (tipo -> REAL .)
    ENCUANTO        reduce using rule 11 (tipo -> REAL .)
    PARA            reduce using rule 11 (tipo -> REAL .)
    )               reduce using rule 11 (tipo -> REAL .)
    ,               reduce using rule 11 (tipo -> REAL .)


state 67

    (12) tipo -> BOOLEANO .

    VAR             reduce using rule 12 (tipo -> BOOLEANO .)
    FUNCION         reduce using rule 12 (tipo -> BOOLEANO .)
    LISTA           reduce using rule 12 (tipo -> BOOLEANO .)
    ID              reduce using rule 12 (tipo -> BOOLEANO .)
    SI              reduce using rule 12 (tipo -> BOOLEANO .)
    ENCUANTO        reduce using rule 12 (tipo -> BOOLEANO .)
    PARA            reduce using rule 12 (tipo -> BOOLEANO .)
    )               reduce using rule 12 (tipo -> BOOLEANO .)
    ,               reduce using rule 12 (tipo -> BOOLEANO .)


state 68

    (9) ids -> ids , ID .

    :               reduce using rule 9 (ids -> ids , ID .)
    ,               reduce using rule 9 (ids -> ids , ID .)


state 69

    (26) parametros -> ID . : tipo

    :               shift and go to state 89


state 70

    (24) declF -> FUNCION ID ( parametros . ) : tipo declarations statements DEVUELVE return .
    (27) parametros -> parametros . , ID : tipo

    )               shift and go to state 90
    ,               shift and go to state 91


state 71

    (13) declL -> LISTA ID = lista .

    VAR             reduce using rule 13 (declL -> LISTA ID = lista .)
    FUNCION         reduce using rule 13 (declL -> LISTA ID = lista .)
    LISTA           reduce using rule 13 (declL -> LISTA ID = lista .)
    ID              reduce using rule 13 (declL -> LISTA ID = lista .)
    SI              reduce using rule 13 (declL -> LISTA ID = lista .)
    ENCUANTO        reduce using rule 13 (declL -> LISTA ID = lista .)
    PARA            reduce using rule 13 (declL -> LISTA ID = lista .)


state 72

    (14) lista -> [ . ]
    (15) lista -> [ . elementos ]
    (16) elementos -> . elemento
    (17) elementos -> . elementos , elemento
    (18) elemento -> . INT
    (19) elemento -> . FLOAT
    (20) elemento -> . BOOLEANO
    (21) elemento -> . STRING
    (22) elemento -> . ID
    (23) elemento -> . lista
    (14) lista -> . [ ]
    (15) lista -> . [ elementos ]

    ]               shift and go to state 92
    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    BOOLEANO        shift and go to state 97
    STRING          shift and go to state 98
    ID              shift and go to state 99
    [               shift and go to state 72

    elementos                      shift and go to state 93
    elemento                       shift and go to state 94
    lista                          shift and go to state 100

state 73

    (49) fator -> ( exp . )
    (39) exp -> exp . + termo
    (40) exp -> exp . - termo

    )               shift and go to state 78
    +               shift and go to state 53
    -               shift and go to state 54


state 74

    (50) conditions -> SI expL ENTONCES statements . endcondition
    (34) statements -> statements . stat
    (51) endcondition -> . .
    (52) endcondition -> . CASO CONTRARIO statements .
    (35) stat -> . atrib ;
    (36) stat -> . conditions
    (37) stat -> . ciclos
    (38) atrib -> . ID = exp
    (50) conditions -> . SI expL ENTONCES statements endcondition
    (67) ciclos -> . ENCUANTO expL HACER statements .
    (68) ciclos -> . PARA expL SIGUIENTE atrib .
    (69) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    .               shift and go to state 102
    CASO            shift and go to state 103
    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    endcondition                   shift and go to state 101
    stat                           shift and go to state 24
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 75

    (54) expL -> expL OR termoB .
    (56) termoB -> termoB . AND fatorB

    ENTONCES        reduce using rule 54 (expL -> expL OR termoB .)
    OR              reduce using rule 54 (expL -> expL OR termoB .)
    HACER           reduce using rule 54 (expL -> expL OR termoB .)
    SIGUIENTE       reduce using rule 54 (expL -> expL OR termoB .)
    )               reduce using rule 54 (expL -> expL OR termoB .)
    AND             shift and go to state 49


state 76

    (56) termoB -> termoB AND fatorB .

    AND             reduce using rule 56 (termoB -> termoB AND fatorB .)
    ENTONCES        reduce using rule 56 (termoB -> termoB AND fatorB .)
    OR              reduce using rule 56 (termoB -> termoB AND fatorB .)
    HACER           reduce using rule 56 (termoB -> termoB AND fatorB .)
    SIGUIENTE       reduce using rule 56 (termoB -> termoB AND fatorB .)
    )               reduce using rule 56 (termoB -> termoB AND fatorB .)


state 77

    (59) fatorB -> ( expL ) .

    AND             reduce using rule 59 (fatorB -> ( expL ) .)
    ENTONCES        reduce using rule 59 (fatorB -> ( expL ) .)
    OR              reduce using rule 59 (fatorB -> ( expL ) .)
    HACER           reduce using rule 59 (fatorB -> ( expL ) .)
    SIGUIENTE       reduce using rule 59 (fatorB -> ( expL ) .)
    )               reduce using rule 59 (fatorB -> ( expL ) .)


state 78

    (49) fator -> ( exp ) .

    *               reduce using rule 49 (fator -> ( exp ) .)
    /               reduce using rule 49 (fator -> ( exp ) .)
    ^               reduce using rule 49 (fator -> ( exp ) .)
    +               reduce using rule 49 (fator -> ( exp ) .)
    -               reduce using rule 49 (fator -> ( exp ) .)
    >               reduce using rule 49 (fator -> ( exp ) .)
    <               reduce using rule 49 (fator -> ( exp ) .)
    IGUAL           reduce using rule 49 (fator -> ( exp ) .)
    DIFERENTE       reduce using rule 49 (fator -> ( exp ) .)
    ;               reduce using rule 49 (fator -> ( exp ) .)
    .               reduce using rule 49 (fator -> ( exp ) .)
    HACER           reduce using rule 49 (fator -> ( exp ) .)
    )               reduce using rule 49 (fator -> ( exp ) .)
    AND             reduce using rule 49 (fator -> ( exp ) .)
    ENTONCES        reduce using rule 49 (fator -> ( exp ) .)
    OR              reduce using rule 49 (fator -> ( exp ) .)
    SIGUIENTE       reduce using rule 49 (fator -> ( exp ) .)


state 79

    (60) condition -> exp op exp .
    (39) exp -> exp . + termo
    (40) exp -> exp . - termo

    AND             reduce using rule 60 (condition -> exp op exp .)
    ENTONCES        reduce using rule 60 (condition -> exp op exp .)
    OR              reduce using rule 60 (condition -> exp op exp .)
    HACER           reduce using rule 60 (condition -> exp op exp .)
    SIGUIENTE       reduce using rule 60 (condition -> exp op exp .)
    )               reduce using rule 60 (condition -> exp op exp .)
    +               shift and go to state 53
    -               shift and go to state 54


state 80

    (39) exp -> exp + termo .
    (42) termo -> termo . * fator
    (43) termo -> termo . / fator
    (44) termo -> termo . ^ fator

    +               reduce using rule 39 (exp -> exp + termo .)
    -               reduce using rule 39 (exp -> exp + termo .)
    >               reduce using rule 39 (exp -> exp + termo .)
    <               reduce using rule 39 (exp -> exp + termo .)
    IGUAL           reduce using rule 39 (exp -> exp + termo .)
    DIFERENTE       reduce using rule 39 (exp -> exp + termo .)
    ;               reduce using rule 39 (exp -> exp + termo .)
    .               reduce using rule 39 (exp -> exp + termo .)
    HACER           reduce using rule 39 (exp -> exp + termo .)
    )               reduce using rule 39 (exp -> exp + termo .)
    AND             reduce using rule 39 (exp -> exp + termo .)
    ENTONCES        reduce using rule 39 (exp -> exp + termo .)
    OR              reduce using rule 39 (exp -> exp + termo .)
    SIGUIENTE       reduce using rule 39 (exp -> exp + termo .)
    *               shift and go to state 59
    /               shift and go to state 60
    ^               shift and go to state 61


state 81

    (40) exp -> exp - termo .
    (42) termo -> termo . * fator
    (43) termo -> termo . / fator
    (44) termo -> termo . ^ fator

    +               reduce using rule 40 (exp -> exp - termo .)
    -               reduce using rule 40 (exp -> exp - termo .)
    >               reduce using rule 40 (exp -> exp - termo .)
    <               reduce using rule 40 (exp -> exp - termo .)
    IGUAL           reduce using rule 40 (exp -> exp - termo .)
    DIFERENTE       reduce using rule 40 (exp -> exp - termo .)
    ;               reduce using rule 40 (exp -> exp - termo .)
    .               reduce using rule 40 (exp -> exp - termo .)
    HACER           reduce using rule 40 (exp -> exp - termo .)
    )               reduce using rule 40 (exp -> exp - termo .)
    AND             reduce using rule 40 (exp -> exp - termo .)
    ENTONCES        reduce using rule 40 (exp -> exp - termo .)
    OR              reduce using rule 40 (exp -> exp - termo .)
    SIGUIENTE       reduce using rule 40 (exp -> exp - termo .)
    *               shift and go to state 59
    /               shift and go to state 60
    ^               shift and go to state 61


state 82

    (65) op -> > IGUAL .

    INT             reduce using rule 65 (op -> > IGUAL .)
    FLOAT           reduce using rule 65 (op -> > IGUAL .)
    ID              reduce using rule 65 (op -> > IGUAL .)
    (               reduce using rule 65 (op -> > IGUAL .)


state 83

    (66) op -> < IGUAL .

    INT             reduce using rule 66 (op -> < IGUAL .)
    FLOAT           reduce using rule 66 (op -> < IGUAL .)
    ID              reduce using rule 66 (op -> < IGUAL .)
    (               reduce using rule 66 (op -> < IGUAL .)


state 84

    (42) termo -> termo * fator .

    *               reduce using rule 42 (termo -> termo * fator .)
    /               reduce using rule 42 (termo -> termo * fator .)
    ^               reduce using rule 42 (termo -> termo * fator .)
    +               reduce using rule 42 (termo -> termo * fator .)
    -               reduce using rule 42 (termo -> termo * fator .)
    >               reduce using rule 42 (termo -> termo * fator .)
    <               reduce using rule 42 (termo -> termo * fator .)
    IGUAL           reduce using rule 42 (termo -> termo * fator .)
    DIFERENTE       reduce using rule 42 (termo -> termo * fator .)
    ;               reduce using rule 42 (termo -> termo * fator .)
    .               reduce using rule 42 (termo -> termo * fator .)
    HACER           reduce using rule 42 (termo -> termo * fator .)
    )               reduce using rule 42 (termo -> termo * fator .)
    AND             reduce using rule 42 (termo -> termo * fator .)
    ENTONCES        reduce using rule 42 (termo -> termo * fator .)
    OR              reduce using rule 42 (termo -> termo * fator .)
    SIGUIENTE       reduce using rule 42 (termo -> termo * fator .)


state 85

    (43) termo -> termo / fator .

    *               reduce using rule 43 (termo -> termo / fator .)
    /               reduce using rule 43 (termo -> termo / fator .)
    ^               reduce using rule 43 (termo -> termo / fator .)
    +               reduce using rule 43 (termo -> termo / fator .)
    -               reduce using rule 43 (termo -> termo / fator .)
    >               reduce using rule 43 (termo -> termo / fator .)
    <               reduce using rule 43 (termo -> termo / fator .)
    IGUAL           reduce using rule 43 (termo -> termo / fator .)
    DIFERENTE       reduce using rule 43 (termo -> termo / fator .)
    ;               reduce using rule 43 (termo -> termo / fator .)
    .               reduce using rule 43 (termo -> termo / fator .)
    HACER           reduce using rule 43 (termo -> termo / fator .)
    )               reduce using rule 43 (termo -> termo / fator .)
    AND             reduce using rule 43 (termo -> termo / fator .)
    ENTONCES        reduce using rule 43 (termo -> termo / fator .)
    OR              reduce using rule 43 (termo -> termo / fator .)
    SIGUIENTE       reduce using rule 43 (termo -> termo / fator .)


state 86

    (44) termo -> termo ^ fator .

    *               reduce using rule 44 (termo -> termo ^ fator .)
    /               reduce using rule 44 (termo -> termo ^ fator .)
    ^               reduce using rule 44 (termo -> termo ^ fator .)
    +               reduce using rule 44 (termo -> termo ^ fator .)
    -               reduce using rule 44 (termo -> termo ^ fator .)
    >               reduce using rule 44 (termo -> termo ^ fator .)
    <               reduce using rule 44 (termo -> termo ^ fator .)
    IGUAL           reduce using rule 44 (termo -> termo ^ fator .)
    DIFERENTE       reduce using rule 44 (termo -> termo ^ fator .)
    ;               reduce using rule 44 (termo -> termo ^ fator .)
    .               reduce using rule 44 (termo -> termo ^ fator .)
    HACER           reduce using rule 44 (termo -> termo ^ fator .)
    )               reduce using rule 44 (termo -> termo ^ fator .)
    AND             reduce using rule 44 (termo -> termo ^ fator .)
    ENTONCES        reduce using rule 44 (termo -> termo ^ fator .)
    OR              reduce using rule 44 (termo -> termo ^ fator .)
    SIGUIENTE       reduce using rule 44 (termo -> termo ^ fator .)


state 87

    (67) ciclos -> ENCUANTO expL HACER statements . .
    (34) statements -> statements . stat
    (35) stat -> . atrib ;
    (36) stat -> . conditions
    (37) stat -> . ciclos
    (38) atrib -> . ID = exp
    (50) conditions -> . SI expL ENTONCES statements endcondition
    (67) ciclos -> . ENCUANTO expL HACER statements .
    (68) ciclos -> . PARA expL SIGUIENTE atrib .
    (69) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    .               shift and go to state 104
    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    stat                           shift and go to state 24
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 88

    (68) ciclos -> PARA expL SIGUIENTE atrib . .
    (69) ciclos -> PARA expL SIGUIENTE atrib . HACER statements .

    .               shift and go to state 105
    HACER           shift and go to state 106


state 89

    (26) parametros -> ID : . tipo
    (10) tipo -> . ENTERO
    (11) tipo -> . REAL
    (12) tipo -> . BOOLEANO

    ENTERO          shift and go to state 65
    REAL            shift and go to state 66
    BOOLEANO        shift and go to state 67

    tipo                           shift and go to state 107

state 90

    (24) declF -> FUNCION ID ( parametros ) . : tipo declarations statements DEVUELVE return .

    :               shift and go to state 108


state 91

    (27) parametros -> parametros , . ID : tipo

    ID              shift and go to state 109


state 92

    (14) lista -> [ ] .

    VAR             reduce using rule 14 (lista -> [ ] .)
    FUNCION         reduce using rule 14 (lista -> [ ] .)
    LISTA           reduce using rule 14 (lista -> [ ] .)
    ID              reduce using rule 14 (lista -> [ ] .)
    SI              reduce using rule 14 (lista -> [ ] .)
    ENCUANTO        reduce using rule 14 (lista -> [ ] .)
    PARA            reduce using rule 14 (lista -> [ ] .)
    ]               reduce using rule 14 (lista -> [ ] .)
    ,               reduce using rule 14 (lista -> [ ] .)


state 93

    (15) lista -> [ elementos . ]
    (17) elementos -> elementos . , elemento

    ]               shift and go to state 110
    ,               shift and go to state 111


state 94

    (16) elementos -> elemento .

    ]               reduce using rule 16 (elementos -> elemento .)
    ,               reduce using rule 16 (elementos -> elemento .)


state 95

    (18) elemento -> INT .

    ]               reduce using rule 18 (elemento -> INT .)
    ,               reduce using rule 18 (elemento -> INT .)


state 96

    (19) elemento -> FLOAT .

    ]               reduce using rule 19 (elemento -> FLOAT .)
    ,               reduce using rule 19 (elemento -> FLOAT .)


state 97

    (20) elemento -> BOOLEANO .

    ]               reduce using rule 20 (elemento -> BOOLEANO .)
    ,               reduce using rule 20 (elemento -> BOOLEANO .)


state 98

    (21) elemento -> STRING .

    ]               reduce using rule 21 (elemento -> STRING .)
    ,               reduce using rule 21 (elemento -> STRING .)


state 99

    (22) elemento -> ID .

    ]               reduce using rule 22 (elemento -> ID .)
    ,               reduce using rule 22 (elemento -> ID .)


state 100

    (23) elemento -> lista .

    ]               reduce using rule 23 (elemento -> lista .)
    ,               reduce using rule 23 (elemento -> lista .)


state 101

    (50) conditions -> SI expL ENTONCES statements endcondition .

    ID              reduce using rule 50 (conditions -> SI expL ENTONCES statements endcondition .)
    SI              reduce using rule 50 (conditions -> SI expL ENTONCES statements endcondition .)
    ENCUANTO        reduce using rule 50 (conditions -> SI expL ENTONCES statements endcondition .)
    PARA            reduce using rule 50 (conditions -> SI expL ENTONCES statements endcondition .)
    $end            reduce using rule 50 (conditions -> SI expL ENTONCES statements endcondition .)
    .               reduce using rule 50 (conditions -> SI expL ENTONCES statements endcondition .)
    CASO            reduce using rule 50 (conditions -> SI expL ENTONCES statements endcondition .)
    DEVUELVE        reduce using rule 50 (conditions -> SI expL ENTONCES statements endcondition .)


state 102

    (51) endcondition -> . .

    ID              reduce using rule 51 (endcondition -> . .)
    SI              reduce using rule 51 (endcondition -> . .)
    ENCUANTO        reduce using rule 51 (endcondition -> . .)
    PARA            reduce using rule 51 (endcondition -> . .)
    $end            reduce using rule 51 (endcondition -> . .)
    .               reduce using rule 51 (endcondition -> . .)
    CASO            reduce using rule 51 (endcondition -> . .)
    DEVUELVE        reduce using rule 51 (endcondition -> . .)


state 103

    (52) endcondition -> CASO . CONTRARIO statements .

    CONTRARIO       shift and go to state 112


state 104

    (67) ciclos -> ENCUANTO expL HACER statements . .

    ID              reduce using rule 67 (ciclos -> ENCUANTO expL HACER statements . .)
    SI              reduce using rule 67 (ciclos -> ENCUANTO expL HACER statements . .)
    ENCUANTO        reduce using rule 67 (ciclos -> ENCUANTO expL HACER statements . .)
    PARA            reduce using rule 67 (ciclos -> ENCUANTO expL HACER statements . .)
    $end            reduce using rule 67 (ciclos -> ENCUANTO expL HACER statements . .)
    .               reduce using rule 67 (ciclos -> ENCUANTO expL HACER statements . .)
    CASO            reduce using rule 67 (ciclos -> ENCUANTO expL HACER statements . .)
    DEVUELVE        reduce using rule 67 (ciclos -> ENCUANTO expL HACER statements . .)


state 105

    (68) ciclos -> PARA expL SIGUIENTE atrib . .

    ID              reduce using rule 68 (ciclos -> PARA expL SIGUIENTE atrib . .)
    SI              reduce using rule 68 (ciclos -> PARA expL SIGUIENTE atrib . .)
    ENCUANTO        reduce using rule 68 (ciclos -> PARA expL SIGUIENTE atrib . .)
    PARA            reduce using rule 68 (ciclos -> PARA expL SIGUIENTE atrib . .)
    $end            reduce using rule 68 (ciclos -> PARA expL SIGUIENTE atrib . .)
    .               reduce using rule 68 (ciclos -> PARA expL SIGUIENTE atrib . .)
    CASO            reduce using rule 68 (ciclos -> PARA expL SIGUIENTE atrib . .)
    DEVUELVE        reduce using rule 68 (ciclos -> PARA expL SIGUIENTE atrib . .)


state 106

    (69) ciclos -> PARA expL SIGUIENTE atrib HACER . statements .
    (33) statements -> . stat
    (34) statements -> . statements stat
    (35) stat -> . atrib ;
    (36) stat -> . conditions
    (37) stat -> . ciclos
    (38) atrib -> . ID = exp
    (50) conditions -> . SI expL ENTONCES statements endcondition
    (67) ciclos -> . ENCUANTO expL HACER statements .
    (68) ciclos -> . PARA expL SIGUIENTE atrib .
    (69) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    atrib                          shift and go to state 13
    statements                     shift and go to state 113
    stat                           shift and go to state 12
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 107

    (26) parametros -> ID : tipo .

    )               reduce using rule 26 (parametros -> ID : tipo .)
    ,               reduce using rule 26 (parametros -> ID : tipo .)


state 108

    (24) declF -> FUNCION ID ( parametros ) : . tipo declarations statements DEVUELVE return .
    (10) tipo -> . ENTERO
    (11) tipo -> . REAL
    (12) tipo -> . BOOLEANO

    ENTERO          shift and go to state 65
    REAL            shift and go to state 66
    BOOLEANO        shift and go to state 67

    tipo                           shift and go to state 114

state 109

    (27) parametros -> parametros , ID . : tipo

    :               shift and go to state 115


state 110

    (15) lista -> [ elementos ] .

    VAR             reduce using rule 15 (lista -> [ elementos ] .)
    FUNCION         reduce using rule 15 (lista -> [ elementos ] .)
    LISTA           reduce using rule 15 (lista -> [ elementos ] .)
    ID              reduce using rule 15 (lista -> [ elementos ] .)
    SI              reduce using rule 15 (lista -> [ elementos ] .)
    ENCUANTO        reduce using rule 15 (lista -> [ elementos ] .)
    PARA            reduce using rule 15 (lista -> [ elementos ] .)
    ]               reduce using rule 15 (lista -> [ elementos ] .)
    ,               reduce using rule 15 (lista -> [ elementos ] .)


state 111

    (17) elementos -> elementos , . elemento
    (18) elemento -> . INT
    (19) elemento -> . FLOAT
    (20) elemento -> . BOOLEANO
    (21) elemento -> . STRING
    (22) elemento -> . ID
    (23) elemento -> . lista
    (14) lista -> . [ ]
    (15) lista -> . [ elementos ]

    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    BOOLEANO        shift and go to state 97
    STRING          shift and go to state 98
    ID              shift and go to state 99
    [               shift and go to state 72

    elemento                       shift and go to state 116
    lista                          shift and go to state 100

state 112

    (52) endcondition -> CASO CONTRARIO . statements .
    (33) statements -> . stat
    (34) statements -> . statements stat
    (35) stat -> . atrib ;
    (36) stat -> . conditions
    (37) stat -> . ciclos
    (38) atrib -> . ID = exp
    (50) conditions -> . SI expL ENTONCES statements endcondition
    (67) ciclos -> . ENCUANTO expL HACER statements .
    (68) ciclos -> . PARA expL SIGUIENTE atrib .
    (69) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    statements                     shift and go to state 117
    stat                           shift and go to state 12
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 113

    (69) ciclos -> PARA expL SIGUIENTE atrib HACER statements . .
    (34) statements -> statements . stat
    (35) stat -> . atrib ;
    (36) stat -> . conditions
    (37) stat -> . ciclos
    (38) atrib -> . ID = exp
    (50) conditions -> . SI expL ENTONCES statements endcondition
    (67) ciclos -> . ENCUANTO expL HACER statements .
    (68) ciclos -> . PARA expL SIGUIENTE atrib .
    (69) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    .               shift and go to state 118
    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    atrib                          shift and go to state 13
    stat                           shift and go to state 24
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 114

    (24) declF -> FUNCION ID ( parametros ) : tipo . declarations statements DEVUELVE return .
    (2) declarations -> . decl
    (3) declarations -> . declarations decl
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (7) declV -> . VAR ids : tipo
    (24) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (13) declL -> . LISTA ID = lista

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9

    declarations                   shift and go to state 119
    decl                           shift and go to state 3
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6

state 115

    (27) parametros -> parametros , ID : . tipo
    (10) tipo -> . ENTERO
    (11) tipo -> . REAL
    (12) tipo -> . BOOLEANO

    ENTERO          shift and go to state 65
    REAL            shift and go to state 66
    BOOLEANO        shift and go to state 67

    tipo                           shift and go to state 120

state 116

    (17) elementos -> elementos , elemento .

    ]               reduce using rule 17 (elementos -> elementos , elemento .)
    ,               reduce using rule 17 (elementos -> elementos , elemento .)


state 117

    (52) endcondition -> CASO CONTRARIO statements . .
    (34) statements -> statements . stat
    (35) stat -> . atrib ;
    (36) stat -> . conditions
    (37) stat -> . ciclos
    (38) atrib -> . ID = exp
    (50) conditions -> . SI expL ENTONCES statements endcondition
    (67) ciclos -> . ENCUANTO expL HACER statements .
    (68) ciclos -> . PARA expL SIGUIENTE atrib .
    (69) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    .               shift and go to state 121
    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    stat                           shift and go to state 24
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 118

    (69) ciclos -> PARA expL SIGUIENTE atrib HACER statements . .

    ID              reduce using rule 69 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    SI              reduce using rule 69 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    ENCUANTO        reduce using rule 69 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    PARA            reduce using rule 69 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    $end            reduce using rule 69 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    .               reduce using rule 69 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    CASO            reduce using rule 69 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    DEVUELVE        reduce using rule 69 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)


state 119

    (24) declF -> FUNCION ID ( parametros ) : tipo declarations . statements DEVUELVE return .
    (3) declarations -> declarations . decl
    (33) statements -> . stat
    (34) statements -> . statements stat
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (35) stat -> . atrib ;
    (36) stat -> . conditions
    (37) stat -> . ciclos
    (7) declV -> . VAR ids : tipo
    (24) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (13) declL -> . LISTA ID = lista
    (38) atrib -> . ID = exp
    (50) conditions -> . SI expL ENTONCES statements endcondition
    (67) ciclos -> . ENCUANTO expL HACER statements .
    (68) ciclos -> . PARA expL SIGUIENTE atrib .
    (69) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9
    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    statements                     shift and go to state 122
    decl                           shift and go to state 11
    stat                           shift and go to state 12
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 120

    (27) parametros -> parametros , ID : tipo .

    )               reduce using rule 27 (parametros -> parametros , ID : tipo .)
    ,               reduce using rule 27 (parametros -> parametros , ID : tipo .)


state 121

    (52) endcondition -> CASO CONTRARIO statements . .

    ID              reduce using rule 52 (endcondition -> CASO CONTRARIO statements . .)
    SI              reduce using rule 52 (endcondition -> CASO CONTRARIO statements . .)
    ENCUANTO        reduce using rule 52 (endcondition -> CASO CONTRARIO statements . .)
    PARA            reduce using rule 52 (endcondition -> CASO CONTRARIO statements . .)
    $end            reduce using rule 52 (endcondition -> CASO CONTRARIO statements . .)
    .               reduce using rule 52 (endcondition -> CASO CONTRARIO statements . .)
    CASO            reduce using rule 52 (endcondition -> CASO CONTRARIO statements . .)
    DEVUELVE        reduce using rule 52 (endcondition -> CASO CONTRARIO statements . .)


state 122

    (24) declF -> FUNCION ID ( parametros ) : tipo declarations statements . DEVUELVE return .
    (34) statements -> statements . stat
    (35) stat -> . atrib ;
    (36) stat -> . conditions
    (37) stat -> . ciclos
    (38) atrib -> . ID = exp
    (50) conditions -> . SI expL ENTONCES statements endcondition
    (67) ciclos -> . ENCUANTO expL HACER statements .
    (68) ciclos -> . PARA expL SIGUIENTE atrib .
    (69) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    DEVUELVE        shift and go to state 123
    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    stat                           shift and go to state 24
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 123

    (24) declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE . return .
    (28) return -> . INT
    (29) return -> . ID
    (30) return -> . FLOAT
    (31) return -> . VERDADERO
    (32) return -> . FALSO

    INT             shift and go to state 126
    ID              shift and go to state 124
    FLOAT           shift and go to state 127
    VERDADERO       shift and go to state 128
    FALSO           shift and go to state 129

    return                         shift and go to state 125

state 124

    (29) return -> ID .

    .               reduce using rule 29 (return -> ID .)


state 125

    (24) declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .

    .               shift and go to state 130


state 126

    (28) return -> INT .

    .               reduce using rule 28 (return -> INT .)


state 127

    (30) return -> FLOAT .

    .               reduce using rule 30 (return -> FLOAT .)


state 128

    (31) return -> VERDADERO .

    .               reduce using rule 31 (return -> VERDADERO .)


state 129

    (32) return -> FALSO .

    .               reduce using rule 32 (return -> FALSO .)


state 130

    (24) declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .

    VAR             reduce using rule 24 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    FUNCION         reduce using rule 24 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    LISTA           reduce using rule 24 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    ID              reduce using rule 24 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    SI              reduce using rule 24 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    ENCUANTO        reduce using rule 24 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    PARA            reduce using rule 24 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)

