Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ENTER
    NADA
    RESTO

Grammar

Rule 0     S' -> prg
Rule 1     prg -> declarations statements
Rule 2     declarations -> decl
Rule 3     declarations -> declarations decl
Rule 4     decl -> declV
Rule 5     decl -> declF
Rule 6     decl -> declL
Rule 7     declV -> VAR vari : tipo
Rule 8     vari -> atribD
Rule 9     vari -> ID
Rule 10    vari -> vari , atribD
Rule 11    vari -> vari , ID
Rule 12    tipo -> ENTERO
Rule 13    tipo -> REAL
Rule 14    tipo -> BOOLEANO
Rule 15    tipo -> STR
Rule 16    atribD -> ID = STRING
Rule 17    atribD -> ID = VERDADERO
Rule 18    atribD -> ID = FALSO
Rule 19    atribD -> ID = exp
Rule 20    declL -> LISTA ID = lista
Rule 21    lista -> [ ]
Rule 22    lista -> [ elementos ]
Rule 23    elementos -> elemento
Rule 24    elementos -> elementos , elemento
Rule 25    elemento -> INT
Rule 26    elemento -> FLOAT
Rule 27    elemento -> BOOLEANO
Rule 28    elemento -> STRING
Rule 29    elemento -> ID
Rule 30    elemento -> lista
Rule 31    declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
Rule 32    parametros -> <empty>
Rule 33    parametros -> ID : tipo
Rule 34    parametros -> parametros , ID : tipo
Rule 35    return -> INT
Rule 36    return -> ID
Rule 37    return -> FLOAT
Rule 38    return -> VERDADERO
Rule 39    return -> FALSO
Rule 40    statements -> stat
Rule 41    statements -> statements stat
Rule 42    stat -> atrib ;
Rule 43    stat -> conditions
Rule 44    stat -> ciclos
Rule 45    stat -> readwrite
Rule 46    stat -> cast ;
Rule 47    atrib -> ID = STRING
Rule 48    atrib -> ID = VERDADERO
Rule 49    atrib -> ID = FALSO
Rule 50    atrib -> ID = exp
Rule 51    exp -> exp + termo
Rule 52    exp -> exp - termo
Rule 53    exp -> termo
Rule 54    termo -> termo * fator
Rule 55    termo -> termo / fator
Rule 56    termo -> termo ^ fator
Rule 57    termo -> fator
Rule 58    fator -> INT
Rule 59    fator -> FLOAT
Rule 60    fator -> ID
Rule 61    fator -> ( exp )
Rule 62    conditions -> SI expL ENTONCES statements endcondition
Rule 63    endcondition -> .
Rule 64    endcondition -> CASO CONTRARIO statements .
Rule 65    expL -> termoB
Rule 66    expL -> expL OR termoB
Rule 67    termoB -> fatorB
Rule 68    termoB -> termoB AND fatorB
Rule 69    fatorB -> condition
Rule 70    fatorB -> VERDADERO
Rule 71    fatorB -> FALSO
Rule 72    fatorB -> ( expL )
Rule 73    condition -> exp op exp
Rule 74    op -> >
Rule 75    op -> <
Rule 76    op -> IGUAL
Rule 77    op -> DIFERENTE
Rule 78    op -> > IGUAL
Rule 79    op -> < IGUAL
Rule 80    ciclos -> ENCUANTO expL HACER statements .
Rule 81    ciclos -> PARA expL SIGUIENTE atrib .
Rule 82    ciclos -> PARA expL SIGUIENTE atrib HACER statements .
Rule 83    readwrite -> ESCRIBIR ( ID ) ;
Rule 84    readwrite -> ESCRIBIR ( STRING ) ;
Rule 85    readwrite -> ID = LEER ( STRING ) ;
Rule 86    cast -> tipocast ( exp )
Rule 87    cast -> tipocast ( STRING )
Rule 88    tipocast -> REAL
Rule 89    tipocast -> ENTERO
Rule 90    tipocast -> STR

Terminals, with rules where they appear

(                    : 31 61 72 83 84 85 86 87
)                    : 31 61 72 83 84 85 86 87
*                    : 54
+                    : 51
,                    : 10 11 24 34
-                    : 52
.                    : 31 63 64 80 81 82
/                    : 55
:                    : 7 31 33 34
;                    : 42 46 83 84 85
<                    : 75 79
=                    : 16 17 18 19 20 47 48 49 50 85
>                    : 74 78
AND                  : 68
BOOLEANO             : 14 27
CASO                 : 64
CONTRARIO            : 64
DEVUELVE             : 31
DIFERENTE            : 77
ENCUANTO             : 80
ENTER                : 
ENTERO               : 12 89
ENTONCES             : 62
ESCRIBIR             : 83 84
FALSO                : 18 39 49 71
FLOAT                : 26 37 59
FUNCION              : 31
HACER                : 80 82
ID                   : 9 11 16 17 18 19 20 29 31 33 34 36 47 48 49 50 60 83 85
IGUAL                : 76 78 79
INT                  : 25 35 58
LEER                 : 85
LISTA                : 20
NADA                 : 
OR                   : 66
PARA                 : 81 82
REAL                 : 13 88
RESTO                : 
SI                   : 62
SIGUIENTE            : 81 82
STR                  : 15 90
STRING               : 16 28 47 84 85 87
VAR                  : 7
VERDADERO            : 17 38 48 70
[                    : 21 22
]                    : 21 22
^                    : 56
error                : 

Nonterminals, with rules where they appear

atrib                : 42 81 82
atribD               : 8 10
cast                 : 46
ciclos               : 44
condition            : 69
conditions           : 43
decl                 : 2 3
declF                : 5
declL                : 6
declV                : 4
declarations         : 1 3 31
elemento             : 23 24
elementos            : 22 24
endcondition         : 62
exp                  : 19 50 51 52 61 73 73 86
expL                 : 62 66 72 80 81 82
fator                : 54 55 56 57
fatorB               : 67 68
lista                : 20 30
op                   : 73
parametros           : 31 34
prg                  : 0
readwrite            : 45
return               : 31
stat                 : 40 41
statements           : 1 31 41 62 64 80 82
termo                : 51 52 53 54 55 56
termoB               : 65 66 68
tipo                 : 7 31 33 34
tipocast             : 86 87
vari                 : 7 10 11

Parsing method: LALR

state 0

    (0) S' -> . prg
    (1) prg -> . declarations statements
    (2) declarations -> . decl
    (3) declarations -> . declarations decl
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (7) declV -> . VAR vari : tipo
    (31) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (20) declL -> . LISTA ID = lista

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9

    prg                            shift and go to state 1
    declarations                   shift and go to state 2
    decl                           shift and go to state 3
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6

state 1

    (0) S' -> prg .



state 2

    (1) prg -> declarations . statements
    (3) declarations -> declarations . decl
    (40) statements -> . stat
    (41) statements -> . statements stat
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (46) stat -> . cast ;
    (7) declV -> . VAR vari : tipo
    (31) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (20) declL -> . LISTA ID = lista
    (47) atrib -> . ID = STRING
    (48) atrib -> . ID = VERDADERO
    (49) atrib -> . ID = FALSO
    (50) atrib -> . ID = exp
    (62) conditions -> . SI expL ENTONCES statements endcondition
    (80) ciclos -> . ENCUANTO expL HACER statements .
    (81) ciclos -> . PARA expL SIGUIENTE atrib .
    (82) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (83) readwrite -> . ESCRIBIR ( ID ) ;
    (84) readwrite -> . ESCRIBIR ( STRING ) ;
    (85) readwrite -> . ID = LEER ( STRING ) ;
    (86) cast -> . tipocast ( exp )
    (87) cast -> . tipocast ( STRING )
    (88) tipocast -> . REAL
    (89) tipocast -> . ENTERO
    (90) tipocast -> . STR

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9
    ID              shift and go to state 18
    SI              shift and go to state 19
    ENCUANTO        shift and go to state 20
    PARA            shift and go to state 21
    ESCRIBIR        shift and go to state 22
    REAL            shift and go to state 24
    ENTERO          shift and go to state 25
    STR             shift and go to state 26

    statements                     shift and go to state 10
    decl                           shift and go to state 11
    stat                           shift and go to state 12
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16
    cast                           shift and go to state 17
    tipocast                       shift and go to state 23

state 3

    (2) declarations -> decl .

    VAR             reduce using rule 2 (declarations -> decl .)
    FUNCION         reduce using rule 2 (declarations -> decl .)
    LISTA           reduce using rule 2 (declarations -> decl .)
    ID              reduce using rule 2 (declarations -> decl .)
    SI              reduce using rule 2 (declarations -> decl .)
    ENCUANTO        reduce using rule 2 (declarations -> decl .)
    PARA            reduce using rule 2 (declarations -> decl .)
    ESCRIBIR        reduce using rule 2 (declarations -> decl .)
    REAL            reduce using rule 2 (declarations -> decl .)
    ENTERO          reduce using rule 2 (declarations -> decl .)
    STR             reduce using rule 2 (declarations -> decl .)


state 4

    (4) decl -> declV .

    VAR             reduce using rule 4 (decl -> declV .)
    FUNCION         reduce using rule 4 (decl -> declV .)
    LISTA           reduce using rule 4 (decl -> declV .)
    ID              reduce using rule 4 (decl -> declV .)
    SI              reduce using rule 4 (decl -> declV .)
    ENCUANTO        reduce using rule 4 (decl -> declV .)
    PARA            reduce using rule 4 (decl -> declV .)
    ESCRIBIR        reduce using rule 4 (decl -> declV .)
    REAL            reduce using rule 4 (decl -> declV .)
    ENTERO          reduce using rule 4 (decl -> declV .)
    STR             reduce using rule 4 (decl -> declV .)


state 5

    (5) decl -> declF .

    VAR             reduce using rule 5 (decl -> declF .)
    FUNCION         reduce using rule 5 (decl -> declF .)
    LISTA           reduce using rule 5 (decl -> declF .)
    ID              reduce using rule 5 (decl -> declF .)
    SI              reduce using rule 5 (decl -> declF .)
    ENCUANTO        reduce using rule 5 (decl -> declF .)
    PARA            reduce using rule 5 (decl -> declF .)
    ESCRIBIR        reduce using rule 5 (decl -> declF .)
    REAL            reduce using rule 5 (decl -> declF .)
    ENTERO          reduce using rule 5 (decl -> declF .)
    STR             reduce using rule 5 (decl -> declF .)


state 6

    (6) decl -> declL .

    VAR             reduce using rule 6 (decl -> declL .)
    FUNCION         reduce using rule 6 (decl -> declL .)
    LISTA           reduce using rule 6 (decl -> declL .)
    ID              reduce using rule 6 (decl -> declL .)
    SI              reduce using rule 6 (decl -> declL .)
    ENCUANTO        reduce using rule 6 (decl -> declL .)
    PARA            reduce using rule 6 (decl -> declL .)
    ESCRIBIR        reduce using rule 6 (decl -> declL .)
    REAL            reduce using rule 6 (decl -> declL .)
    ENTERO          reduce using rule 6 (decl -> declL .)
    STR             reduce using rule 6 (decl -> declL .)


state 7

    (7) declV -> VAR . vari : tipo
    (8) vari -> . atribD
    (9) vari -> . ID
    (10) vari -> . vari , atribD
    (11) vari -> . vari , ID
    (16) atribD -> . ID = STRING
    (17) atribD -> . ID = VERDADERO
    (18) atribD -> . ID = FALSO
    (19) atribD -> . ID = exp

    ID              shift and go to state 29

    vari                           shift and go to state 27
    atribD                         shift and go to state 28

state 8

    (31) declF -> FUNCION . ID ( parametros ) : tipo declarations statements DEVUELVE return .

    ID              shift and go to state 30


state 9

    (20) declL -> LISTA . ID = lista

    ID              shift and go to state 31


state 10

    (1) prg -> declarations statements .
    (41) statements -> statements . stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (46) stat -> . cast ;
    (47) atrib -> . ID = STRING
    (48) atrib -> . ID = VERDADERO
    (49) atrib -> . ID = FALSO
    (50) atrib -> . ID = exp
    (62) conditions -> . SI expL ENTONCES statements endcondition
    (80) ciclos -> . ENCUANTO expL HACER statements .
    (81) ciclos -> . PARA expL SIGUIENTE atrib .
    (82) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (83) readwrite -> . ESCRIBIR ( ID ) ;
    (84) readwrite -> . ESCRIBIR ( STRING ) ;
    (85) readwrite -> . ID = LEER ( STRING ) ;
    (86) cast -> . tipocast ( exp )
    (87) cast -> . tipocast ( STRING )
    (88) tipocast -> . REAL
    (89) tipocast -> . ENTERO
    (90) tipocast -> . STR

    $end            reduce using rule 1 (prg -> declarations statements .)
    ID              shift and go to state 18
    SI              shift and go to state 19
    ENCUANTO        shift and go to state 20
    PARA            shift and go to state 21
    ESCRIBIR        shift and go to state 22
    REAL            shift and go to state 24
    ENTERO          shift and go to state 25
    STR             shift and go to state 26

    stat                           shift and go to state 32
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16
    cast                           shift and go to state 17
    tipocast                       shift and go to state 23

state 11

    (3) declarations -> declarations decl .

    VAR             reduce using rule 3 (declarations -> declarations decl .)
    FUNCION         reduce using rule 3 (declarations -> declarations decl .)
    LISTA           reduce using rule 3 (declarations -> declarations decl .)
    ID              reduce using rule 3 (declarations -> declarations decl .)
    SI              reduce using rule 3 (declarations -> declarations decl .)
    ENCUANTO        reduce using rule 3 (declarations -> declarations decl .)
    PARA            reduce using rule 3 (declarations -> declarations decl .)
    ESCRIBIR        reduce using rule 3 (declarations -> declarations decl .)
    REAL            reduce using rule 3 (declarations -> declarations decl .)
    ENTERO          reduce using rule 3 (declarations -> declarations decl .)
    STR             reduce using rule 3 (declarations -> declarations decl .)


state 12

    (40) statements -> stat .

    ID              reduce using rule 40 (statements -> stat .)
    SI              reduce using rule 40 (statements -> stat .)
    ENCUANTO        reduce using rule 40 (statements -> stat .)
    PARA            reduce using rule 40 (statements -> stat .)
    ESCRIBIR        reduce using rule 40 (statements -> stat .)
    REAL            reduce using rule 40 (statements -> stat .)
    ENTERO          reduce using rule 40 (statements -> stat .)
    STR             reduce using rule 40 (statements -> stat .)
    $end            reduce using rule 40 (statements -> stat .)
    .               reduce using rule 40 (statements -> stat .)
    CASO            reduce using rule 40 (statements -> stat .)
    DEVUELVE        reduce using rule 40 (statements -> stat .)


state 13

    (42) stat -> atrib . ;

    ;               shift and go to state 33


state 14

    (43) stat -> conditions .

    ID              reduce using rule 43 (stat -> conditions .)
    SI              reduce using rule 43 (stat -> conditions .)
    ENCUANTO        reduce using rule 43 (stat -> conditions .)
    PARA            reduce using rule 43 (stat -> conditions .)
    ESCRIBIR        reduce using rule 43 (stat -> conditions .)
    REAL            reduce using rule 43 (stat -> conditions .)
    ENTERO          reduce using rule 43 (stat -> conditions .)
    STR             reduce using rule 43 (stat -> conditions .)
    $end            reduce using rule 43 (stat -> conditions .)
    .               reduce using rule 43 (stat -> conditions .)
    CASO            reduce using rule 43 (stat -> conditions .)
    DEVUELVE        reduce using rule 43 (stat -> conditions .)


state 15

    (44) stat -> ciclos .

    ID              reduce using rule 44 (stat -> ciclos .)
    SI              reduce using rule 44 (stat -> ciclos .)
    ENCUANTO        reduce using rule 44 (stat -> ciclos .)
    PARA            reduce using rule 44 (stat -> ciclos .)
    ESCRIBIR        reduce using rule 44 (stat -> ciclos .)
    REAL            reduce using rule 44 (stat -> ciclos .)
    ENTERO          reduce using rule 44 (stat -> ciclos .)
    STR             reduce using rule 44 (stat -> ciclos .)
    $end            reduce using rule 44 (stat -> ciclos .)
    .               reduce using rule 44 (stat -> ciclos .)
    CASO            reduce using rule 44 (stat -> ciclos .)
    DEVUELVE        reduce using rule 44 (stat -> ciclos .)


state 16

    (45) stat -> readwrite .

    ID              reduce using rule 45 (stat -> readwrite .)
    SI              reduce using rule 45 (stat -> readwrite .)
    ENCUANTO        reduce using rule 45 (stat -> readwrite .)
    PARA            reduce using rule 45 (stat -> readwrite .)
    ESCRIBIR        reduce using rule 45 (stat -> readwrite .)
    REAL            reduce using rule 45 (stat -> readwrite .)
    ENTERO          reduce using rule 45 (stat -> readwrite .)
    STR             reduce using rule 45 (stat -> readwrite .)
    $end            reduce using rule 45 (stat -> readwrite .)
    .               reduce using rule 45 (stat -> readwrite .)
    CASO            reduce using rule 45 (stat -> readwrite .)
    DEVUELVE        reduce using rule 45 (stat -> readwrite .)


state 17

    (46) stat -> cast . ;

    ;               shift and go to state 34


state 18

    (47) atrib -> ID . = STRING
    (48) atrib -> ID . = VERDADERO
    (49) atrib -> ID . = FALSO
    (50) atrib -> ID . = exp
    (85) readwrite -> ID . = LEER ( STRING ) ;

    =               shift and go to state 35


state 19

    (62) conditions -> SI . expL ENTONCES statements endcondition
    (65) expL -> . termoB
    (66) expL -> . expL OR termoB
    (67) termoB -> . fatorB
    (68) termoB -> . termoB AND fatorB
    (69) fatorB -> . condition
    (70) fatorB -> . VERDADERO
    (71) fatorB -> . FALSO
    (72) fatorB -> . ( expL )
    (73) condition -> . exp op exp
    (51) exp -> . exp + termo
    (52) exp -> . exp - termo
    (53) exp -> . termo
    (54) termo -> . termo * fator
    (55) termo -> . termo / fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . FLOAT
    (60) fator -> . ID
    (61) fator -> . ( exp )

    VERDADERO       shift and go to state 40
    FALSO           shift and go to state 41
    (               shift and go to state 42
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48

    expL                           shift and go to state 36
    termoB                         shift and go to state 37
    fatorB                         shift and go to state 38
    condition                      shift and go to state 39
    exp                            shift and go to state 43
    termo                          shift and go to state 44
    fator                          shift and go to state 45

state 20

    (80) ciclos -> ENCUANTO . expL HACER statements .
    (65) expL -> . termoB
    (66) expL -> . expL OR termoB
    (67) termoB -> . fatorB
    (68) termoB -> . termoB AND fatorB
    (69) fatorB -> . condition
    (70) fatorB -> . VERDADERO
    (71) fatorB -> . FALSO
    (72) fatorB -> . ( expL )
    (73) condition -> . exp op exp
    (51) exp -> . exp + termo
    (52) exp -> . exp - termo
    (53) exp -> . termo
    (54) termo -> . termo * fator
    (55) termo -> . termo / fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . FLOAT
    (60) fator -> . ID
    (61) fator -> . ( exp )

    VERDADERO       shift and go to state 40
    FALSO           shift and go to state 41
    (               shift and go to state 42
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48

    expL                           shift and go to state 49
    termoB                         shift and go to state 37
    fatorB                         shift and go to state 38
    condition                      shift and go to state 39
    exp                            shift and go to state 43
    termo                          shift and go to state 44
    fator                          shift and go to state 45

state 21

    (81) ciclos -> PARA . expL SIGUIENTE atrib .
    (82) ciclos -> PARA . expL SIGUIENTE atrib HACER statements .
    (65) expL -> . termoB
    (66) expL -> . expL OR termoB
    (67) termoB -> . fatorB
    (68) termoB -> . termoB AND fatorB
    (69) fatorB -> . condition
    (70) fatorB -> . VERDADERO
    (71) fatorB -> . FALSO
    (72) fatorB -> . ( expL )
    (73) condition -> . exp op exp
    (51) exp -> . exp + termo
    (52) exp -> . exp - termo
    (53) exp -> . termo
    (54) termo -> . termo * fator
    (55) termo -> . termo / fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . FLOAT
    (60) fator -> . ID
    (61) fator -> . ( exp )

    VERDADERO       shift and go to state 40
    FALSO           shift and go to state 41
    (               shift and go to state 42
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48

    expL                           shift and go to state 50
    termoB                         shift and go to state 37
    fatorB                         shift and go to state 38
    condition                      shift and go to state 39
    exp                            shift and go to state 43
    termo                          shift and go to state 44
    fator                          shift and go to state 45

state 22

    (83) readwrite -> ESCRIBIR . ( ID ) ;
    (84) readwrite -> ESCRIBIR . ( STRING ) ;

    (               shift and go to state 51


state 23

    (86) cast -> tipocast . ( exp )
    (87) cast -> tipocast . ( STRING )

    (               shift and go to state 52


state 24

    (88) tipocast -> REAL .

    (               reduce using rule 88 (tipocast -> REAL .)


state 25

    (89) tipocast -> ENTERO .

    (               reduce using rule 89 (tipocast -> ENTERO .)


state 26

    (90) tipocast -> STR .

    (               reduce using rule 90 (tipocast -> STR .)


state 27

    (7) declV -> VAR vari . : tipo
    (10) vari -> vari . , atribD
    (11) vari -> vari . , ID

    :               shift and go to state 53
    ,               shift and go to state 54


state 28

    (8) vari -> atribD .

    :               reduce using rule 8 (vari -> atribD .)
    ,               reduce using rule 8 (vari -> atribD .)


state 29

    (9) vari -> ID .
    (16) atribD -> ID . = STRING
    (17) atribD -> ID . = VERDADERO
    (18) atribD -> ID . = FALSO
    (19) atribD -> ID . = exp

    :               reduce using rule 9 (vari -> ID .)
    ,               reduce using rule 9 (vari -> ID .)
    =               shift and go to state 55


state 30

    (31) declF -> FUNCION ID . ( parametros ) : tipo declarations statements DEVUELVE return .

    (               shift and go to state 56


state 31

    (20) declL -> LISTA ID . = lista

    =               shift and go to state 57


state 32

    (41) statements -> statements stat .

    ID              reduce using rule 41 (statements -> statements stat .)
    SI              reduce using rule 41 (statements -> statements stat .)
    ENCUANTO        reduce using rule 41 (statements -> statements stat .)
    PARA            reduce using rule 41 (statements -> statements stat .)
    ESCRIBIR        reduce using rule 41 (statements -> statements stat .)
    REAL            reduce using rule 41 (statements -> statements stat .)
    ENTERO          reduce using rule 41 (statements -> statements stat .)
    STR             reduce using rule 41 (statements -> statements stat .)
    $end            reduce using rule 41 (statements -> statements stat .)
    .               reduce using rule 41 (statements -> statements stat .)
    CASO            reduce using rule 41 (statements -> statements stat .)
    DEVUELVE        reduce using rule 41 (statements -> statements stat .)


state 33

    (42) stat -> atrib ; .

    ID              reduce using rule 42 (stat -> atrib ; .)
    SI              reduce using rule 42 (stat -> atrib ; .)
    ENCUANTO        reduce using rule 42 (stat -> atrib ; .)
    PARA            reduce using rule 42 (stat -> atrib ; .)
    ESCRIBIR        reduce using rule 42 (stat -> atrib ; .)
    REAL            reduce using rule 42 (stat -> atrib ; .)
    ENTERO          reduce using rule 42 (stat -> atrib ; .)
    STR             reduce using rule 42 (stat -> atrib ; .)
    $end            reduce using rule 42 (stat -> atrib ; .)
    .               reduce using rule 42 (stat -> atrib ; .)
    CASO            reduce using rule 42 (stat -> atrib ; .)
    DEVUELVE        reduce using rule 42 (stat -> atrib ; .)


state 34

    (46) stat -> cast ; .

    ID              reduce using rule 46 (stat -> cast ; .)
    SI              reduce using rule 46 (stat -> cast ; .)
    ENCUANTO        reduce using rule 46 (stat -> cast ; .)
    PARA            reduce using rule 46 (stat -> cast ; .)
    ESCRIBIR        reduce using rule 46 (stat -> cast ; .)
    REAL            reduce using rule 46 (stat -> cast ; .)
    ENTERO          reduce using rule 46 (stat -> cast ; .)
    STR             reduce using rule 46 (stat -> cast ; .)
    $end            reduce using rule 46 (stat -> cast ; .)
    .               reduce using rule 46 (stat -> cast ; .)
    CASO            reduce using rule 46 (stat -> cast ; .)
    DEVUELVE        reduce using rule 46 (stat -> cast ; .)


state 35

    (47) atrib -> ID = . STRING
    (48) atrib -> ID = . VERDADERO
    (49) atrib -> ID = . FALSO
    (50) atrib -> ID = . exp
    (85) readwrite -> ID = . LEER ( STRING ) ;
    (51) exp -> . exp + termo
    (52) exp -> . exp - termo
    (53) exp -> . termo
    (54) termo -> . termo * fator
    (55) termo -> . termo / fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . FLOAT
    (60) fator -> . ID
    (61) fator -> . ( exp )

    STRING          shift and go to state 58
    VERDADERO       shift and go to state 59
    FALSO           shift and go to state 60
    LEER            shift and go to state 62
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    (               shift and go to state 63

    exp                            shift and go to state 61
    termo                          shift and go to state 44
    fator                          shift and go to state 45

state 36

    (62) conditions -> SI expL . ENTONCES statements endcondition
    (66) expL -> expL . OR termoB

    ENTONCES        shift and go to state 64
    OR              shift and go to state 65


state 37

    (65) expL -> termoB .
    (68) termoB -> termoB . AND fatorB

    ENTONCES        reduce using rule 65 (expL -> termoB .)
    OR              reduce using rule 65 (expL -> termoB .)
    HACER           reduce using rule 65 (expL -> termoB .)
    SIGUIENTE       reduce using rule 65 (expL -> termoB .)
    )               reduce using rule 65 (expL -> termoB .)
    AND             shift and go to state 66


state 38

    (67) termoB -> fatorB .

    AND             reduce using rule 67 (termoB -> fatorB .)
    ENTONCES        reduce using rule 67 (termoB -> fatorB .)
    OR              reduce using rule 67 (termoB -> fatorB .)
    HACER           reduce using rule 67 (termoB -> fatorB .)
    SIGUIENTE       reduce using rule 67 (termoB -> fatorB .)
    )               reduce using rule 67 (termoB -> fatorB .)


state 39

    (69) fatorB -> condition .

    AND             reduce using rule 69 (fatorB -> condition .)
    ENTONCES        reduce using rule 69 (fatorB -> condition .)
    OR              reduce using rule 69 (fatorB -> condition .)
    HACER           reduce using rule 69 (fatorB -> condition .)
    SIGUIENTE       reduce using rule 69 (fatorB -> condition .)
    )               reduce using rule 69 (fatorB -> condition .)


state 40

    (70) fatorB -> VERDADERO .

    AND             reduce using rule 70 (fatorB -> VERDADERO .)
    ENTONCES        reduce using rule 70 (fatorB -> VERDADERO .)
    OR              reduce using rule 70 (fatorB -> VERDADERO .)
    HACER           reduce using rule 70 (fatorB -> VERDADERO .)
    SIGUIENTE       reduce using rule 70 (fatorB -> VERDADERO .)
    )               reduce using rule 70 (fatorB -> VERDADERO .)


state 41

    (71) fatorB -> FALSO .

    AND             reduce using rule 71 (fatorB -> FALSO .)
    ENTONCES        reduce using rule 71 (fatorB -> FALSO .)
    OR              reduce using rule 71 (fatorB -> FALSO .)
    HACER           reduce using rule 71 (fatorB -> FALSO .)
    SIGUIENTE       reduce using rule 71 (fatorB -> FALSO .)
    )               reduce using rule 71 (fatorB -> FALSO .)


state 42

    (72) fatorB -> ( . expL )
    (61) fator -> ( . exp )
    (65) expL -> . termoB
    (66) expL -> . expL OR termoB
    (51) exp -> . exp + termo
    (52) exp -> . exp - termo
    (53) exp -> . termo
    (67) termoB -> . fatorB
    (68) termoB -> . termoB AND fatorB
    (54) termo -> . termo * fator
    (55) termo -> . termo / fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (69) fatorB -> . condition
    (70) fatorB -> . VERDADERO
    (71) fatorB -> . FALSO
    (72) fatorB -> . ( expL )
    (58) fator -> . INT
    (59) fator -> . FLOAT
    (60) fator -> . ID
    (61) fator -> . ( exp )
    (73) condition -> . exp op exp

    VERDADERO       shift and go to state 40
    FALSO           shift and go to state 41
    (               shift and go to state 42
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48

    expL                           shift and go to state 67
    exp                            shift and go to state 68
    termoB                         shift and go to state 37
    termo                          shift and go to state 44
    fatorB                         shift and go to state 38
    fator                          shift and go to state 45
    condition                      shift and go to state 39

state 43

    (73) condition -> exp . op exp
    (51) exp -> exp . + termo
    (52) exp -> exp . - termo
    (74) op -> . >
    (75) op -> . <
    (76) op -> . IGUAL
    (77) op -> . DIFERENTE
    (78) op -> . > IGUAL
    (79) op -> . < IGUAL

    +               shift and go to state 70
    -               shift and go to state 71
    >               shift and go to state 72
    <               shift and go to state 73
    IGUAL           shift and go to state 74
    DIFERENTE       shift and go to state 75

    op                             shift and go to state 69

state 44

    (53) exp -> termo .
    (54) termo -> termo . * fator
    (55) termo -> termo . / fator
    (56) termo -> termo . ^ fator

    +               reduce using rule 53 (exp -> termo .)
    -               reduce using rule 53 (exp -> termo .)
    >               reduce using rule 53 (exp -> termo .)
    <               reduce using rule 53 (exp -> termo .)
    IGUAL           reduce using rule 53 (exp -> termo .)
    DIFERENTE       reduce using rule 53 (exp -> termo .)
    ;               reduce using rule 53 (exp -> termo .)
    )               reduce using rule 53 (exp -> termo .)
    :               reduce using rule 53 (exp -> termo .)
    ,               reduce using rule 53 (exp -> termo .)
    AND             reduce using rule 53 (exp -> termo .)
    ENTONCES        reduce using rule 53 (exp -> termo .)
    OR              reduce using rule 53 (exp -> termo .)
    HACER           reduce using rule 53 (exp -> termo .)
    SIGUIENTE       reduce using rule 53 (exp -> termo .)
    .               reduce using rule 53 (exp -> termo .)
    *               shift and go to state 76
    /               shift and go to state 77
    ^               shift and go to state 78


state 45

    (57) termo -> fator .

    *               reduce using rule 57 (termo -> fator .)
    /               reduce using rule 57 (termo -> fator .)
    ^               reduce using rule 57 (termo -> fator .)
    +               reduce using rule 57 (termo -> fator .)
    -               reduce using rule 57 (termo -> fator .)
    >               reduce using rule 57 (termo -> fator .)
    <               reduce using rule 57 (termo -> fator .)
    IGUAL           reduce using rule 57 (termo -> fator .)
    DIFERENTE       reduce using rule 57 (termo -> fator .)
    ;               reduce using rule 57 (termo -> fator .)
    )               reduce using rule 57 (termo -> fator .)
    :               reduce using rule 57 (termo -> fator .)
    ,               reduce using rule 57 (termo -> fator .)
    AND             reduce using rule 57 (termo -> fator .)
    ENTONCES        reduce using rule 57 (termo -> fator .)
    OR              reduce using rule 57 (termo -> fator .)
    HACER           reduce using rule 57 (termo -> fator .)
    SIGUIENTE       reduce using rule 57 (termo -> fator .)
    .               reduce using rule 57 (termo -> fator .)


state 46

    (58) fator -> INT .

    *               reduce using rule 58 (fator -> INT .)
    /               reduce using rule 58 (fator -> INT .)
    ^               reduce using rule 58 (fator -> INT .)
    +               reduce using rule 58 (fator -> INT .)
    -               reduce using rule 58 (fator -> INT .)
    >               reduce using rule 58 (fator -> INT .)
    <               reduce using rule 58 (fator -> INT .)
    IGUAL           reduce using rule 58 (fator -> INT .)
    DIFERENTE       reduce using rule 58 (fator -> INT .)
    ;               reduce using rule 58 (fator -> INT .)
    )               reduce using rule 58 (fator -> INT .)
    :               reduce using rule 58 (fator -> INT .)
    ,               reduce using rule 58 (fator -> INT .)
    AND             reduce using rule 58 (fator -> INT .)
    ENTONCES        reduce using rule 58 (fator -> INT .)
    OR              reduce using rule 58 (fator -> INT .)
    HACER           reduce using rule 58 (fator -> INT .)
    SIGUIENTE       reduce using rule 58 (fator -> INT .)
    .               reduce using rule 58 (fator -> INT .)


state 47

    (59) fator -> FLOAT .

    *               reduce using rule 59 (fator -> FLOAT .)
    /               reduce using rule 59 (fator -> FLOAT .)
    ^               reduce using rule 59 (fator -> FLOAT .)
    +               reduce using rule 59 (fator -> FLOAT .)
    -               reduce using rule 59 (fator -> FLOAT .)
    >               reduce using rule 59 (fator -> FLOAT .)
    <               reduce using rule 59 (fator -> FLOAT .)
    IGUAL           reduce using rule 59 (fator -> FLOAT .)
    DIFERENTE       reduce using rule 59 (fator -> FLOAT .)
    ;               reduce using rule 59 (fator -> FLOAT .)
    )               reduce using rule 59 (fator -> FLOAT .)
    :               reduce using rule 59 (fator -> FLOAT .)
    ,               reduce using rule 59 (fator -> FLOAT .)
    AND             reduce using rule 59 (fator -> FLOAT .)
    ENTONCES        reduce using rule 59 (fator -> FLOAT .)
    OR              reduce using rule 59 (fator -> FLOAT .)
    HACER           reduce using rule 59 (fator -> FLOAT .)
    SIGUIENTE       reduce using rule 59 (fator -> FLOAT .)
    .               reduce using rule 59 (fator -> FLOAT .)


state 48

    (60) fator -> ID .

    *               reduce using rule 60 (fator -> ID .)
    /               reduce using rule 60 (fator -> ID .)
    ^               reduce using rule 60 (fator -> ID .)
    +               reduce using rule 60 (fator -> ID .)
    -               reduce using rule 60 (fator -> ID .)
    >               reduce using rule 60 (fator -> ID .)
    <               reduce using rule 60 (fator -> ID .)
    IGUAL           reduce using rule 60 (fator -> ID .)
    DIFERENTE       reduce using rule 60 (fator -> ID .)
    ;               reduce using rule 60 (fator -> ID .)
    )               reduce using rule 60 (fator -> ID .)
    :               reduce using rule 60 (fator -> ID .)
    ,               reduce using rule 60 (fator -> ID .)
    AND             reduce using rule 60 (fator -> ID .)
    ENTONCES        reduce using rule 60 (fator -> ID .)
    OR              reduce using rule 60 (fator -> ID .)
    HACER           reduce using rule 60 (fator -> ID .)
    SIGUIENTE       reduce using rule 60 (fator -> ID .)
    .               reduce using rule 60 (fator -> ID .)


state 49

    (80) ciclos -> ENCUANTO expL . HACER statements .
    (66) expL -> expL . OR termoB

    HACER           shift and go to state 79
    OR              shift and go to state 65


state 50

    (81) ciclos -> PARA expL . SIGUIENTE atrib .
    (82) ciclos -> PARA expL . SIGUIENTE atrib HACER statements .
    (66) expL -> expL . OR termoB

    SIGUIENTE       shift and go to state 80
    OR              shift and go to state 65


state 51

    (83) readwrite -> ESCRIBIR ( . ID ) ;
    (84) readwrite -> ESCRIBIR ( . STRING ) ;

    ID              shift and go to state 81
    STRING          shift and go to state 82


state 52

    (86) cast -> tipocast ( . exp )
    (87) cast -> tipocast ( . STRING )
    (51) exp -> . exp + termo
    (52) exp -> . exp - termo
    (53) exp -> . termo
    (54) termo -> . termo * fator
    (55) termo -> . termo / fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . FLOAT
    (60) fator -> . ID
    (61) fator -> . ( exp )

    STRING          shift and go to state 84
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    (               shift and go to state 63

    exp                            shift and go to state 83
    termo                          shift and go to state 44
    fator                          shift and go to state 45

state 53

    (7) declV -> VAR vari : . tipo
    (12) tipo -> . ENTERO
    (13) tipo -> . REAL
    (14) tipo -> . BOOLEANO
    (15) tipo -> . STR

    ENTERO          shift and go to state 86
    REAL            shift and go to state 87
    BOOLEANO        shift and go to state 88
    STR             shift and go to state 89

    tipo                           shift and go to state 85

state 54

    (10) vari -> vari , . atribD
    (11) vari -> vari , . ID
    (16) atribD -> . ID = STRING
    (17) atribD -> . ID = VERDADERO
    (18) atribD -> . ID = FALSO
    (19) atribD -> . ID = exp

    ID              shift and go to state 91

    atribD                         shift and go to state 90

state 55

    (16) atribD -> ID = . STRING
    (17) atribD -> ID = . VERDADERO
    (18) atribD -> ID = . FALSO
    (19) atribD -> ID = . exp
    (51) exp -> . exp + termo
    (52) exp -> . exp - termo
    (53) exp -> . termo
    (54) termo -> . termo * fator
    (55) termo -> . termo / fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . FLOAT
    (60) fator -> . ID
    (61) fator -> . ( exp )

    STRING          shift and go to state 92
    VERDADERO       shift and go to state 93
    FALSO           shift and go to state 94
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    (               shift and go to state 63

    exp                            shift and go to state 95
    termo                          shift and go to state 44
    fator                          shift and go to state 45

state 56

    (31) declF -> FUNCION ID ( . parametros ) : tipo declarations statements DEVUELVE return .
    (32) parametros -> .
    (33) parametros -> . ID : tipo
    (34) parametros -> . parametros , ID : tipo

    )               reduce using rule 32 (parametros -> .)
    ,               reduce using rule 32 (parametros -> .)
    ID              shift and go to state 96

    parametros                     shift and go to state 97

state 57

    (20) declL -> LISTA ID = . lista
    (21) lista -> . [ ]
    (22) lista -> . [ elementos ]

    [               shift and go to state 99

    lista                          shift and go to state 98

state 58

    (47) atrib -> ID = STRING .

    ;               reduce using rule 47 (atrib -> ID = STRING .)
    .               reduce using rule 47 (atrib -> ID = STRING .)
    HACER           reduce using rule 47 (atrib -> ID = STRING .)


state 59

    (48) atrib -> ID = VERDADERO .

    ;               reduce using rule 48 (atrib -> ID = VERDADERO .)
    .               reduce using rule 48 (atrib -> ID = VERDADERO .)
    HACER           reduce using rule 48 (atrib -> ID = VERDADERO .)


state 60

    (49) atrib -> ID = FALSO .

    ;               reduce using rule 49 (atrib -> ID = FALSO .)
    .               reduce using rule 49 (atrib -> ID = FALSO .)
    HACER           reduce using rule 49 (atrib -> ID = FALSO .)


state 61

    (50) atrib -> ID = exp .
    (51) exp -> exp . + termo
    (52) exp -> exp . - termo

    ;               reduce using rule 50 (atrib -> ID = exp .)
    .               reduce using rule 50 (atrib -> ID = exp .)
    HACER           reduce using rule 50 (atrib -> ID = exp .)
    +               shift and go to state 70
    -               shift and go to state 71


state 62

    (85) readwrite -> ID = LEER . ( STRING ) ;

    (               shift and go to state 100


state 63

    (61) fator -> ( . exp )
    (51) exp -> . exp + termo
    (52) exp -> . exp - termo
    (53) exp -> . termo
    (54) termo -> . termo * fator
    (55) termo -> . termo / fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . FLOAT
    (60) fator -> . ID
    (61) fator -> . ( exp )

    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    (               shift and go to state 63

    exp                            shift and go to state 101
    termo                          shift and go to state 44
    fator                          shift and go to state 45

state 64

    (62) conditions -> SI expL ENTONCES . statements endcondition
    (40) statements -> . stat
    (41) statements -> . statements stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (46) stat -> . cast ;
    (47) atrib -> . ID = STRING
    (48) atrib -> . ID = VERDADERO
    (49) atrib -> . ID = FALSO
    (50) atrib -> . ID = exp
    (62) conditions -> . SI expL ENTONCES statements endcondition
    (80) ciclos -> . ENCUANTO expL HACER statements .
    (81) ciclos -> . PARA expL SIGUIENTE atrib .
    (82) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (83) readwrite -> . ESCRIBIR ( ID ) ;
    (84) readwrite -> . ESCRIBIR ( STRING ) ;
    (85) readwrite -> . ID = LEER ( STRING ) ;
    (86) cast -> . tipocast ( exp )
    (87) cast -> . tipocast ( STRING )
    (88) tipocast -> . REAL
    (89) tipocast -> . ENTERO
    (90) tipocast -> . STR

    ID              shift and go to state 18
    SI              shift and go to state 19
    ENCUANTO        shift and go to state 20
    PARA            shift and go to state 21
    ESCRIBIR        shift and go to state 22
    REAL            shift and go to state 24
    ENTERO          shift and go to state 25
    STR             shift and go to state 26

    statements                     shift and go to state 102
    stat                           shift and go to state 12
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16
    cast                           shift and go to state 17
    tipocast                       shift and go to state 23

state 65

    (66) expL -> expL OR . termoB
    (67) termoB -> . fatorB
    (68) termoB -> . termoB AND fatorB
    (69) fatorB -> . condition
    (70) fatorB -> . VERDADERO
    (71) fatorB -> . FALSO
    (72) fatorB -> . ( expL )
    (73) condition -> . exp op exp
    (51) exp -> . exp + termo
    (52) exp -> . exp - termo
    (53) exp -> . termo
    (54) termo -> . termo * fator
    (55) termo -> . termo / fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . FLOAT
    (60) fator -> . ID
    (61) fator -> . ( exp )

    VERDADERO       shift and go to state 40
    FALSO           shift and go to state 41
    (               shift and go to state 42
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48

    termoB                         shift and go to state 103
    fatorB                         shift and go to state 38
    condition                      shift and go to state 39
    exp                            shift and go to state 43
    termo                          shift and go to state 44
    fator                          shift and go to state 45

state 66

    (68) termoB -> termoB AND . fatorB
    (69) fatorB -> . condition
    (70) fatorB -> . VERDADERO
    (71) fatorB -> . FALSO
    (72) fatorB -> . ( expL )
    (73) condition -> . exp op exp
    (51) exp -> . exp + termo
    (52) exp -> . exp - termo
    (53) exp -> . termo
    (54) termo -> . termo * fator
    (55) termo -> . termo / fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . FLOAT
    (60) fator -> . ID
    (61) fator -> . ( exp )

    VERDADERO       shift and go to state 40
    FALSO           shift and go to state 41
    (               shift and go to state 42
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48

    fatorB                         shift and go to state 104
    condition                      shift and go to state 39
    exp                            shift and go to state 43
    termo                          shift and go to state 44
    fator                          shift and go to state 45

state 67

    (72) fatorB -> ( expL . )
    (66) expL -> expL . OR termoB

    )               shift and go to state 105
    OR              shift and go to state 65


state 68

    (61) fator -> ( exp . )
    (51) exp -> exp . + termo
    (52) exp -> exp . - termo
    (73) condition -> exp . op exp
    (74) op -> . >
    (75) op -> . <
    (76) op -> . IGUAL
    (77) op -> . DIFERENTE
    (78) op -> . > IGUAL
    (79) op -> . < IGUAL

    )               shift and go to state 106
    +               shift and go to state 70
    -               shift and go to state 71
    >               shift and go to state 72
    <               shift and go to state 73
    IGUAL           shift and go to state 74
    DIFERENTE       shift and go to state 75

    op                             shift and go to state 69

state 69

    (73) condition -> exp op . exp
    (51) exp -> . exp + termo
    (52) exp -> . exp - termo
    (53) exp -> . termo
    (54) termo -> . termo * fator
    (55) termo -> . termo / fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . FLOAT
    (60) fator -> . ID
    (61) fator -> . ( exp )

    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    (               shift and go to state 63

    exp                            shift and go to state 107
    termo                          shift and go to state 44
    fator                          shift and go to state 45

state 70

    (51) exp -> exp + . termo
    (54) termo -> . termo * fator
    (55) termo -> . termo / fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . FLOAT
    (60) fator -> . ID
    (61) fator -> . ( exp )

    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    (               shift and go to state 63

    termo                          shift and go to state 108
    fator                          shift and go to state 45

state 71

    (52) exp -> exp - . termo
    (54) termo -> . termo * fator
    (55) termo -> . termo / fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . FLOAT
    (60) fator -> . ID
    (61) fator -> . ( exp )

    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    (               shift and go to state 63

    termo                          shift and go to state 109
    fator                          shift and go to state 45

state 72

    (74) op -> > .
    (78) op -> > . IGUAL

    INT             reduce using rule 74 (op -> > .)
    FLOAT           reduce using rule 74 (op -> > .)
    ID              reduce using rule 74 (op -> > .)
    (               reduce using rule 74 (op -> > .)
    IGUAL           shift and go to state 110


state 73

    (75) op -> < .
    (79) op -> < . IGUAL

    INT             reduce using rule 75 (op -> < .)
    FLOAT           reduce using rule 75 (op -> < .)
    ID              reduce using rule 75 (op -> < .)
    (               reduce using rule 75 (op -> < .)
    IGUAL           shift and go to state 111


state 74

    (76) op -> IGUAL .

    INT             reduce using rule 76 (op -> IGUAL .)
    FLOAT           reduce using rule 76 (op -> IGUAL .)
    ID              reduce using rule 76 (op -> IGUAL .)
    (               reduce using rule 76 (op -> IGUAL .)


state 75

    (77) op -> DIFERENTE .

    INT             reduce using rule 77 (op -> DIFERENTE .)
    FLOAT           reduce using rule 77 (op -> DIFERENTE .)
    ID              reduce using rule 77 (op -> DIFERENTE .)
    (               reduce using rule 77 (op -> DIFERENTE .)


state 76

    (54) termo -> termo * . fator
    (58) fator -> . INT
    (59) fator -> . FLOAT
    (60) fator -> . ID
    (61) fator -> . ( exp )

    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    (               shift and go to state 63

    fator                          shift and go to state 112

state 77

    (55) termo -> termo / . fator
    (58) fator -> . INT
    (59) fator -> . FLOAT
    (60) fator -> . ID
    (61) fator -> . ( exp )

    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    (               shift and go to state 63

    fator                          shift and go to state 113

state 78

    (56) termo -> termo ^ . fator
    (58) fator -> . INT
    (59) fator -> . FLOAT
    (60) fator -> . ID
    (61) fator -> . ( exp )

    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    (               shift and go to state 63

    fator                          shift and go to state 114

state 79

    (80) ciclos -> ENCUANTO expL HACER . statements .
    (40) statements -> . stat
    (41) statements -> . statements stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (46) stat -> . cast ;
    (47) atrib -> . ID = STRING
    (48) atrib -> . ID = VERDADERO
    (49) atrib -> . ID = FALSO
    (50) atrib -> . ID = exp
    (62) conditions -> . SI expL ENTONCES statements endcondition
    (80) ciclos -> . ENCUANTO expL HACER statements .
    (81) ciclos -> . PARA expL SIGUIENTE atrib .
    (82) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (83) readwrite -> . ESCRIBIR ( ID ) ;
    (84) readwrite -> . ESCRIBIR ( STRING ) ;
    (85) readwrite -> . ID = LEER ( STRING ) ;
    (86) cast -> . tipocast ( exp )
    (87) cast -> . tipocast ( STRING )
    (88) tipocast -> . REAL
    (89) tipocast -> . ENTERO
    (90) tipocast -> . STR

    ID              shift and go to state 18
    SI              shift and go to state 19
    ENCUANTO        shift and go to state 20
    PARA            shift and go to state 21
    ESCRIBIR        shift and go to state 22
    REAL            shift and go to state 24
    ENTERO          shift and go to state 25
    STR             shift and go to state 26

    statements                     shift and go to state 115
    stat                           shift and go to state 12
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16
    cast                           shift and go to state 17
    tipocast                       shift and go to state 23

state 80

    (81) ciclos -> PARA expL SIGUIENTE . atrib .
    (82) ciclos -> PARA expL SIGUIENTE . atrib HACER statements .
    (47) atrib -> . ID = STRING
    (48) atrib -> . ID = VERDADERO
    (49) atrib -> . ID = FALSO
    (50) atrib -> . ID = exp

    ID              shift and go to state 117

    atrib                          shift and go to state 116

state 81

    (83) readwrite -> ESCRIBIR ( ID . ) ;

    )               shift and go to state 118


state 82

    (84) readwrite -> ESCRIBIR ( STRING . ) ;

    )               shift and go to state 119


state 83

    (86) cast -> tipocast ( exp . )
    (51) exp -> exp . + termo
    (52) exp -> exp . - termo

    )               shift and go to state 120
    +               shift and go to state 70
    -               shift and go to state 71


state 84

    (87) cast -> tipocast ( STRING . )

    )               shift and go to state 121


state 85

    (7) declV -> VAR vari : tipo .

    VAR             reduce using rule 7 (declV -> VAR vari : tipo .)
    FUNCION         reduce using rule 7 (declV -> VAR vari : tipo .)
    LISTA           reduce using rule 7 (declV -> VAR vari : tipo .)
    ID              reduce using rule 7 (declV -> VAR vari : tipo .)
    SI              reduce using rule 7 (declV -> VAR vari : tipo .)
    ENCUANTO        reduce using rule 7 (declV -> VAR vari : tipo .)
    PARA            reduce using rule 7 (declV -> VAR vari : tipo .)
    ESCRIBIR        reduce using rule 7 (declV -> VAR vari : tipo .)
    REAL            reduce using rule 7 (declV -> VAR vari : tipo .)
    ENTERO          reduce using rule 7 (declV -> VAR vari : tipo .)
    STR             reduce using rule 7 (declV -> VAR vari : tipo .)


state 86

    (12) tipo -> ENTERO .

    VAR             reduce using rule 12 (tipo -> ENTERO .)
    FUNCION         reduce using rule 12 (tipo -> ENTERO .)
    LISTA           reduce using rule 12 (tipo -> ENTERO .)
    ID              reduce using rule 12 (tipo -> ENTERO .)
    SI              reduce using rule 12 (tipo -> ENTERO .)
    ENCUANTO        reduce using rule 12 (tipo -> ENTERO .)
    PARA            reduce using rule 12 (tipo -> ENTERO .)
    ESCRIBIR        reduce using rule 12 (tipo -> ENTERO .)
    REAL            reduce using rule 12 (tipo -> ENTERO .)
    ENTERO          reduce using rule 12 (tipo -> ENTERO .)
    STR             reduce using rule 12 (tipo -> ENTERO .)
    )               reduce using rule 12 (tipo -> ENTERO .)
    ,               reduce using rule 12 (tipo -> ENTERO .)


state 87

    (13) tipo -> REAL .

    VAR             reduce using rule 13 (tipo -> REAL .)
    FUNCION         reduce using rule 13 (tipo -> REAL .)
    LISTA           reduce using rule 13 (tipo -> REAL .)
    ID              reduce using rule 13 (tipo -> REAL .)
    SI              reduce using rule 13 (tipo -> REAL .)
    ENCUANTO        reduce using rule 13 (tipo -> REAL .)
    PARA            reduce using rule 13 (tipo -> REAL .)
    ESCRIBIR        reduce using rule 13 (tipo -> REAL .)
    REAL            reduce using rule 13 (tipo -> REAL .)
    ENTERO          reduce using rule 13 (tipo -> REAL .)
    STR             reduce using rule 13 (tipo -> REAL .)
    )               reduce using rule 13 (tipo -> REAL .)
    ,               reduce using rule 13 (tipo -> REAL .)


state 88

    (14) tipo -> BOOLEANO .

    VAR             reduce using rule 14 (tipo -> BOOLEANO .)
    FUNCION         reduce using rule 14 (tipo -> BOOLEANO .)
    LISTA           reduce using rule 14 (tipo -> BOOLEANO .)
    ID              reduce using rule 14 (tipo -> BOOLEANO .)
    SI              reduce using rule 14 (tipo -> BOOLEANO .)
    ENCUANTO        reduce using rule 14 (tipo -> BOOLEANO .)
    PARA            reduce using rule 14 (tipo -> BOOLEANO .)
    ESCRIBIR        reduce using rule 14 (tipo -> BOOLEANO .)
    REAL            reduce using rule 14 (tipo -> BOOLEANO .)
    ENTERO          reduce using rule 14 (tipo -> BOOLEANO .)
    STR             reduce using rule 14 (tipo -> BOOLEANO .)
    )               reduce using rule 14 (tipo -> BOOLEANO .)
    ,               reduce using rule 14 (tipo -> BOOLEANO .)


state 89

    (15) tipo -> STR .

    VAR             reduce using rule 15 (tipo -> STR .)
    FUNCION         reduce using rule 15 (tipo -> STR .)
    LISTA           reduce using rule 15 (tipo -> STR .)
    ID              reduce using rule 15 (tipo -> STR .)
    SI              reduce using rule 15 (tipo -> STR .)
    ENCUANTO        reduce using rule 15 (tipo -> STR .)
    PARA            reduce using rule 15 (tipo -> STR .)
    ESCRIBIR        reduce using rule 15 (tipo -> STR .)
    REAL            reduce using rule 15 (tipo -> STR .)
    ENTERO          reduce using rule 15 (tipo -> STR .)
    STR             reduce using rule 15 (tipo -> STR .)
    )               reduce using rule 15 (tipo -> STR .)
    ,               reduce using rule 15 (tipo -> STR .)


state 90

    (10) vari -> vari , atribD .

    :               reduce using rule 10 (vari -> vari , atribD .)
    ,               reduce using rule 10 (vari -> vari , atribD .)


state 91

    (11) vari -> vari , ID .
    (16) atribD -> ID . = STRING
    (17) atribD -> ID . = VERDADERO
    (18) atribD -> ID . = FALSO
    (19) atribD -> ID . = exp

    :               reduce using rule 11 (vari -> vari , ID .)
    ,               reduce using rule 11 (vari -> vari , ID .)
    =               shift and go to state 55


state 92

    (16) atribD -> ID = STRING .

    :               reduce using rule 16 (atribD -> ID = STRING .)
    ,               reduce using rule 16 (atribD -> ID = STRING .)


state 93

    (17) atribD -> ID = VERDADERO .

    :               reduce using rule 17 (atribD -> ID = VERDADERO .)
    ,               reduce using rule 17 (atribD -> ID = VERDADERO .)


state 94

    (18) atribD -> ID = FALSO .

    :               reduce using rule 18 (atribD -> ID = FALSO .)
    ,               reduce using rule 18 (atribD -> ID = FALSO .)


state 95

    (19) atribD -> ID = exp .
    (51) exp -> exp . + termo
    (52) exp -> exp . - termo

    :               reduce using rule 19 (atribD -> ID = exp .)
    ,               reduce using rule 19 (atribD -> ID = exp .)
    +               shift and go to state 70
    -               shift and go to state 71


state 96

    (33) parametros -> ID . : tipo

    :               shift and go to state 122


state 97

    (31) declF -> FUNCION ID ( parametros . ) : tipo declarations statements DEVUELVE return .
    (34) parametros -> parametros . , ID : tipo

    )               shift and go to state 123
    ,               shift and go to state 124


state 98

    (20) declL -> LISTA ID = lista .

    VAR             reduce using rule 20 (declL -> LISTA ID = lista .)
    FUNCION         reduce using rule 20 (declL -> LISTA ID = lista .)
    LISTA           reduce using rule 20 (declL -> LISTA ID = lista .)
    ID              reduce using rule 20 (declL -> LISTA ID = lista .)
    SI              reduce using rule 20 (declL -> LISTA ID = lista .)
    ENCUANTO        reduce using rule 20 (declL -> LISTA ID = lista .)
    PARA            reduce using rule 20 (declL -> LISTA ID = lista .)
    ESCRIBIR        reduce using rule 20 (declL -> LISTA ID = lista .)
    REAL            reduce using rule 20 (declL -> LISTA ID = lista .)
    ENTERO          reduce using rule 20 (declL -> LISTA ID = lista .)
    STR             reduce using rule 20 (declL -> LISTA ID = lista .)


state 99

    (21) lista -> [ . ]
    (22) lista -> [ . elementos ]
    (23) elementos -> . elemento
    (24) elementos -> . elementos , elemento
    (25) elemento -> . INT
    (26) elemento -> . FLOAT
    (27) elemento -> . BOOLEANO
    (28) elemento -> . STRING
    (29) elemento -> . ID
    (30) elemento -> . lista
    (21) lista -> . [ ]
    (22) lista -> . [ elementos ]

    ]               shift and go to state 125
    INT             shift and go to state 128
    FLOAT           shift and go to state 129
    BOOLEANO        shift and go to state 130
    STRING          shift and go to state 131
    ID              shift and go to state 132
    [               shift and go to state 99

    elementos                      shift and go to state 126
    elemento                       shift and go to state 127
    lista                          shift and go to state 133

state 100

    (85) readwrite -> ID = LEER ( . STRING ) ;

    STRING          shift and go to state 134


state 101

    (61) fator -> ( exp . )
    (51) exp -> exp . + termo
    (52) exp -> exp . - termo

    )               shift and go to state 106
    +               shift and go to state 70
    -               shift and go to state 71


state 102

    (62) conditions -> SI expL ENTONCES statements . endcondition
    (41) statements -> statements . stat
    (63) endcondition -> . .
    (64) endcondition -> . CASO CONTRARIO statements .
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (46) stat -> . cast ;
    (47) atrib -> . ID = STRING
    (48) atrib -> . ID = VERDADERO
    (49) atrib -> . ID = FALSO
    (50) atrib -> . ID = exp
    (62) conditions -> . SI expL ENTONCES statements endcondition
    (80) ciclos -> . ENCUANTO expL HACER statements .
    (81) ciclos -> . PARA expL SIGUIENTE atrib .
    (82) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (83) readwrite -> . ESCRIBIR ( ID ) ;
    (84) readwrite -> . ESCRIBIR ( STRING ) ;
    (85) readwrite -> . ID = LEER ( STRING ) ;
    (86) cast -> . tipocast ( exp )
    (87) cast -> . tipocast ( STRING )
    (88) tipocast -> . REAL
    (89) tipocast -> . ENTERO
    (90) tipocast -> . STR

    .               shift and go to state 136
    CASO            shift and go to state 137
    ID              shift and go to state 18
    SI              shift and go to state 19
    ENCUANTO        shift and go to state 20
    PARA            shift and go to state 21
    ESCRIBIR        shift and go to state 22
    REAL            shift and go to state 24
    ENTERO          shift and go to state 25
    STR             shift and go to state 26

    endcondition                   shift and go to state 135
    stat                           shift and go to state 32
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16
    cast                           shift and go to state 17
    tipocast                       shift and go to state 23

state 103

    (66) expL -> expL OR termoB .
    (68) termoB -> termoB . AND fatorB

    ENTONCES        reduce using rule 66 (expL -> expL OR termoB .)
    OR              reduce using rule 66 (expL -> expL OR termoB .)
    HACER           reduce using rule 66 (expL -> expL OR termoB .)
    SIGUIENTE       reduce using rule 66 (expL -> expL OR termoB .)
    )               reduce using rule 66 (expL -> expL OR termoB .)
    AND             shift and go to state 66


state 104

    (68) termoB -> termoB AND fatorB .

    AND             reduce using rule 68 (termoB -> termoB AND fatorB .)
    ENTONCES        reduce using rule 68 (termoB -> termoB AND fatorB .)
    OR              reduce using rule 68 (termoB -> termoB AND fatorB .)
    HACER           reduce using rule 68 (termoB -> termoB AND fatorB .)
    SIGUIENTE       reduce using rule 68 (termoB -> termoB AND fatorB .)
    )               reduce using rule 68 (termoB -> termoB AND fatorB .)


state 105

    (72) fatorB -> ( expL ) .

    AND             reduce using rule 72 (fatorB -> ( expL ) .)
    ENTONCES        reduce using rule 72 (fatorB -> ( expL ) .)
    OR              reduce using rule 72 (fatorB -> ( expL ) .)
    HACER           reduce using rule 72 (fatorB -> ( expL ) .)
    SIGUIENTE       reduce using rule 72 (fatorB -> ( expL ) .)
    )               reduce using rule 72 (fatorB -> ( expL ) .)


state 106

    (61) fator -> ( exp ) .

    *               reduce using rule 61 (fator -> ( exp ) .)
    /               reduce using rule 61 (fator -> ( exp ) .)
    ^               reduce using rule 61 (fator -> ( exp ) .)
    +               reduce using rule 61 (fator -> ( exp ) .)
    -               reduce using rule 61 (fator -> ( exp ) .)
    >               reduce using rule 61 (fator -> ( exp ) .)
    <               reduce using rule 61 (fator -> ( exp ) .)
    IGUAL           reduce using rule 61 (fator -> ( exp ) .)
    DIFERENTE       reduce using rule 61 (fator -> ( exp ) .)
    ;               reduce using rule 61 (fator -> ( exp ) .)
    )               reduce using rule 61 (fator -> ( exp ) .)
    :               reduce using rule 61 (fator -> ( exp ) .)
    ,               reduce using rule 61 (fator -> ( exp ) .)
    AND             reduce using rule 61 (fator -> ( exp ) .)
    ENTONCES        reduce using rule 61 (fator -> ( exp ) .)
    OR              reduce using rule 61 (fator -> ( exp ) .)
    HACER           reduce using rule 61 (fator -> ( exp ) .)
    SIGUIENTE       reduce using rule 61 (fator -> ( exp ) .)
    .               reduce using rule 61 (fator -> ( exp ) .)


state 107

    (73) condition -> exp op exp .
    (51) exp -> exp . + termo
    (52) exp -> exp . - termo

    AND             reduce using rule 73 (condition -> exp op exp .)
    ENTONCES        reduce using rule 73 (condition -> exp op exp .)
    OR              reduce using rule 73 (condition -> exp op exp .)
    HACER           reduce using rule 73 (condition -> exp op exp .)
    SIGUIENTE       reduce using rule 73 (condition -> exp op exp .)
    )               reduce using rule 73 (condition -> exp op exp .)
    +               shift and go to state 70
    -               shift and go to state 71


state 108

    (51) exp -> exp + termo .
    (54) termo -> termo . * fator
    (55) termo -> termo . / fator
    (56) termo -> termo . ^ fator

    +               reduce using rule 51 (exp -> exp + termo .)
    -               reduce using rule 51 (exp -> exp + termo .)
    >               reduce using rule 51 (exp -> exp + termo .)
    <               reduce using rule 51 (exp -> exp + termo .)
    IGUAL           reduce using rule 51 (exp -> exp + termo .)
    DIFERENTE       reduce using rule 51 (exp -> exp + termo .)
    ;               reduce using rule 51 (exp -> exp + termo .)
    )               reduce using rule 51 (exp -> exp + termo .)
    :               reduce using rule 51 (exp -> exp + termo .)
    ,               reduce using rule 51 (exp -> exp + termo .)
    AND             reduce using rule 51 (exp -> exp + termo .)
    ENTONCES        reduce using rule 51 (exp -> exp + termo .)
    OR              reduce using rule 51 (exp -> exp + termo .)
    HACER           reduce using rule 51 (exp -> exp + termo .)
    SIGUIENTE       reduce using rule 51 (exp -> exp + termo .)
    .               reduce using rule 51 (exp -> exp + termo .)
    *               shift and go to state 76
    /               shift and go to state 77
    ^               shift and go to state 78


state 109

    (52) exp -> exp - termo .
    (54) termo -> termo . * fator
    (55) termo -> termo . / fator
    (56) termo -> termo . ^ fator

    +               reduce using rule 52 (exp -> exp - termo .)
    -               reduce using rule 52 (exp -> exp - termo .)
    >               reduce using rule 52 (exp -> exp - termo .)
    <               reduce using rule 52 (exp -> exp - termo .)
    IGUAL           reduce using rule 52 (exp -> exp - termo .)
    DIFERENTE       reduce using rule 52 (exp -> exp - termo .)
    ;               reduce using rule 52 (exp -> exp - termo .)
    )               reduce using rule 52 (exp -> exp - termo .)
    :               reduce using rule 52 (exp -> exp - termo .)
    ,               reduce using rule 52 (exp -> exp - termo .)
    AND             reduce using rule 52 (exp -> exp - termo .)
    ENTONCES        reduce using rule 52 (exp -> exp - termo .)
    OR              reduce using rule 52 (exp -> exp - termo .)
    HACER           reduce using rule 52 (exp -> exp - termo .)
    SIGUIENTE       reduce using rule 52 (exp -> exp - termo .)
    .               reduce using rule 52 (exp -> exp - termo .)
    *               shift and go to state 76
    /               shift and go to state 77
    ^               shift and go to state 78


state 110

    (78) op -> > IGUAL .

    INT             reduce using rule 78 (op -> > IGUAL .)
    FLOAT           reduce using rule 78 (op -> > IGUAL .)
    ID              reduce using rule 78 (op -> > IGUAL .)
    (               reduce using rule 78 (op -> > IGUAL .)


state 111

    (79) op -> < IGUAL .

    INT             reduce using rule 79 (op -> < IGUAL .)
    FLOAT           reduce using rule 79 (op -> < IGUAL .)
    ID              reduce using rule 79 (op -> < IGUAL .)
    (               reduce using rule 79 (op -> < IGUAL .)


state 112

    (54) termo -> termo * fator .

    *               reduce using rule 54 (termo -> termo * fator .)
    /               reduce using rule 54 (termo -> termo * fator .)
    ^               reduce using rule 54 (termo -> termo * fator .)
    +               reduce using rule 54 (termo -> termo * fator .)
    -               reduce using rule 54 (termo -> termo * fator .)
    >               reduce using rule 54 (termo -> termo * fator .)
    <               reduce using rule 54 (termo -> termo * fator .)
    IGUAL           reduce using rule 54 (termo -> termo * fator .)
    DIFERENTE       reduce using rule 54 (termo -> termo * fator .)
    ;               reduce using rule 54 (termo -> termo * fator .)
    )               reduce using rule 54 (termo -> termo * fator .)
    :               reduce using rule 54 (termo -> termo * fator .)
    ,               reduce using rule 54 (termo -> termo * fator .)
    AND             reduce using rule 54 (termo -> termo * fator .)
    ENTONCES        reduce using rule 54 (termo -> termo * fator .)
    OR              reduce using rule 54 (termo -> termo * fator .)
    HACER           reduce using rule 54 (termo -> termo * fator .)
    SIGUIENTE       reduce using rule 54 (termo -> termo * fator .)
    .               reduce using rule 54 (termo -> termo * fator .)


state 113

    (55) termo -> termo / fator .

    *               reduce using rule 55 (termo -> termo / fator .)
    /               reduce using rule 55 (termo -> termo / fator .)
    ^               reduce using rule 55 (termo -> termo / fator .)
    +               reduce using rule 55 (termo -> termo / fator .)
    -               reduce using rule 55 (termo -> termo / fator .)
    >               reduce using rule 55 (termo -> termo / fator .)
    <               reduce using rule 55 (termo -> termo / fator .)
    IGUAL           reduce using rule 55 (termo -> termo / fator .)
    DIFERENTE       reduce using rule 55 (termo -> termo / fator .)
    ;               reduce using rule 55 (termo -> termo / fator .)
    )               reduce using rule 55 (termo -> termo / fator .)
    :               reduce using rule 55 (termo -> termo / fator .)
    ,               reduce using rule 55 (termo -> termo / fator .)
    AND             reduce using rule 55 (termo -> termo / fator .)
    ENTONCES        reduce using rule 55 (termo -> termo / fator .)
    OR              reduce using rule 55 (termo -> termo / fator .)
    HACER           reduce using rule 55 (termo -> termo / fator .)
    SIGUIENTE       reduce using rule 55 (termo -> termo / fator .)
    .               reduce using rule 55 (termo -> termo / fator .)


state 114

    (56) termo -> termo ^ fator .

    *               reduce using rule 56 (termo -> termo ^ fator .)
    /               reduce using rule 56 (termo -> termo ^ fator .)
    ^               reduce using rule 56 (termo -> termo ^ fator .)
    +               reduce using rule 56 (termo -> termo ^ fator .)
    -               reduce using rule 56 (termo -> termo ^ fator .)
    >               reduce using rule 56 (termo -> termo ^ fator .)
    <               reduce using rule 56 (termo -> termo ^ fator .)
    IGUAL           reduce using rule 56 (termo -> termo ^ fator .)
    DIFERENTE       reduce using rule 56 (termo -> termo ^ fator .)
    ;               reduce using rule 56 (termo -> termo ^ fator .)
    )               reduce using rule 56 (termo -> termo ^ fator .)
    :               reduce using rule 56 (termo -> termo ^ fator .)
    ,               reduce using rule 56 (termo -> termo ^ fator .)
    AND             reduce using rule 56 (termo -> termo ^ fator .)
    ENTONCES        reduce using rule 56 (termo -> termo ^ fator .)
    OR              reduce using rule 56 (termo -> termo ^ fator .)
    HACER           reduce using rule 56 (termo -> termo ^ fator .)
    SIGUIENTE       reduce using rule 56 (termo -> termo ^ fator .)
    .               reduce using rule 56 (termo -> termo ^ fator .)


state 115

    (80) ciclos -> ENCUANTO expL HACER statements . .
    (41) statements -> statements . stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (46) stat -> . cast ;
    (47) atrib -> . ID = STRING
    (48) atrib -> . ID = VERDADERO
    (49) atrib -> . ID = FALSO
    (50) atrib -> . ID = exp
    (62) conditions -> . SI expL ENTONCES statements endcondition
    (80) ciclos -> . ENCUANTO expL HACER statements .
    (81) ciclos -> . PARA expL SIGUIENTE atrib .
    (82) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (83) readwrite -> . ESCRIBIR ( ID ) ;
    (84) readwrite -> . ESCRIBIR ( STRING ) ;
    (85) readwrite -> . ID = LEER ( STRING ) ;
    (86) cast -> . tipocast ( exp )
    (87) cast -> . tipocast ( STRING )
    (88) tipocast -> . REAL
    (89) tipocast -> . ENTERO
    (90) tipocast -> . STR

    .               shift and go to state 138
    ID              shift and go to state 18
    SI              shift and go to state 19
    ENCUANTO        shift and go to state 20
    PARA            shift and go to state 21
    ESCRIBIR        shift and go to state 22
    REAL            shift and go to state 24
    ENTERO          shift and go to state 25
    STR             shift and go to state 26

    stat                           shift and go to state 32
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16
    cast                           shift and go to state 17
    tipocast                       shift and go to state 23

state 116

    (81) ciclos -> PARA expL SIGUIENTE atrib . .
    (82) ciclos -> PARA expL SIGUIENTE atrib . HACER statements .

    .               shift and go to state 139
    HACER           shift and go to state 140


state 117

    (47) atrib -> ID . = STRING
    (48) atrib -> ID . = VERDADERO
    (49) atrib -> ID . = FALSO
    (50) atrib -> ID . = exp

    =               shift and go to state 141


state 118

    (83) readwrite -> ESCRIBIR ( ID ) . ;

    ;               shift and go to state 142


state 119

    (84) readwrite -> ESCRIBIR ( STRING ) . ;

    ;               shift and go to state 143


state 120

    (86) cast -> tipocast ( exp ) .

    ;               reduce using rule 86 (cast -> tipocast ( exp ) .)


state 121

    (87) cast -> tipocast ( STRING ) .

    ;               reduce using rule 87 (cast -> tipocast ( STRING ) .)


state 122

    (33) parametros -> ID : . tipo
    (12) tipo -> . ENTERO
    (13) tipo -> . REAL
    (14) tipo -> . BOOLEANO
    (15) tipo -> . STR

    ENTERO          shift and go to state 86
    REAL            shift and go to state 87
    BOOLEANO        shift and go to state 88
    STR             shift and go to state 89

    tipo                           shift and go to state 144

state 123

    (31) declF -> FUNCION ID ( parametros ) . : tipo declarations statements DEVUELVE return .

    :               shift and go to state 145


state 124

    (34) parametros -> parametros , . ID : tipo

    ID              shift and go to state 146


state 125

    (21) lista -> [ ] .

    VAR             reduce using rule 21 (lista -> [ ] .)
    FUNCION         reduce using rule 21 (lista -> [ ] .)
    LISTA           reduce using rule 21 (lista -> [ ] .)
    ID              reduce using rule 21 (lista -> [ ] .)
    SI              reduce using rule 21 (lista -> [ ] .)
    ENCUANTO        reduce using rule 21 (lista -> [ ] .)
    PARA            reduce using rule 21 (lista -> [ ] .)
    ESCRIBIR        reduce using rule 21 (lista -> [ ] .)
    REAL            reduce using rule 21 (lista -> [ ] .)
    ENTERO          reduce using rule 21 (lista -> [ ] .)
    STR             reduce using rule 21 (lista -> [ ] .)
    ]               reduce using rule 21 (lista -> [ ] .)
    ,               reduce using rule 21 (lista -> [ ] .)


state 126

    (22) lista -> [ elementos . ]
    (24) elementos -> elementos . , elemento

    ]               shift and go to state 147
    ,               shift and go to state 148


state 127

    (23) elementos -> elemento .

    ]               reduce using rule 23 (elementos -> elemento .)
    ,               reduce using rule 23 (elementos -> elemento .)


state 128

    (25) elemento -> INT .

    ]               reduce using rule 25 (elemento -> INT .)
    ,               reduce using rule 25 (elemento -> INT .)


state 129

    (26) elemento -> FLOAT .

    ]               reduce using rule 26 (elemento -> FLOAT .)
    ,               reduce using rule 26 (elemento -> FLOAT .)


state 130

    (27) elemento -> BOOLEANO .

    ]               reduce using rule 27 (elemento -> BOOLEANO .)
    ,               reduce using rule 27 (elemento -> BOOLEANO .)


state 131

    (28) elemento -> STRING .

    ]               reduce using rule 28 (elemento -> STRING .)
    ,               reduce using rule 28 (elemento -> STRING .)


state 132

    (29) elemento -> ID .

    ]               reduce using rule 29 (elemento -> ID .)
    ,               reduce using rule 29 (elemento -> ID .)


state 133

    (30) elemento -> lista .

    ]               reduce using rule 30 (elemento -> lista .)
    ,               reduce using rule 30 (elemento -> lista .)


state 134

    (85) readwrite -> ID = LEER ( STRING . ) ;

    )               shift and go to state 149


state 135

    (62) conditions -> SI expL ENTONCES statements endcondition .

    ID              reduce using rule 62 (conditions -> SI expL ENTONCES statements endcondition .)
    SI              reduce using rule 62 (conditions -> SI expL ENTONCES statements endcondition .)
    ENCUANTO        reduce using rule 62 (conditions -> SI expL ENTONCES statements endcondition .)
    PARA            reduce using rule 62 (conditions -> SI expL ENTONCES statements endcondition .)
    ESCRIBIR        reduce using rule 62 (conditions -> SI expL ENTONCES statements endcondition .)
    REAL            reduce using rule 62 (conditions -> SI expL ENTONCES statements endcondition .)
    ENTERO          reduce using rule 62 (conditions -> SI expL ENTONCES statements endcondition .)
    STR             reduce using rule 62 (conditions -> SI expL ENTONCES statements endcondition .)
    $end            reduce using rule 62 (conditions -> SI expL ENTONCES statements endcondition .)
    .               reduce using rule 62 (conditions -> SI expL ENTONCES statements endcondition .)
    CASO            reduce using rule 62 (conditions -> SI expL ENTONCES statements endcondition .)
    DEVUELVE        reduce using rule 62 (conditions -> SI expL ENTONCES statements endcondition .)


state 136

    (63) endcondition -> . .

    ID              reduce using rule 63 (endcondition -> . .)
    SI              reduce using rule 63 (endcondition -> . .)
    ENCUANTO        reduce using rule 63 (endcondition -> . .)
    PARA            reduce using rule 63 (endcondition -> . .)
    ESCRIBIR        reduce using rule 63 (endcondition -> . .)
    REAL            reduce using rule 63 (endcondition -> . .)
    ENTERO          reduce using rule 63 (endcondition -> . .)
    STR             reduce using rule 63 (endcondition -> . .)
    $end            reduce using rule 63 (endcondition -> . .)
    .               reduce using rule 63 (endcondition -> . .)
    CASO            reduce using rule 63 (endcondition -> . .)
    DEVUELVE        reduce using rule 63 (endcondition -> . .)


state 137

    (64) endcondition -> CASO . CONTRARIO statements .

    CONTRARIO       shift and go to state 150


state 138

    (80) ciclos -> ENCUANTO expL HACER statements . .

    ID              reduce using rule 80 (ciclos -> ENCUANTO expL HACER statements . .)
    SI              reduce using rule 80 (ciclos -> ENCUANTO expL HACER statements . .)
    ENCUANTO        reduce using rule 80 (ciclos -> ENCUANTO expL HACER statements . .)
    PARA            reduce using rule 80 (ciclos -> ENCUANTO expL HACER statements . .)
    ESCRIBIR        reduce using rule 80 (ciclos -> ENCUANTO expL HACER statements . .)
    REAL            reduce using rule 80 (ciclos -> ENCUANTO expL HACER statements . .)
    ENTERO          reduce using rule 80 (ciclos -> ENCUANTO expL HACER statements . .)
    STR             reduce using rule 80 (ciclos -> ENCUANTO expL HACER statements . .)
    $end            reduce using rule 80 (ciclos -> ENCUANTO expL HACER statements . .)
    .               reduce using rule 80 (ciclos -> ENCUANTO expL HACER statements . .)
    CASO            reduce using rule 80 (ciclos -> ENCUANTO expL HACER statements . .)
    DEVUELVE        reduce using rule 80 (ciclos -> ENCUANTO expL HACER statements . .)


state 139

    (81) ciclos -> PARA expL SIGUIENTE atrib . .

    ID              reduce using rule 81 (ciclos -> PARA expL SIGUIENTE atrib . .)
    SI              reduce using rule 81 (ciclos -> PARA expL SIGUIENTE atrib . .)
    ENCUANTO        reduce using rule 81 (ciclos -> PARA expL SIGUIENTE atrib . .)
    PARA            reduce using rule 81 (ciclos -> PARA expL SIGUIENTE atrib . .)
    ESCRIBIR        reduce using rule 81 (ciclos -> PARA expL SIGUIENTE atrib . .)
    REAL            reduce using rule 81 (ciclos -> PARA expL SIGUIENTE atrib . .)
    ENTERO          reduce using rule 81 (ciclos -> PARA expL SIGUIENTE atrib . .)
    STR             reduce using rule 81 (ciclos -> PARA expL SIGUIENTE atrib . .)
    $end            reduce using rule 81 (ciclos -> PARA expL SIGUIENTE atrib . .)
    .               reduce using rule 81 (ciclos -> PARA expL SIGUIENTE atrib . .)
    CASO            reduce using rule 81 (ciclos -> PARA expL SIGUIENTE atrib . .)
    DEVUELVE        reduce using rule 81 (ciclos -> PARA expL SIGUIENTE atrib . .)


state 140

    (82) ciclos -> PARA expL SIGUIENTE atrib HACER . statements .
    (40) statements -> . stat
    (41) statements -> . statements stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (46) stat -> . cast ;
    (47) atrib -> . ID = STRING
    (48) atrib -> . ID = VERDADERO
    (49) atrib -> . ID = FALSO
    (50) atrib -> . ID = exp
    (62) conditions -> . SI expL ENTONCES statements endcondition
    (80) ciclos -> . ENCUANTO expL HACER statements .
    (81) ciclos -> . PARA expL SIGUIENTE atrib .
    (82) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (83) readwrite -> . ESCRIBIR ( ID ) ;
    (84) readwrite -> . ESCRIBIR ( STRING ) ;
    (85) readwrite -> . ID = LEER ( STRING ) ;
    (86) cast -> . tipocast ( exp )
    (87) cast -> . tipocast ( STRING )
    (88) tipocast -> . REAL
    (89) tipocast -> . ENTERO
    (90) tipocast -> . STR

    ID              shift and go to state 18
    SI              shift and go to state 19
    ENCUANTO        shift and go to state 20
    PARA            shift and go to state 21
    ESCRIBIR        shift and go to state 22
    REAL            shift and go to state 24
    ENTERO          shift and go to state 25
    STR             shift and go to state 26

    atrib                          shift and go to state 13
    statements                     shift and go to state 151
    stat                           shift and go to state 12
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16
    cast                           shift and go to state 17
    tipocast                       shift and go to state 23

state 141

    (47) atrib -> ID = . STRING
    (48) atrib -> ID = . VERDADERO
    (49) atrib -> ID = . FALSO
    (50) atrib -> ID = . exp
    (51) exp -> . exp + termo
    (52) exp -> . exp - termo
    (53) exp -> . termo
    (54) termo -> . termo * fator
    (55) termo -> . termo / fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . FLOAT
    (60) fator -> . ID
    (61) fator -> . ( exp )

    STRING          shift and go to state 58
    VERDADERO       shift and go to state 59
    FALSO           shift and go to state 60
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    ID              shift and go to state 48
    (               shift and go to state 63

    exp                            shift and go to state 61
    termo                          shift and go to state 44
    fator                          shift and go to state 45

state 142

    (83) readwrite -> ESCRIBIR ( ID ) ; .

    ID              reduce using rule 83 (readwrite -> ESCRIBIR ( ID ) ; .)
    SI              reduce using rule 83 (readwrite -> ESCRIBIR ( ID ) ; .)
    ENCUANTO        reduce using rule 83 (readwrite -> ESCRIBIR ( ID ) ; .)
    PARA            reduce using rule 83 (readwrite -> ESCRIBIR ( ID ) ; .)
    ESCRIBIR        reduce using rule 83 (readwrite -> ESCRIBIR ( ID ) ; .)
    REAL            reduce using rule 83 (readwrite -> ESCRIBIR ( ID ) ; .)
    ENTERO          reduce using rule 83 (readwrite -> ESCRIBIR ( ID ) ; .)
    STR             reduce using rule 83 (readwrite -> ESCRIBIR ( ID ) ; .)
    $end            reduce using rule 83 (readwrite -> ESCRIBIR ( ID ) ; .)
    .               reduce using rule 83 (readwrite -> ESCRIBIR ( ID ) ; .)
    CASO            reduce using rule 83 (readwrite -> ESCRIBIR ( ID ) ; .)
    DEVUELVE        reduce using rule 83 (readwrite -> ESCRIBIR ( ID ) ; .)


state 143

    (84) readwrite -> ESCRIBIR ( STRING ) ; .

    ID              reduce using rule 84 (readwrite -> ESCRIBIR ( STRING ) ; .)
    SI              reduce using rule 84 (readwrite -> ESCRIBIR ( STRING ) ; .)
    ENCUANTO        reduce using rule 84 (readwrite -> ESCRIBIR ( STRING ) ; .)
    PARA            reduce using rule 84 (readwrite -> ESCRIBIR ( STRING ) ; .)
    ESCRIBIR        reduce using rule 84 (readwrite -> ESCRIBIR ( STRING ) ; .)
    REAL            reduce using rule 84 (readwrite -> ESCRIBIR ( STRING ) ; .)
    ENTERO          reduce using rule 84 (readwrite -> ESCRIBIR ( STRING ) ; .)
    STR             reduce using rule 84 (readwrite -> ESCRIBIR ( STRING ) ; .)
    $end            reduce using rule 84 (readwrite -> ESCRIBIR ( STRING ) ; .)
    .               reduce using rule 84 (readwrite -> ESCRIBIR ( STRING ) ; .)
    CASO            reduce using rule 84 (readwrite -> ESCRIBIR ( STRING ) ; .)
    DEVUELVE        reduce using rule 84 (readwrite -> ESCRIBIR ( STRING ) ; .)


state 144

    (33) parametros -> ID : tipo .

    )               reduce using rule 33 (parametros -> ID : tipo .)
    ,               reduce using rule 33 (parametros -> ID : tipo .)


state 145

    (31) declF -> FUNCION ID ( parametros ) : . tipo declarations statements DEVUELVE return .
    (12) tipo -> . ENTERO
    (13) tipo -> . REAL
    (14) tipo -> . BOOLEANO
    (15) tipo -> . STR

    ENTERO          shift and go to state 86
    REAL            shift and go to state 87
    BOOLEANO        shift and go to state 88
    STR             shift and go to state 89

    tipo                           shift and go to state 152

state 146

    (34) parametros -> parametros , ID . : tipo

    :               shift and go to state 153


state 147

    (22) lista -> [ elementos ] .

    VAR             reduce using rule 22 (lista -> [ elementos ] .)
    FUNCION         reduce using rule 22 (lista -> [ elementos ] .)
    LISTA           reduce using rule 22 (lista -> [ elementos ] .)
    ID              reduce using rule 22 (lista -> [ elementos ] .)
    SI              reduce using rule 22 (lista -> [ elementos ] .)
    ENCUANTO        reduce using rule 22 (lista -> [ elementos ] .)
    PARA            reduce using rule 22 (lista -> [ elementos ] .)
    ESCRIBIR        reduce using rule 22 (lista -> [ elementos ] .)
    REAL            reduce using rule 22 (lista -> [ elementos ] .)
    ENTERO          reduce using rule 22 (lista -> [ elementos ] .)
    STR             reduce using rule 22 (lista -> [ elementos ] .)
    ]               reduce using rule 22 (lista -> [ elementos ] .)
    ,               reduce using rule 22 (lista -> [ elementos ] .)


state 148

    (24) elementos -> elementos , . elemento
    (25) elemento -> . INT
    (26) elemento -> . FLOAT
    (27) elemento -> . BOOLEANO
    (28) elemento -> . STRING
    (29) elemento -> . ID
    (30) elemento -> . lista
    (21) lista -> . [ ]
    (22) lista -> . [ elementos ]

    INT             shift and go to state 128
    FLOAT           shift and go to state 129
    BOOLEANO        shift and go to state 130
    STRING          shift and go to state 131
    ID              shift and go to state 132
    [               shift and go to state 99

    elemento                       shift and go to state 154
    lista                          shift and go to state 133

state 149

    (85) readwrite -> ID = LEER ( STRING ) . ;

    ;               shift and go to state 155


state 150

    (64) endcondition -> CASO CONTRARIO . statements .
    (40) statements -> . stat
    (41) statements -> . statements stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (46) stat -> . cast ;
    (47) atrib -> . ID = STRING
    (48) atrib -> . ID = VERDADERO
    (49) atrib -> . ID = FALSO
    (50) atrib -> . ID = exp
    (62) conditions -> . SI expL ENTONCES statements endcondition
    (80) ciclos -> . ENCUANTO expL HACER statements .
    (81) ciclos -> . PARA expL SIGUIENTE atrib .
    (82) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (83) readwrite -> . ESCRIBIR ( ID ) ;
    (84) readwrite -> . ESCRIBIR ( STRING ) ;
    (85) readwrite -> . ID = LEER ( STRING ) ;
    (86) cast -> . tipocast ( exp )
    (87) cast -> . tipocast ( STRING )
    (88) tipocast -> . REAL
    (89) tipocast -> . ENTERO
    (90) tipocast -> . STR

    ID              shift and go to state 18
    SI              shift and go to state 19
    ENCUANTO        shift and go to state 20
    PARA            shift and go to state 21
    ESCRIBIR        shift and go to state 22
    REAL            shift and go to state 24
    ENTERO          shift and go to state 25
    STR             shift and go to state 26

    statements                     shift and go to state 156
    stat                           shift and go to state 12
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16
    cast                           shift and go to state 17
    tipocast                       shift and go to state 23

state 151

    (82) ciclos -> PARA expL SIGUIENTE atrib HACER statements . .
    (41) statements -> statements . stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (46) stat -> . cast ;
    (47) atrib -> . ID = STRING
    (48) atrib -> . ID = VERDADERO
    (49) atrib -> . ID = FALSO
    (50) atrib -> . ID = exp
    (62) conditions -> . SI expL ENTONCES statements endcondition
    (80) ciclos -> . ENCUANTO expL HACER statements .
    (81) ciclos -> . PARA expL SIGUIENTE atrib .
    (82) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (83) readwrite -> . ESCRIBIR ( ID ) ;
    (84) readwrite -> . ESCRIBIR ( STRING ) ;
    (85) readwrite -> . ID = LEER ( STRING ) ;
    (86) cast -> . tipocast ( exp )
    (87) cast -> . tipocast ( STRING )
    (88) tipocast -> . REAL
    (89) tipocast -> . ENTERO
    (90) tipocast -> . STR

    .               shift and go to state 157
    ID              shift and go to state 18
    SI              shift and go to state 19
    ENCUANTO        shift and go to state 20
    PARA            shift and go to state 21
    ESCRIBIR        shift and go to state 22
    REAL            shift and go to state 24
    ENTERO          shift and go to state 25
    STR             shift and go to state 26

    atrib                          shift and go to state 13
    stat                           shift and go to state 32
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16
    cast                           shift and go to state 17
    tipocast                       shift and go to state 23

state 152

    (31) declF -> FUNCION ID ( parametros ) : tipo . declarations statements DEVUELVE return .
    (2) declarations -> . decl
    (3) declarations -> . declarations decl
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (7) declV -> . VAR vari : tipo
    (31) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (20) declL -> . LISTA ID = lista

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9

    declarations                   shift and go to state 158
    decl                           shift and go to state 3
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6

state 153

    (34) parametros -> parametros , ID : . tipo
    (12) tipo -> . ENTERO
    (13) tipo -> . REAL
    (14) tipo -> . BOOLEANO
    (15) tipo -> . STR

    ENTERO          shift and go to state 86
    REAL            shift and go to state 87
    BOOLEANO        shift and go to state 88
    STR             shift and go to state 89

    tipo                           shift and go to state 159

state 154

    (24) elementos -> elementos , elemento .

    ]               reduce using rule 24 (elementos -> elementos , elemento .)
    ,               reduce using rule 24 (elementos -> elementos , elemento .)


state 155

    (85) readwrite -> ID = LEER ( STRING ) ; .

    ID              reduce using rule 85 (readwrite -> ID = LEER ( STRING ) ; .)
    SI              reduce using rule 85 (readwrite -> ID = LEER ( STRING ) ; .)
    ENCUANTO        reduce using rule 85 (readwrite -> ID = LEER ( STRING ) ; .)
    PARA            reduce using rule 85 (readwrite -> ID = LEER ( STRING ) ; .)
    ESCRIBIR        reduce using rule 85 (readwrite -> ID = LEER ( STRING ) ; .)
    REAL            reduce using rule 85 (readwrite -> ID = LEER ( STRING ) ; .)
    ENTERO          reduce using rule 85 (readwrite -> ID = LEER ( STRING ) ; .)
    STR             reduce using rule 85 (readwrite -> ID = LEER ( STRING ) ; .)
    $end            reduce using rule 85 (readwrite -> ID = LEER ( STRING ) ; .)
    .               reduce using rule 85 (readwrite -> ID = LEER ( STRING ) ; .)
    CASO            reduce using rule 85 (readwrite -> ID = LEER ( STRING ) ; .)
    DEVUELVE        reduce using rule 85 (readwrite -> ID = LEER ( STRING ) ; .)


state 156

    (64) endcondition -> CASO CONTRARIO statements . .
    (41) statements -> statements . stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (46) stat -> . cast ;
    (47) atrib -> . ID = STRING
    (48) atrib -> . ID = VERDADERO
    (49) atrib -> . ID = FALSO
    (50) atrib -> . ID = exp
    (62) conditions -> . SI expL ENTONCES statements endcondition
    (80) ciclos -> . ENCUANTO expL HACER statements .
    (81) ciclos -> . PARA expL SIGUIENTE atrib .
    (82) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (83) readwrite -> . ESCRIBIR ( ID ) ;
    (84) readwrite -> . ESCRIBIR ( STRING ) ;
    (85) readwrite -> . ID = LEER ( STRING ) ;
    (86) cast -> . tipocast ( exp )
    (87) cast -> . tipocast ( STRING )
    (88) tipocast -> . REAL
    (89) tipocast -> . ENTERO
    (90) tipocast -> . STR

    .               shift and go to state 160
    ID              shift and go to state 18
    SI              shift and go to state 19
    ENCUANTO        shift and go to state 20
    PARA            shift and go to state 21
    ESCRIBIR        shift and go to state 22
    REAL            shift and go to state 24
    ENTERO          shift and go to state 25
    STR             shift and go to state 26

    stat                           shift and go to state 32
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16
    cast                           shift and go to state 17
    tipocast                       shift and go to state 23

state 157

    (82) ciclos -> PARA expL SIGUIENTE atrib HACER statements . .

    ID              reduce using rule 82 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    SI              reduce using rule 82 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    ENCUANTO        reduce using rule 82 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    PARA            reduce using rule 82 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    ESCRIBIR        reduce using rule 82 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    REAL            reduce using rule 82 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    ENTERO          reduce using rule 82 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    STR             reduce using rule 82 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    $end            reduce using rule 82 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    .               reduce using rule 82 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    CASO            reduce using rule 82 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    DEVUELVE        reduce using rule 82 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)


state 158

    (31) declF -> FUNCION ID ( parametros ) : tipo declarations . statements DEVUELVE return .
    (3) declarations -> declarations . decl
    (40) statements -> . stat
    (41) statements -> . statements stat
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (46) stat -> . cast ;
    (7) declV -> . VAR vari : tipo
    (31) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (20) declL -> . LISTA ID = lista
    (47) atrib -> . ID = STRING
    (48) atrib -> . ID = VERDADERO
    (49) atrib -> . ID = FALSO
    (50) atrib -> . ID = exp
    (62) conditions -> . SI expL ENTONCES statements endcondition
    (80) ciclos -> . ENCUANTO expL HACER statements .
    (81) ciclos -> . PARA expL SIGUIENTE atrib .
    (82) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (83) readwrite -> . ESCRIBIR ( ID ) ;
    (84) readwrite -> . ESCRIBIR ( STRING ) ;
    (85) readwrite -> . ID = LEER ( STRING ) ;
    (86) cast -> . tipocast ( exp )
    (87) cast -> . tipocast ( STRING )
    (88) tipocast -> . REAL
    (89) tipocast -> . ENTERO
    (90) tipocast -> . STR

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9
    ID              shift and go to state 18
    SI              shift and go to state 19
    ENCUANTO        shift and go to state 20
    PARA            shift and go to state 21
    ESCRIBIR        shift and go to state 22
    REAL            shift and go to state 24
    ENTERO          shift and go to state 25
    STR             shift and go to state 26

    statements                     shift and go to state 161
    decl                           shift and go to state 11
    stat                           shift and go to state 12
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16
    cast                           shift and go to state 17
    tipocast                       shift and go to state 23

state 159

    (34) parametros -> parametros , ID : tipo .

    )               reduce using rule 34 (parametros -> parametros , ID : tipo .)
    ,               reduce using rule 34 (parametros -> parametros , ID : tipo .)


state 160

    (64) endcondition -> CASO CONTRARIO statements . .

    ID              reduce using rule 64 (endcondition -> CASO CONTRARIO statements . .)
    SI              reduce using rule 64 (endcondition -> CASO CONTRARIO statements . .)
    ENCUANTO        reduce using rule 64 (endcondition -> CASO CONTRARIO statements . .)
    PARA            reduce using rule 64 (endcondition -> CASO CONTRARIO statements . .)
    ESCRIBIR        reduce using rule 64 (endcondition -> CASO CONTRARIO statements . .)
    REAL            reduce using rule 64 (endcondition -> CASO CONTRARIO statements . .)
    ENTERO          reduce using rule 64 (endcondition -> CASO CONTRARIO statements . .)
    STR             reduce using rule 64 (endcondition -> CASO CONTRARIO statements . .)
    $end            reduce using rule 64 (endcondition -> CASO CONTRARIO statements . .)
    .               reduce using rule 64 (endcondition -> CASO CONTRARIO statements . .)
    CASO            reduce using rule 64 (endcondition -> CASO CONTRARIO statements . .)
    DEVUELVE        reduce using rule 64 (endcondition -> CASO CONTRARIO statements . .)


state 161

    (31) declF -> FUNCION ID ( parametros ) : tipo declarations statements . DEVUELVE return .
    (41) statements -> statements . stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . readwrite
    (46) stat -> . cast ;
    (47) atrib -> . ID = STRING
    (48) atrib -> . ID = VERDADERO
    (49) atrib -> . ID = FALSO
    (50) atrib -> . ID = exp
    (62) conditions -> . SI expL ENTONCES statements endcondition
    (80) ciclos -> . ENCUANTO expL HACER statements .
    (81) ciclos -> . PARA expL SIGUIENTE atrib .
    (82) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (83) readwrite -> . ESCRIBIR ( ID ) ;
    (84) readwrite -> . ESCRIBIR ( STRING ) ;
    (85) readwrite -> . ID = LEER ( STRING ) ;
    (86) cast -> . tipocast ( exp )
    (87) cast -> . tipocast ( STRING )
    (88) tipocast -> . REAL
    (89) tipocast -> . ENTERO
    (90) tipocast -> . STR

    DEVUELVE        shift and go to state 162
    ID              shift and go to state 18
    SI              shift and go to state 19
    ENCUANTO        shift and go to state 20
    PARA            shift and go to state 21
    ESCRIBIR        shift and go to state 22
    REAL            shift and go to state 24
    ENTERO          shift and go to state 25
    STR             shift and go to state 26

    stat                           shift and go to state 32
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16
    cast                           shift and go to state 17
    tipocast                       shift and go to state 23

state 162

    (31) declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE . return .
    (35) return -> . INT
    (36) return -> . ID
    (37) return -> . FLOAT
    (38) return -> . VERDADERO
    (39) return -> . FALSO

    INT             shift and go to state 165
    ID              shift and go to state 163
    FLOAT           shift and go to state 166
    VERDADERO       shift and go to state 167
    FALSO           shift and go to state 168

    return                         shift and go to state 164

state 163

    (36) return -> ID .

    .               reduce using rule 36 (return -> ID .)


state 164

    (31) declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .

    .               shift and go to state 169


state 165

    (35) return -> INT .

    .               reduce using rule 35 (return -> INT .)


state 166

    (37) return -> FLOAT .

    .               reduce using rule 37 (return -> FLOAT .)


state 167

    (38) return -> VERDADERO .

    .               reduce using rule 38 (return -> VERDADERO .)


state 168

    (39) return -> FALSO .

    .               reduce using rule 39 (return -> FALSO .)


state 169

    (31) declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .

    VAR             reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    FUNCION         reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    LISTA           reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    ID              reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    SI              reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    ENCUANTO        reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    PARA            reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    ESCRIBIR        reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    REAL            reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    ENTERO          reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    STR             reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)

