Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ENTER
    ESCRIBE
    ESCRIBIR
    LEER
    NADA
    RESTO

Grammar

Rule 0     S' -> prg
Rule 1     prg -> declarations statements
Rule 2     declarations -> decl
Rule 3     declarations -> declarations decl
Rule 4     decl -> declV
Rule 5     decl -> declF
Rule 6     decl -> declL
Rule 7     declV -> VAR ids : tipo
Rule 8     declV -> VAR atribs : tipo
Rule 9     atribs -> atrib
Rule 10    atribs -> atribs , atrib
Rule 11    ids -> ID
Rule 12    ids -> ids , ID
Rule 13    tipo -> ENTERO
Rule 14    tipo -> REAL
Rule 15    tipo -> BOOLEANO
Rule 16    declL -> LISTA ID = lista
Rule 17    lista -> [ ]
Rule 18    lista -> [ elementos ]
Rule 19    elementos -> elemento
Rule 20    elementos -> elementos , elemento
Rule 21    elemento -> INT
Rule 22    elemento -> FLOAT
Rule 23    elemento -> BOOLEANO
Rule 24    elemento -> STRING
Rule 25    elemento -> ID
Rule 26    elemento -> lista
Rule 27    declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
Rule 28    parametros -> <empty>
Rule 29    parametros -> ID : tipo
Rule 30    parametros -> parametros , ID : tipo
Rule 31    return -> INT
Rule 32    return -> ID
Rule 33    return -> FLOAT
Rule 34    return -> VERDADERO
Rule 35    return -> FALSO
Rule 36    statements -> stat
Rule 37    statements -> statements stat
Rule 38    stat -> atrib ;
Rule 39    stat -> conditions
Rule 40    stat -> ciclos
Rule 41    atrib -> ID = exp
Rule 42    exp -> exp + termo
Rule 43    exp -> exp - termo
Rule 44    exp -> termo
Rule 45    termo -> termo * fator
Rule 46    termo -> termo / fator
Rule 47    termo -> termo ^ fator
Rule 48    termo -> fator
Rule 49    fator -> INT
Rule 50    fator -> FLOAT
Rule 51    fator -> ID
Rule 52    fator -> ( exp )
Rule 53    conditions -> SI expL ENTONCES statements endcondition
Rule 54    endcondition -> .
Rule 55    endcondition -> CASO CONTRARIO statements .
Rule 56    expL -> termoB
Rule 57    expL -> expL OR termoB
Rule 58    termoB -> fatorB
Rule 59    termoB -> termoB AND fatorB
Rule 60    fatorB -> condition
Rule 61    fatorB -> BOOLEANO
Rule 62    fatorB -> ( expL )
Rule 63    condition -> exp op exp
Rule 64    op -> >
Rule 65    op -> <
Rule 66    op -> IGUAL
Rule 67    op -> DIFERENTE
Rule 68    op -> > IGUAL
Rule 69    op -> < IGUAL
Rule 70    ciclos -> ENCUANTO expL HACER statements .
Rule 71    ciclos -> PARA expL SIGUIENTE atrib .
Rule 72    ciclos -> PARA expL SIGUIENTE atrib HACER statements .

Terminals, with rules where they appear

(                    : 27 52 62
)                    : 27 52 62
*                    : 45
+                    : 42
,                    : 10 12 20 30
-                    : 43
.                    : 27 54 55 70 71 72
/                    : 46
:                    : 7 8 27 29 30
;                    : 38
<                    : 65 69
=                    : 16 41
>                    : 64 68
AND                  : 59
BOOLEANO             : 15 23 61
CASO                 : 55
CONTRARIO            : 55
DEVUELVE             : 27
DIFERENTE            : 67
ENCUANTO             : 70
ENTER                : 
ENTERO               : 13
ENTONCES             : 53
ESCRIBE              : 
ESCRIBIR             : 
FALSO                : 35
FLOAT                : 22 33 50
FUNCION              : 27
HACER                : 70 72
ID                   : 11 12 16 25 27 29 30 32 41 51
IGUAL                : 66 68 69
INT                  : 21 31 49
LEER                 : 
LISTA                : 16
NADA                 : 
OR                   : 57
PARA                 : 71 72
REAL                 : 14
RESTO                : 
SI                   : 53
SIGUIENTE            : 71 72
STRING               : 24
VAR                  : 7 8
VERDADERO            : 34
[                    : 17 18
]                    : 17 18
^                    : 47
error                : 

Nonterminals, with rules where they appear

atrib                : 9 10 38 71 72
atribs               : 8 10
ciclos               : 40
condition            : 60
conditions           : 39
decl                 : 2 3
declF                : 5
declL                : 6
declV                : 4
declarations         : 1 3 27
elemento             : 19 20
elementos            : 18 20
endcondition         : 53
exp                  : 41 42 43 52 63 63
expL                 : 53 57 62 70 71 72
fator                : 45 46 47 48
fatorB               : 58 59
ids                  : 7 12
lista                : 16 26
op                   : 63
parametros           : 27 30
prg                  : 0
return               : 27
stat                 : 36 37
statements           : 1 27 37 53 55 70 72
termo                : 42 43 44 45 46 47
termoB               : 56 57 59
tipo                 : 7 8 27 29 30

Parsing method: LALR

state 0

    (0) S' -> . prg
    (1) prg -> . declarations statements
    (2) declarations -> . decl
    (3) declarations -> . declarations decl
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (7) declV -> . VAR ids : tipo
    (8) declV -> . VAR atribs : tipo
    (27) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (16) declL -> . LISTA ID = lista

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9

    prg                            shift and go to state 1
    declarations                   shift and go to state 2
    decl                           shift and go to state 3
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6

state 1

    (0) S' -> prg .



state 2

    (1) prg -> declarations . statements
    (3) declarations -> declarations . decl
    (36) statements -> . stat
    (37) statements -> . statements stat
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (7) declV -> . VAR ids : tipo
    (8) declV -> . VAR atribs : tipo
    (27) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (16) declL -> . LISTA ID = lista
    (41) atrib -> . ID = exp
    (53) conditions -> . SI expL ENTONCES statements endcondition
    (70) ciclos -> . ENCUANTO expL HACER statements .
    (71) ciclos -> . PARA expL SIGUIENTE atrib .
    (72) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9
    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    statements                     shift and go to state 10
    decl                           shift and go to state 11
    stat                           shift and go to state 12
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 3

    (2) declarations -> decl .

    VAR             reduce using rule 2 (declarations -> decl .)
    FUNCION         reduce using rule 2 (declarations -> decl .)
    LISTA           reduce using rule 2 (declarations -> decl .)
    ID              reduce using rule 2 (declarations -> decl .)
    SI              reduce using rule 2 (declarations -> decl .)
    ENCUANTO        reduce using rule 2 (declarations -> decl .)
    PARA            reduce using rule 2 (declarations -> decl .)


state 4

    (4) decl -> declV .

    VAR             reduce using rule 4 (decl -> declV .)
    FUNCION         reduce using rule 4 (decl -> declV .)
    LISTA           reduce using rule 4 (decl -> declV .)
    ID              reduce using rule 4 (decl -> declV .)
    SI              reduce using rule 4 (decl -> declV .)
    ENCUANTO        reduce using rule 4 (decl -> declV .)
    PARA            reduce using rule 4 (decl -> declV .)


state 5

    (5) decl -> declF .

    VAR             reduce using rule 5 (decl -> declF .)
    FUNCION         reduce using rule 5 (decl -> declF .)
    LISTA           reduce using rule 5 (decl -> declF .)
    ID              reduce using rule 5 (decl -> declF .)
    SI              reduce using rule 5 (decl -> declF .)
    ENCUANTO        reduce using rule 5 (decl -> declF .)
    PARA            reduce using rule 5 (decl -> declF .)


state 6

    (6) decl -> declL .

    VAR             reduce using rule 6 (decl -> declL .)
    FUNCION         reduce using rule 6 (decl -> declL .)
    LISTA           reduce using rule 6 (decl -> declL .)
    ID              reduce using rule 6 (decl -> declL .)
    SI              reduce using rule 6 (decl -> declL .)
    ENCUANTO        reduce using rule 6 (decl -> declL .)
    PARA            reduce using rule 6 (decl -> declL .)


state 7

    (7) declV -> VAR . ids : tipo
    (8) declV -> VAR . atribs : tipo
    (11) ids -> . ID
    (12) ids -> . ids , ID
    (9) atribs -> . atrib
    (10) atribs -> . atribs , atrib
    (41) atrib -> . ID = exp

    ID              shift and go to state 22

    ids                            shift and go to state 20
    atribs                         shift and go to state 21
    atrib                          shift and go to state 23

state 8

    (27) declF -> FUNCION . ID ( parametros ) : tipo declarations statements DEVUELVE return .

    ID              shift and go to state 24


state 9

    (16) declL -> LISTA . ID = lista

    ID              shift and go to state 25


state 10

    (1) prg -> declarations statements .
    (37) statements -> statements . stat
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (41) atrib -> . ID = exp
    (53) conditions -> . SI expL ENTONCES statements endcondition
    (70) ciclos -> . ENCUANTO expL HACER statements .
    (71) ciclos -> . PARA expL SIGUIENTE atrib .
    (72) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    $end            reduce using rule 1 (prg -> declarations statements .)
    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    stat                           shift and go to state 26
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 11

    (3) declarations -> declarations decl .

    VAR             reduce using rule 3 (declarations -> declarations decl .)
    FUNCION         reduce using rule 3 (declarations -> declarations decl .)
    LISTA           reduce using rule 3 (declarations -> declarations decl .)
    ID              reduce using rule 3 (declarations -> declarations decl .)
    SI              reduce using rule 3 (declarations -> declarations decl .)
    ENCUANTO        reduce using rule 3 (declarations -> declarations decl .)
    PARA            reduce using rule 3 (declarations -> declarations decl .)


state 12

    (36) statements -> stat .

    ID              reduce using rule 36 (statements -> stat .)
    SI              reduce using rule 36 (statements -> stat .)
    ENCUANTO        reduce using rule 36 (statements -> stat .)
    PARA            reduce using rule 36 (statements -> stat .)
    $end            reduce using rule 36 (statements -> stat .)
    .               reduce using rule 36 (statements -> stat .)
    CASO            reduce using rule 36 (statements -> stat .)
    DEVUELVE        reduce using rule 36 (statements -> stat .)


state 13

    (38) stat -> atrib . ;

    ;               shift and go to state 27


state 14

    (39) stat -> conditions .

    ID              reduce using rule 39 (stat -> conditions .)
    SI              reduce using rule 39 (stat -> conditions .)
    ENCUANTO        reduce using rule 39 (stat -> conditions .)
    PARA            reduce using rule 39 (stat -> conditions .)
    $end            reduce using rule 39 (stat -> conditions .)
    .               reduce using rule 39 (stat -> conditions .)
    CASO            reduce using rule 39 (stat -> conditions .)
    DEVUELVE        reduce using rule 39 (stat -> conditions .)


state 15

    (40) stat -> ciclos .

    ID              reduce using rule 40 (stat -> ciclos .)
    SI              reduce using rule 40 (stat -> ciclos .)
    ENCUANTO        reduce using rule 40 (stat -> ciclos .)
    PARA            reduce using rule 40 (stat -> ciclos .)
    $end            reduce using rule 40 (stat -> ciclos .)
    .               reduce using rule 40 (stat -> ciclos .)
    CASO            reduce using rule 40 (stat -> ciclos .)
    DEVUELVE        reduce using rule 40 (stat -> ciclos .)


state 16

    (41) atrib -> ID . = exp

    =               shift and go to state 28


state 17

    (53) conditions -> SI . expL ENTONCES statements endcondition
    (56) expL -> . termoB
    (57) expL -> . expL OR termoB
    (58) termoB -> . fatorB
    (59) termoB -> . termoB AND fatorB
    (60) fatorB -> . condition
    (61) fatorB -> . BOOLEANO
    (62) fatorB -> . ( expL )
    (63) condition -> . exp op exp
    (42) exp -> . exp + termo
    (43) exp -> . exp - termo
    (44) exp -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo ^ fator
    (48) termo -> . fator
    (49) fator -> . INT
    (50) fator -> . FLOAT
    (51) fator -> . ID
    (52) fator -> . ( exp )

    BOOLEANO        shift and go to state 33
    (               shift and go to state 34
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    ID              shift and go to state 40

    expL                           shift and go to state 29
    termoB                         shift and go to state 30
    fatorB                         shift and go to state 31
    condition                      shift and go to state 32
    exp                            shift and go to state 35
    termo                          shift and go to state 36
    fator                          shift and go to state 37

state 18

    (70) ciclos -> ENCUANTO . expL HACER statements .
    (56) expL -> . termoB
    (57) expL -> . expL OR termoB
    (58) termoB -> . fatorB
    (59) termoB -> . termoB AND fatorB
    (60) fatorB -> . condition
    (61) fatorB -> . BOOLEANO
    (62) fatorB -> . ( expL )
    (63) condition -> . exp op exp
    (42) exp -> . exp + termo
    (43) exp -> . exp - termo
    (44) exp -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo ^ fator
    (48) termo -> . fator
    (49) fator -> . INT
    (50) fator -> . FLOAT
    (51) fator -> . ID
    (52) fator -> . ( exp )

    BOOLEANO        shift and go to state 33
    (               shift and go to state 34
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    ID              shift and go to state 40

    expL                           shift and go to state 41
    termoB                         shift and go to state 30
    fatorB                         shift and go to state 31
    condition                      shift and go to state 32
    exp                            shift and go to state 35
    termo                          shift and go to state 36
    fator                          shift and go to state 37

state 19

    (71) ciclos -> PARA . expL SIGUIENTE atrib .
    (72) ciclos -> PARA . expL SIGUIENTE atrib HACER statements .
    (56) expL -> . termoB
    (57) expL -> . expL OR termoB
    (58) termoB -> . fatorB
    (59) termoB -> . termoB AND fatorB
    (60) fatorB -> . condition
    (61) fatorB -> . BOOLEANO
    (62) fatorB -> . ( expL )
    (63) condition -> . exp op exp
    (42) exp -> . exp + termo
    (43) exp -> . exp - termo
    (44) exp -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo ^ fator
    (48) termo -> . fator
    (49) fator -> . INT
    (50) fator -> . FLOAT
    (51) fator -> . ID
    (52) fator -> . ( exp )

    BOOLEANO        shift and go to state 33
    (               shift and go to state 34
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    ID              shift and go to state 40

    expL                           shift and go to state 42
    termoB                         shift and go to state 30
    fatorB                         shift and go to state 31
    condition                      shift and go to state 32
    exp                            shift and go to state 35
    termo                          shift and go to state 36
    fator                          shift and go to state 37

state 20

    (7) declV -> VAR ids . : tipo
    (12) ids -> ids . , ID

    :               shift and go to state 43
    ,               shift and go to state 44


state 21

    (8) declV -> VAR atribs . : tipo
    (10) atribs -> atribs . , atrib

    :               shift and go to state 45
    ,               shift and go to state 46


state 22

    (11) ids -> ID .
    (41) atrib -> ID . = exp

    :               reduce using rule 11 (ids -> ID .)
    ,               reduce using rule 11 (ids -> ID .)
    =               shift and go to state 28


state 23

    (9) atribs -> atrib .

    :               reduce using rule 9 (atribs -> atrib .)
    ,               reduce using rule 9 (atribs -> atrib .)


state 24

    (27) declF -> FUNCION ID . ( parametros ) : tipo declarations statements DEVUELVE return .

    (               shift and go to state 47


state 25

    (16) declL -> LISTA ID . = lista

    =               shift and go to state 48


state 26

    (37) statements -> statements stat .

    ID              reduce using rule 37 (statements -> statements stat .)
    SI              reduce using rule 37 (statements -> statements stat .)
    ENCUANTO        reduce using rule 37 (statements -> statements stat .)
    PARA            reduce using rule 37 (statements -> statements stat .)
    $end            reduce using rule 37 (statements -> statements stat .)
    .               reduce using rule 37 (statements -> statements stat .)
    CASO            reduce using rule 37 (statements -> statements stat .)
    DEVUELVE        reduce using rule 37 (statements -> statements stat .)


state 27

    (38) stat -> atrib ; .

    ID              reduce using rule 38 (stat -> atrib ; .)
    SI              reduce using rule 38 (stat -> atrib ; .)
    ENCUANTO        reduce using rule 38 (stat -> atrib ; .)
    PARA            reduce using rule 38 (stat -> atrib ; .)
    $end            reduce using rule 38 (stat -> atrib ; .)
    .               reduce using rule 38 (stat -> atrib ; .)
    CASO            reduce using rule 38 (stat -> atrib ; .)
    DEVUELVE        reduce using rule 38 (stat -> atrib ; .)


state 28

    (41) atrib -> ID = . exp
    (42) exp -> . exp + termo
    (43) exp -> . exp - termo
    (44) exp -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo ^ fator
    (48) termo -> . fator
    (49) fator -> . INT
    (50) fator -> . FLOAT
    (51) fator -> . ID
    (52) fator -> . ( exp )

    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    ID              shift and go to state 40
    (               shift and go to state 50

    exp                            shift and go to state 49
    termo                          shift and go to state 36
    fator                          shift and go to state 37

state 29

    (53) conditions -> SI expL . ENTONCES statements endcondition
    (57) expL -> expL . OR termoB

    ENTONCES        shift and go to state 51
    OR              shift and go to state 52


state 30

    (56) expL -> termoB .
    (59) termoB -> termoB . AND fatorB

    ENTONCES        reduce using rule 56 (expL -> termoB .)
    OR              reduce using rule 56 (expL -> termoB .)
    HACER           reduce using rule 56 (expL -> termoB .)
    SIGUIENTE       reduce using rule 56 (expL -> termoB .)
    )               reduce using rule 56 (expL -> termoB .)
    AND             shift and go to state 53


state 31

    (58) termoB -> fatorB .

    AND             reduce using rule 58 (termoB -> fatorB .)
    ENTONCES        reduce using rule 58 (termoB -> fatorB .)
    OR              reduce using rule 58 (termoB -> fatorB .)
    HACER           reduce using rule 58 (termoB -> fatorB .)
    SIGUIENTE       reduce using rule 58 (termoB -> fatorB .)
    )               reduce using rule 58 (termoB -> fatorB .)


state 32

    (60) fatorB -> condition .

    AND             reduce using rule 60 (fatorB -> condition .)
    ENTONCES        reduce using rule 60 (fatorB -> condition .)
    OR              reduce using rule 60 (fatorB -> condition .)
    HACER           reduce using rule 60 (fatorB -> condition .)
    SIGUIENTE       reduce using rule 60 (fatorB -> condition .)
    )               reduce using rule 60 (fatorB -> condition .)


state 33

    (61) fatorB -> BOOLEANO .

    AND             reduce using rule 61 (fatorB -> BOOLEANO .)
    ENTONCES        reduce using rule 61 (fatorB -> BOOLEANO .)
    OR              reduce using rule 61 (fatorB -> BOOLEANO .)
    HACER           reduce using rule 61 (fatorB -> BOOLEANO .)
    SIGUIENTE       reduce using rule 61 (fatorB -> BOOLEANO .)
    )               reduce using rule 61 (fatorB -> BOOLEANO .)


state 34

    (62) fatorB -> ( . expL )
    (52) fator -> ( . exp )
    (56) expL -> . termoB
    (57) expL -> . expL OR termoB
    (42) exp -> . exp + termo
    (43) exp -> . exp - termo
    (44) exp -> . termo
    (58) termoB -> . fatorB
    (59) termoB -> . termoB AND fatorB
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo ^ fator
    (48) termo -> . fator
    (60) fatorB -> . condition
    (61) fatorB -> . BOOLEANO
    (62) fatorB -> . ( expL )
    (49) fator -> . INT
    (50) fator -> . FLOAT
    (51) fator -> . ID
    (52) fator -> . ( exp )
    (63) condition -> . exp op exp

    BOOLEANO        shift and go to state 33
    (               shift and go to state 34
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    ID              shift and go to state 40

    expL                           shift and go to state 54
    exp                            shift and go to state 55
    termoB                         shift and go to state 30
    termo                          shift and go to state 36
    fatorB                         shift and go to state 31
    fator                          shift and go to state 37
    condition                      shift and go to state 32

state 35

    (63) condition -> exp . op exp
    (42) exp -> exp . + termo
    (43) exp -> exp . - termo
    (64) op -> . >
    (65) op -> . <
    (66) op -> . IGUAL
    (67) op -> . DIFERENTE
    (68) op -> . > IGUAL
    (69) op -> . < IGUAL

    +               shift and go to state 57
    -               shift and go to state 58
    >               shift and go to state 59
    <               shift and go to state 60
    IGUAL           shift and go to state 61
    DIFERENTE       shift and go to state 62

    op                             shift and go to state 56

state 36

    (44) exp -> termo .
    (45) termo -> termo . * fator
    (46) termo -> termo . / fator
    (47) termo -> termo . ^ fator

    +               reduce using rule 44 (exp -> termo .)
    -               reduce using rule 44 (exp -> termo .)
    >               reduce using rule 44 (exp -> termo .)
    <               reduce using rule 44 (exp -> termo .)
    IGUAL           reduce using rule 44 (exp -> termo .)
    DIFERENTE       reduce using rule 44 (exp -> termo .)
    ;               reduce using rule 44 (exp -> termo .)
    :               reduce using rule 44 (exp -> termo .)
    ,               reduce using rule 44 (exp -> termo .)
    .               reduce using rule 44 (exp -> termo .)
    HACER           reduce using rule 44 (exp -> termo .)
    )               reduce using rule 44 (exp -> termo .)
    AND             reduce using rule 44 (exp -> termo .)
    ENTONCES        reduce using rule 44 (exp -> termo .)
    OR              reduce using rule 44 (exp -> termo .)
    SIGUIENTE       reduce using rule 44 (exp -> termo .)
    *               shift and go to state 63
    /               shift and go to state 64
    ^               shift and go to state 65


state 37

    (48) termo -> fator .

    *               reduce using rule 48 (termo -> fator .)
    /               reduce using rule 48 (termo -> fator .)
    ^               reduce using rule 48 (termo -> fator .)
    +               reduce using rule 48 (termo -> fator .)
    -               reduce using rule 48 (termo -> fator .)
    >               reduce using rule 48 (termo -> fator .)
    <               reduce using rule 48 (termo -> fator .)
    IGUAL           reduce using rule 48 (termo -> fator .)
    DIFERENTE       reduce using rule 48 (termo -> fator .)
    ;               reduce using rule 48 (termo -> fator .)
    :               reduce using rule 48 (termo -> fator .)
    ,               reduce using rule 48 (termo -> fator .)
    .               reduce using rule 48 (termo -> fator .)
    HACER           reduce using rule 48 (termo -> fator .)
    )               reduce using rule 48 (termo -> fator .)
    AND             reduce using rule 48 (termo -> fator .)
    ENTONCES        reduce using rule 48 (termo -> fator .)
    OR              reduce using rule 48 (termo -> fator .)
    SIGUIENTE       reduce using rule 48 (termo -> fator .)


state 38

    (49) fator -> INT .

    *               reduce using rule 49 (fator -> INT .)
    /               reduce using rule 49 (fator -> INT .)
    ^               reduce using rule 49 (fator -> INT .)
    +               reduce using rule 49 (fator -> INT .)
    -               reduce using rule 49 (fator -> INT .)
    >               reduce using rule 49 (fator -> INT .)
    <               reduce using rule 49 (fator -> INT .)
    IGUAL           reduce using rule 49 (fator -> INT .)
    DIFERENTE       reduce using rule 49 (fator -> INT .)
    ;               reduce using rule 49 (fator -> INT .)
    :               reduce using rule 49 (fator -> INT .)
    ,               reduce using rule 49 (fator -> INT .)
    .               reduce using rule 49 (fator -> INT .)
    HACER           reduce using rule 49 (fator -> INT .)
    )               reduce using rule 49 (fator -> INT .)
    AND             reduce using rule 49 (fator -> INT .)
    ENTONCES        reduce using rule 49 (fator -> INT .)
    OR              reduce using rule 49 (fator -> INT .)
    SIGUIENTE       reduce using rule 49 (fator -> INT .)


state 39

    (50) fator -> FLOAT .

    *               reduce using rule 50 (fator -> FLOAT .)
    /               reduce using rule 50 (fator -> FLOAT .)
    ^               reduce using rule 50 (fator -> FLOAT .)
    +               reduce using rule 50 (fator -> FLOAT .)
    -               reduce using rule 50 (fator -> FLOAT .)
    >               reduce using rule 50 (fator -> FLOAT .)
    <               reduce using rule 50 (fator -> FLOAT .)
    IGUAL           reduce using rule 50 (fator -> FLOAT .)
    DIFERENTE       reduce using rule 50 (fator -> FLOAT .)
    ;               reduce using rule 50 (fator -> FLOAT .)
    :               reduce using rule 50 (fator -> FLOAT .)
    ,               reduce using rule 50 (fator -> FLOAT .)
    .               reduce using rule 50 (fator -> FLOAT .)
    HACER           reduce using rule 50 (fator -> FLOAT .)
    )               reduce using rule 50 (fator -> FLOAT .)
    AND             reduce using rule 50 (fator -> FLOAT .)
    ENTONCES        reduce using rule 50 (fator -> FLOAT .)
    OR              reduce using rule 50 (fator -> FLOAT .)
    SIGUIENTE       reduce using rule 50 (fator -> FLOAT .)


state 40

    (51) fator -> ID .

    *               reduce using rule 51 (fator -> ID .)
    /               reduce using rule 51 (fator -> ID .)
    ^               reduce using rule 51 (fator -> ID .)
    +               reduce using rule 51 (fator -> ID .)
    -               reduce using rule 51 (fator -> ID .)
    >               reduce using rule 51 (fator -> ID .)
    <               reduce using rule 51 (fator -> ID .)
    IGUAL           reduce using rule 51 (fator -> ID .)
    DIFERENTE       reduce using rule 51 (fator -> ID .)
    ;               reduce using rule 51 (fator -> ID .)
    :               reduce using rule 51 (fator -> ID .)
    ,               reduce using rule 51 (fator -> ID .)
    .               reduce using rule 51 (fator -> ID .)
    HACER           reduce using rule 51 (fator -> ID .)
    )               reduce using rule 51 (fator -> ID .)
    AND             reduce using rule 51 (fator -> ID .)
    ENTONCES        reduce using rule 51 (fator -> ID .)
    OR              reduce using rule 51 (fator -> ID .)
    SIGUIENTE       reduce using rule 51 (fator -> ID .)


state 41

    (70) ciclos -> ENCUANTO expL . HACER statements .
    (57) expL -> expL . OR termoB

    HACER           shift and go to state 66
    OR              shift and go to state 52


state 42

    (71) ciclos -> PARA expL . SIGUIENTE atrib .
    (72) ciclos -> PARA expL . SIGUIENTE atrib HACER statements .
    (57) expL -> expL . OR termoB

    SIGUIENTE       shift and go to state 67
    OR              shift and go to state 52


state 43

    (7) declV -> VAR ids : . tipo
    (13) tipo -> . ENTERO
    (14) tipo -> . REAL
    (15) tipo -> . BOOLEANO

    ENTERO          shift and go to state 69
    REAL            shift and go to state 70
    BOOLEANO        shift and go to state 71

    tipo                           shift and go to state 68

state 44

    (12) ids -> ids , . ID

    ID              shift and go to state 72


state 45

    (8) declV -> VAR atribs : . tipo
    (13) tipo -> . ENTERO
    (14) tipo -> . REAL
    (15) tipo -> . BOOLEANO

    ENTERO          shift and go to state 69
    REAL            shift and go to state 70
    BOOLEANO        shift and go to state 71

    tipo                           shift and go to state 73

state 46

    (10) atribs -> atribs , . atrib
    (41) atrib -> . ID = exp

    ID              shift and go to state 16

    atrib                          shift and go to state 74

state 47

    (27) declF -> FUNCION ID ( . parametros ) : tipo declarations statements DEVUELVE return .
    (28) parametros -> .
    (29) parametros -> . ID : tipo
    (30) parametros -> . parametros , ID : tipo

    )               reduce using rule 28 (parametros -> .)
    ,               reduce using rule 28 (parametros -> .)
    ID              shift and go to state 75

    parametros                     shift and go to state 76

state 48

    (16) declL -> LISTA ID = . lista
    (17) lista -> . [ ]
    (18) lista -> . [ elementos ]

    [               shift and go to state 78

    lista                          shift and go to state 77

state 49

    (41) atrib -> ID = exp .
    (42) exp -> exp . + termo
    (43) exp -> exp . - termo

    ;               reduce using rule 41 (atrib -> ID = exp .)
    :               reduce using rule 41 (atrib -> ID = exp .)
    ,               reduce using rule 41 (atrib -> ID = exp .)
    .               reduce using rule 41 (atrib -> ID = exp .)
    HACER           reduce using rule 41 (atrib -> ID = exp .)
    +               shift and go to state 57
    -               shift and go to state 58


state 50

    (52) fator -> ( . exp )
    (42) exp -> . exp + termo
    (43) exp -> . exp - termo
    (44) exp -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo ^ fator
    (48) termo -> . fator
    (49) fator -> . INT
    (50) fator -> . FLOAT
    (51) fator -> . ID
    (52) fator -> . ( exp )

    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    ID              shift and go to state 40
    (               shift and go to state 50

    exp                            shift and go to state 79
    termo                          shift and go to state 36
    fator                          shift and go to state 37

state 51

    (53) conditions -> SI expL ENTONCES . statements endcondition
    (36) statements -> . stat
    (37) statements -> . statements stat
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (41) atrib -> . ID = exp
    (53) conditions -> . SI expL ENTONCES statements endcondition
    (70) ciclos -> . ENCUANTO expL HACER statements .
    (71) ciclos -> . PARA expL SIGUIENTE atrib .
    (72) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    statements                     shift and go to state 80
    stat                           shift and go to state 12
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 52

    (57) expL -> expL OR . termoB
    (58) termoB -> . fatorB
    (59) termoB -> . termoB AND fatorB
    (60) fatorB -> . condition
    (61) fatorB -> . BOOLEANO
    (62) fatorB -> . ( expL )
    (63) condition -> . exp op exp
    (42) exp -> . exp + termo
    (43) exp -> . exp - termo
    (44) exp -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo ^ fator
    (48) termo -> . fator
    (49) fator -> . INT
    (50) fator -> . FLOAT
    (51) fator -> . ID
    (52) fator -> . ( exp )

    BOOLEANO        shift and go to state 33
    (               shift and go to state 34
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    ID              shift and go to state 40

    termoB                         shift and go to state 81
    fatorB                         shift and go to state 31
    condition                      shift and go to state 32
    exp                            shift and go to state 35
    termo                          shift and go to state 36
    fator                          shift and go to state 37

state 53

    (59) termoB -> termoB AND . fatorB
    (60) fatorB -> . condition
    (61) fatorB -> . BOOLEANO
    (62) fatorB -> . ( expL )
    (63) condition -> . exp op exp
    (42) exp -> . exp + termo
    (43) exp -> . exp - termo
    (44) exp -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo ^ fator
    (48) termo -> . fator
    (49) fator -> . INT
    (50) fator -> . FLOAT
    (51) fator -> . ID
    (52) fator -> . ( exp )

    BOOLEANO        shift and go to state 33
    (               shift and go to state 34
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    ID              shift and go to state 40

    fatorB                         shift and go to state 82
    condition                      shift and go to state 32
    exp                            shift and go to state 35
    termo                          shift and go to state 36
    fator                          shift and go to state 37

state 54

    (62) fatorB -> ( expL . )
    (57) expL -> expL . OR termoB

    )               shift and go to state 83
    OR              shift and go to state 52


state 55

    (52) fator -> ( exp . )
    (42) exp -> exp . + termo
    (43) exp -> exp . - termo
    (63) condition -> exp . op exp
    (64) op -> . >
    (65) op -> . <
    (66) op -> . IGUAL
    (67) op -> . DIFERENTE
    (68) op -> . > IGUAL
    (69) op -> . < IGUAL

    )               shift and go to state 84
    +               shift and go to state 57
    -               shift and go to state 58
    >               shift and go to state 59
    <               shift and go to state 60
    IGUAL           shift and go to state 61
    DIFERENTE       shift and go to state 62

    op                             shift and go to state 56

state 56

    (63) condition -> exp op . exp
    (42) exp -> . exp + termo
    (43) exp -> . exp - termo
    (44) exp -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo ^ fator
    (48) termo -> . fator
    (49) fator -> . INT
    (50) fator -> . FLOAT
    (51) fator -> . ID
    (52) fator -> . ( exp )

    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    ID              shift and go to state 40
    (               shift and go to state 50

    exp                            shift and go to state 85
    termo                          shift and go to state 36
    fator                          shift and go to state 37

state 57

    (42) exp -> exp + . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo ^ fator
    (48) termo -> . fator
    (49) fator -> . INT
    (50) fator -> . FLOAT
    (51) fator -> . ID
    (52) fator -> . ( exp )

    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    ID              shift and go to state 40
    (               shift and go to state 50

    termo                          shift and go to state 86
    fator                          shift and go to state 37

state 58

    (43) exp -> exp - . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo ^ fator
    (48) termo -> . fator
    (49) fator -> . INT
    (50) fator -> . FLOAT
    (51) fator -> . ID
    (52) fator -> . ( exp )

    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    ID              shift and go to state 40
    (               shift and go to state 50

    termo                          shift and go to state 87
    fator                          shift and go to state 37

state 59

    (64) op -> > .
    (68) op -> > . IGUAL

    INT             reduce using rule 64 (op -> > .)
    FLOAT           reduce using rule 64 (op -> > .)
    ID              reduce using rule 64 (op -> > .)
    (               reduce using rule 64 (op -> > .)
    IGUAL           shift and go to state 88


state 60

    (65) op -> < .
    (69) op -> < . IGUAL

    INT             reduce using rule 65 (op -> < .)
    FLOAT           reduce using rule 65 (op -> < .)
    ID              reduce using rule 65 (op -> < .)
    (               reduce using rule 65 (op -> < .)
    IGUAL           shift and go to state 89


state 61

    (66) op -> IGUAL .

    INT             reduce using rule 66 (op -> IGUAL .)
    FLOAT           reduce using rule 66 (op -> IGUAL .)
    ID              reduce using rule 66 (op -> IGUAL .)
    (               reduce using rule 66 (op -> IGUAL .)


state 62

    (67) op -> DIFERENTE .

    INT             reduce using rule 67 (op -> DIFERENTE .)
    FLOAT           reduce using rule 67 (op -> DIFERENTE .)
    ID              reduce using rule 67 (op -> DIFERENTE .)
    (               reduce using rule 67 (op -> DIFERENTE .)


state 63

    (45) termo -> termo * . fator
    (49) fator -> . INT
    (50) fator -> . FLOAT
    (51) fator -> . ID
    (52) fator -> . ( exp )

    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    ID              shift and go to state 40
    (               shift and go to state 50

    fator                          shift and go to state 90

state 64

    (46) termo -> termo / . fator
    (49) fator -> . INT
    (50) fator -> . FLOAT
    (51) fator -> . ID
    (52) fator -> . ( exp )

    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    ID              shift and go to state 40
    (               shift and go to state 50

    fator                          shift and go to state 91

state 65

    (47) termo -> termo ^ . fator
    (49) fator -> . INT
    (50) fator -> . FLOAT
    (51) fator -> . ID
    (52) fator -> . ( exp )

    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    ID              shift and go to state 40
    (               shift and go to state 50

    fator                          shift and go to state 92

state 66

    (70) ciclos -> ENCUANTO expL HACER . statements .
    (36) statements -> . stat
    (37) statements -> . statements stat
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (41) atrib -> . ID = exp
    (53) conditions -> . SI expL ENTONCES statements endcondition
    (70) ciclos -> . ENCUANTO expL HACER statements .
    (71) ciclos -> . PARA expL SIGUIENTE atrib .
    (72) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    statements                     shift and go to state 93
    stat                           shift and go to state 12
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 67

    (71) ciclos -> PARA expL SIGUIENTE . atrib .
    (72) ciclos -> PARA expL SIGUIENTE . atrib HACER statements .
    (41) atrib -> . ID = exp

    ID              shift and go to state 16

    atrib                          shift and go to state 94

state 68

    (7) declV -> VAR ids : tipo .

    VAR             reduce using rule 7 (declV -> VAR ids : tipo .)
    FUNCION         reduce using rule 7 (declV -> VAR ids : tipo .)
    LISTA           reduce using rule 7 (declV -> VAR ids : tipo .)
    ID              reduce using rule 7 (declV -> VAR ids : tipo .)
    SI              reduce using rule 7 (declV -> VAR ids : tipo .)
    ENCUANTO        reduce using rule 7 (declV -> VAR ids : tipo .)
    PARA            reduce using rule 7 (declV -> VAR ids : tipo .)


state 69

    (13) tipo -> ENTERO .

    VAR             reduce using rule 13 (tipo -> ENTERO .)
    FUNCION         reduce using rule 13 (tipo -> ENTERO .)
    LISTA           reduce using rule 13 (tipo -> ENTERO .)
    ID              reduce using rule 13 (tipo -> ENTERO .)
    SI              reduce using rule 13 (tipo -> ENTERO .)
    ENCUANTO        reduce using rule 13 (tipo -> ENTERO .)
    PARA            reduce using rule 13 (tipo -> ENTERO .)
    )               reduce using rule 13 (tipo -> ENTERO .)
    ,               reduce using rule 13 (tipo -> ENTERO .)


state 70

    (14) tipo -> REAL .

    VAR             reduce using rule 14 (tipo -> REAL .)
    FUNCION         reduce using rule 14 (tipo -> REAL .)
    LISTA           reduce using rule 14 (tipo -> REAL .)
    ID              reduce using rule 14 (tipo -> REAL .)
    SI              reduce using rule 14 (tipo -> REAL .)
    ENCUANTO        reduce using rule 14 (tipo -> REAL .)
    PARA            reduce using rule 14 (tipo -> REAL .)
    )               reduce using rule 14 (tipo -> REAL .)
    ,               reduce using rule 14 (tipo -> REAL .)


state 71

    (15) tipo -> BOOLEANO .

    VAR             reduce using rule 15 (tipo -> BOOLEANO .)
    FUNCION         reduce using rule 15 (tipo -> BOOLEANO .)
    LISTA           reduce using rule 15 (tipo -> BOOLEANO .)
    ID              reduce using rule 15 (tipo -> BOOLEANO .)
    SI              reduce using rule 15 (tipo -> BOOLEANO .)
    ENCUANTO        reduce using rule 15 (tipo -> BOOLEANO .)
    PARA            reduce using rule 15 (tipo -> BOOLEANO .)
    )               reduce using rule 15 (tipo -> BOOLEANO .)
    ,               reduce using rule 15 (tipo -> BOOLEANO .)


state 72

    (12) ids -> ids , ID .

    :               reduce using rule 12 (ids -> ids , ID .)
    ,               reduce using rule 12 (ids -> ids , ID .)


state 73

    (8) declV -> VAR atribs : tipo .

    VAR             reduce using rule 8 (declV -> VAR atribs : tipo .)
    FUNCION         reduce using rule 8 (declV -> VAR atribs : tipo .)
    LISTA           reduce using rule 8 (declV -> VAR atribs : tipo .)
    ID              reduce using rule 8 (declV -> VAR atribs : tipo .)
    SI              reduce using rule 8 (declV -> VAR atribs : tipo .)
    ENCUANTO        reduce using rule 8 (declV -> VAR atribs : tipo .)
    PARA            reduce using rule 8 (declV -> VAR atribs : tipo .)


state 74

    (10) atribs -> atribs , atrib .

    :               reduce using rule 10 (atribs -> atribs , atrib .)
    ,               reduce using rule 10 (atribs -> atribs , atrib .)


state 75

    (29) parametros -> ID . : tipo

    :               shift and go to state 95


state 76

    (27) declF -> FUNCION ID ( parametros . ) : tipo declarations statements DEVUELVE return .
    (30) parametros -> parametros . , ID : tipo

    )               shift and go to state 96
    ,               shift and go to state 97


state 77

    (16) declL -> LISTA ID = lista .

    VAR             reduce using rule 16 (declL -> LISTA ID = lista .)
    FUNCION         reduce using rule 16 (declL -> LISTA ID = lista .)
    LISTA           reduce using rule 16 (declL -> LISTA ID = lista .)
    ID              reduce using rule 16 (declL -> LISTA ID = lista .)
    SI              reduce using rule 16 (declL -> LISTA ID = lista .)
    ENCUANTO        reduce using rule 16 (declL -> LISTA ID = lista .)
    PARA            reduce using rule 16 (declL -> LISTA ID = lista .)


state 78

    (17) lista -> [ . ]
    (18) lista -> [ . elementos ]
    (19) elementos -> . elemento
    (20) elementos -> . elementos , elemento
    (21) elemento -> . INT
    (22) elemento -> . FLOAT
    (23) elemento -> . BOOLEANO
    (24) elemento -> . STRING
    (25) elemento -> . ID
    (26) elemento -> . lista
    (17) lista -> . [ ]
    (18) lista -> . [ elementos ]

    ]               shift and go to state 98
    INT             shift and go to state 101
    FLOAT           shift and go to state 102
    BOOLEANO        shift and go to state 103
    STRING          shift and go to state 104
    ID              shift and go to state 105
    [               shift and go to state 78

    elementos                      shift and go to state 99
    elemento                       shift and go to state 100
    lista                          shift and go to state 106

state 79

    (52) fator -> ( exp . )
    (42) exp -> exp . + termo
    (43) exp -> exp . - termo

    )               shift and go to state 84
    +               shift and go to state 57
    -               shift and go to state 58


state 80

    (53) conditions -> SI expL ENTONCES statements . endcondition
    (37) statements -> statements . stat
    (54) endcondition -> . .
    (55) endcondition -> . CASO CONTRARIO statements .
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (41) atrib -> . ID = exp
    (53) conditions -> . SI expL ENTONCES statements endcondition
    (70) ciclos -> . ENCUANTO expL HACER statements .
    (71) ciclos -> . PARA expL SIGUIENTE atrib .
    (72) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    .               shift and go to state 108
    CASO            shift and go to state 109
    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    endcondition                   shift and go to state 107
    stat                           shift and go to state 26
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 81

    (57) expL -> expL OR termoB .
    (59) termoB -> termoB . AND fatorB

    ENTONCES        reduce using rule 57 (expL -> expL OR termoB .)
    OR              reduce using rule 57 (expL -> expL OR termoB .)
    HACER           reduce using rule 57 (expL -> expL OR termoB .)
    SIGUIENTE       reduce using rule 57 (expL -> expL OR termoB .)
    )               reduce using rule 57 (expL -> expL OR termoB .)
    AND             shift and go to state 53


state 82

    (59) termoB -> termoB AND fatorB .

    AND             reduce using rule 59 (termoB -> termoB AND fatorB .)
    ENTONCES        reduce using rule 59 (termoB -> termoB AND fatorB .)
    OR              reduce using rule 59 (termoB -> termoB AND fatorB .)
    HACER           reduce using rule 59 (termoB -> termoB AND fatorB .)
    SIGUIENTE       reduce using rule 59 (termoB -> termoB AND fatorB .)
    )               reduce using rule 59 (termoB -> termoB AND fatorB .)


state 83

    (62) fatorB -> ( expL ) .

    AND             reduce using rule 62 (fatorB -> ( expL ) .)
    ENTONCES        reduce using rule 62 (fatorB -> ( expL ) .)
    OR              reduce using rule 62 (fatorB -> ( expL ) .)
    HACER           reduce using rule 62 (fatorB -> ( expL ) .)
    SIGUIENTE       reduce using rule 62 (fatorB -> ( expL ) .)
    )               reduce using rule 62 (fatorB -> ( expL ) .)


state 84

    (52) fator -> ( exp ) .

    *               reduce using rule 52 (fator -> ( exp ) .)
    /               reduce using rule 52 (fator -> ( exp ) .)
    ^               reduce using rule 52 (fator -> ( exp ) .)
    +               reduce using rule 52 (fator -> ( exp ) .)
    -               reduce using rule 52 (fator -> ( exp ) .)
    >               reduce using rule 52 (fator -> ( exp ) .)
    <               reduce using rule 52 (fator -> ( exp ) .)
    IGUAL           reduce using rule 52 (fator -> ( exp ) .)
    DIFERENTE       reduce using rule 52 (fator -> ( exp ) .)
    ;               reduce using rule 52 (fator -> ( exp ) .)
    :               reduce using rule 52 (fator -> ( exp ) .)
    ,               reduce using rule 52 (fator -> ( exp ) .)
    .               reduce using rule 52 (fator -> ( exp ) .)
    HACER           reduce using rule 52 (fator -> ( exp ) .)
    )               reduce using rule 52 (fator -> ( exp ) .)
    AND             reduce using rule 52 (fator -> ( exp ) .)
    ENTONCES        reduce using rule 52 (fator -> ( exp ) .)
    OR              reduce using rule 52 (fator -> ( exp ) .)
    SIGUIENTE       reduce using rule 52 (fator -> ( exp ) .)


state 85

    (63) condition -> exp op exp .
    (42) exp -> exp . + termo
    (43) exp -> exp . - termo

    AND             reduce using rule 63 (condition -> exp op exp .)
    ENTONCES        reduce using rule 63 (condition -> exp op exp .)
    OR              reduce using rule 63 (condition -> exp op exp .)
    HACER           reduce using rule 63 (condition -> exp op exp .)
    SIGUIENTE       reduce using rule 63 (condition -> exp op exp .)
    )               reduce using rule 63 (condition -> exp op exp .)
    +               shift and go to state 57
    -               shift and go to state 58


state 86

    (42) exp -> exp + termo .
    (45) termo -> termo . * fator
    (46) termo -> termo . / fator
    (47) termo -> termo . ^ fator

    +               reduce using rule 42 (exp -> exp + termo .)
    -               reduce using rule 42 (exp -> exp + termo .)
    >               reduce using rule 42 (exp -> exp + termo .)
    <               reduce using rule 42 (exp -> exp + termo .)
    IGUAL           reduce using rule 42 (exp -> exp + termo .)
    DIFERENTE       reduce using rule 42 (exp -> exp + termo .)
    ;               reduce using rule 42 (exp -> exp + termo .)
    :               reduce using rule 42 (exp -> exp + termo .)
    ,               reduce using rule 42 (exp -> exp + termo .)
    .               reduce using rule 42 (exp -> exp + termo .)
    HACER           reduce using rule 42 (exp -> exp + termo .)
    )               reduce using rule 42 (exp -> exp + termo .)
    AND             reduce using rule 42 (exp -> exp + termo .)
    ENTONCES        reduce using rule 42 (exp -> exp + termo .)
    OR              reduce using rule 42 (exp -> exp + termo .)
    SIGUIENTE       reduce using rule 42 (exp -> exp + termo .)
    *               shift and go to state 63
    /               shift and go to state 64
    ^               shift and go to state 65


state 87

    (43) exp -> exp - termo .
    (45) termo -> termo . * fator
    (46) termo -> termo . / fator
    (47) termo -> termo . ^ fator

    +               reduce using rule 43 (exp -> exp - termo .)
    -               reduce using rule 43 (exp -> exp - termo .)
    >               reduce using rule 43 (exp -> exp - termo .)
    <               reduce using rule 43 (exp -> exp - termo .)
    IGUAL           reduce using rule 43 (exp -> exp - termo .)
    DIFERENTE       reduce using rule 43 (exp -> exp - termo .)
    ;               reduce using rule 43 (exp -> exp - termo .)
    :               reduce using rule 43 (exp -> exp - termo .)
    ,               reduce using rule 43 (exp -> exp - termo .)
    .               reduce using rule 43 (exp -> exp - termo .)
    HACER           reduce using rule 43 (exp -> exp - termo .)
    )               reduce using rule 43 (exp -> exp - termo .)
    AND             reduce using rule 43 (exp -> exp - termo .)
    ENTONCES        reduce using rule 43 (exp -> exp - termo .)
    OR              reduce using rule 43 (exp -> exp - termo .)
    SIGUIENTE       reduce using rule 43 (exp -> exp - termo .)
    *               shift and go to state 63
    /               shift and go to state 64
    ^               shift and go to state 65


state 88

    (68) op -> > IGUAL .

    INT             reduce using rule 68 (op -> > IGUAL .)
    FLOAT           reduce using rule 68 (op -> > IGUAL .)
    ID              reduce using rule 68 (op -> > IGUAL .)
    (               reduce using rule 68 (op -> > IGUAL .)


state 89

    (69) op -> < IGUAL .

    INT             reduce using rule 69 (op -> < IGUAL .)
    FLOAT           reduce using rule 69 (op -> < IGUAL .)
    ID              reduce using rule 69 (op -> < IGUAL .)
    (               reduce using rule 69 (op -> < IGUAL .)


state 90

    (45) termo -> termo * fator .

    *               reduce using rule 45 (termo -> termo * fator .)
    /               reduce using rule 45 (termo -> termo * fator .)
    ^               reduce using rule 45 (termo -> termo * fator .)
    +               reduce using rule 45 (termo -> termo * fator .)
    -               reduce using rule 45 (termo -> termo * fator .)
    >               reduce using rule 45 (termo -> termo * fator .)
    <               reduce using rule 45 (termo -> termo * fator .)
    IGUAL           reduce using rule 45 (termo -> termo * fator .)
    DIFERENTE       reduce using rule 45 (termo -> termo * fator .)
    ;               reduce using rule 45 (termo -> termo * fator .)
    :               reduce using rule 45 (termo -> termo * fator .)
    ,               reduce using rule 45 (termo -> termo * fator .)
    .               reduce using rule 45 (termo -> termo * fator .)
    HACER           reduce using rule 45 (termo -> termo * fator .)
    )               reduce using rule 45 (termo -> termo * fator .)
    AND             reduce using rule 45 (termo -> termo * fator .)
    ENTONCES        reduce using rule 45 (termo -> termo * fator .)
    OR              reduce using rule 45 (termo -> termo * fator .)
    SIGUIENTE       reduce using rule 45 (termo -> termo * fator .)


state 91

    (46) termo -> termo / fator .

    *               reduce using rule 46 (termo -> termo / fator .)
    /               reduce using rule 46 (termo -> termo / fator .)
    ^               reduce using rule 46 (termo -> termo / fator .)
    +               reduce using rule 46 (termo -> termo / fator .)
    -               reduce using rule 46 (termo -> termo / fator .)
    >               reduce using rule 46 (termo -> termo / fator .)
    <               reduce using rule 46 (termo -> termo / fator .)
    IGUAL           reduce using rule 46 (termo -> termo / fator .)
    DIFERENTE       reduce using rule 46 (termo -> termo / fator .)
    ;               reduce using rule 46 (termo -> termo / fator .)
    :               reduce using rule 46 (termo -> termo / fator .)
    ,               reduce using rule 46 (termo -> termo / fator .)
    .               reduce using rule 46 (termo -> termo / fator .)
    HACER           reduce using rule 46 (termo -> termo / fator .)
    )               reduce using rule 46 (termo -> termo / fator .)
    AND             reduce using rule 46 (termo -> termo / fator .)
    ENTONCES        reduce using rule 46 (termo -> termo / fator .)
    OR              reduce using rule 46 (termo -> termo / fator .)
    SIGUIENTE       reduce using rule 46 (termo -> termo / fator .)


state 92

    (47) termo -> termo ^ fator .

    *               reduce using rule 47 (termo -> termo ^ fator .)
    /               reduce using rule 47 (termo -> termo ^ fator .)
    ^               reduce using rule 47 (termo -> termo ^ fator .)
    +               reduce using rule 47 (termo -> termo ^ fator .)
    -               reduce using rule 47 (termo -> termo ^ fator .)
    >               reduce using rule 47 (termo -> termo ^ fator .)
    <               reduce using rule 47 (termo -> termo ^ fator .)
    IGUAL           reduce using rule 47 (termo -> termo ^ fator .)
    DIFERENTE       reduce using rule 47 (termo -> termo ^ fator .)
    ;               reduce using rule 47 (termo -> termo ^ fator .)
    :               reduce using rule 47 (termo -> termo ^ fator .)
    ,               reduce using rule 47 (termo -> termo ^ fator .)
    .               reduce using rule 47 (termo -> termo ^ fator .)
    HACER           reduce using rule 47 (termo -> termo ^ fator .)
    )               reduce using rule 47 (termo -> termo ^ fator .)
    AND             reduce using rule 47 (termo -> termo ^ fator .)
    ENTONCES        reduce using rule 47 (termo -> termo ^ fator .)
    OR              reduce using rule 47 (termo -> termo ^ fator .)
    SIGUIENTE       reduce using rule 47 (termo -> termo ^ fator .)


state 93

    (70) ciclos -> ENCUANTO expL HACER statements . .
    (37) statements -> statements . stat
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (41) atrib -> . ID = exp
    (53) conditions -> . SI expL ENTONCES statements endcondition
    (70) ciclos -> . ENCUANTO expL HACER statements .
    (71) ciclos -> . PARA expL SIGUIENTE atrib .
    (72) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    .               shift and go to state 110
    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    stat                           shift and go to state 26
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 94

    (71) ciclos -> PARA expL SIGUIENTE atrib . .
    (72) ciclos -> PARA expL SIGUIENTE atrib . HACER statements .

    .               shift and go to state 111
    HACER           shift and go to state 112


state 95

    (29) parametros -> ID : . tipo
    (13) tipo -> . ENTERO
    (14) tipo -> . REAL
    (15) tipo -> . BOOLEANO

    ENTERO          shift and go to state 69
    REAL            shift and go to state 70
    BOOLEANO        shift and go to state 71

    tipo                           shift and go to state 113

state 96

    (27) declF -> FUNCION ID ( parametros ) . : tipo declarations statements DEVUELVE return .

    :               shift and go to state 114


state 97

    (30) parametros -> parametros , . ID : tipo

    ID              shift and go to state 115


state 98

    (17) lista -> [ ] .

    VAR             reduce using rule 17 (lista -> [ ] .)
    FUNCION         reduce using rule 17 (lista -> [ ] .)
    LISTA           reduce using rule 17 (lista -> [ ] .)
    ID              reduce using rule 17 (lista -> [ ] .)
    SI              reduce using rule 17 (lista -> [ ] .)
    ENCUANTO        reduce using rule 17 (lista -> [ ] .)
    PARA            reduce using rule 17 (lista -> [ ] .)
    ]               reduce using rule 17 (lista -> [ ] .)
    ,               reduce using rule 17 (lista -> [ ] .)


state 99

    (18) lista -> [ elementos . ]
    (20) elementos -> elementos . , elemento

    ]               shift and go to state 116
    ,               shift and go to state 117


state 100

    (19) elementos -> elemento .

    ]               reduce using rule 19 (elementos -> elemento .)
    ,               reduce using rule 19 (elementos -> elemento .)


state 101

    (21) elemento -> INT .

    ]               reduce using rule 21 (elemento -> INT .)
    ,               reduce using rule 21 (elemento -> INT .)


state 102

    (22) elemento -> FLOAT .

    ]               reduce using rule 22 (elemento -> FLOAT .)
    ,               reduce using rule 22 (elemento -> FLOAT .)


state 103

    (23) elemento -> BOOLEANO .

    ]               reduce using rule 23 (elemento -> BOOLEANO .)
    ,               reduce using rule 23 (elemento -> BOOLEANO .)


state 104

    (24) elemento -> STRING .

    ]               reduce using rule 24 (elemento -> STRING .)
    ,               reduce using rule 24 (elemento -> STRING .)


state 105

    (25) elemento -> ID .

    ]               reduce using rule 25 (elemento -> ID .)
    ,               reduce using rule 25 (elemento -> ID .)


state 106

    (26) elemento -> lista .

    ]               reduce using rule 26 (elemento -> lista .)
    ,               reduce using rule 26 (elemento -> lista .)


state 107

    (53) conditions -> SI expL ENTONCES statements endcondition .

    ID              reduce using rule 53 (conditions -> SI expL ENTONCES statements endcondition .)
    SI              reduce using rule 53 (conditions -> SI expL ENTONCES statements endcondition .)
    ENCUANTO        reduce using rule 53 (conditions -> SI expL ENTONCES statements endcondition .)
    PARA            reduce using rule 53 (conditions -> SI expL ENTONCES statements endcondition .)
    $end            reduce using rule 53 (conditions -> SI expL ENTONCES statements endcondition .)
    .               reduce using rule 53 (conditions -> SI expL ENTONCES statements endcondition .)
    CASO            reduce using rule 53 (conditions -> SI expL ENTONCES statements endcondition .)
    DEVUELVE        reduce using rule 53 (conditions -> SI expL ENTONCES statements endcondition .)


state 108

    (54) endcondition -> . .

    ID              reduce using rule 54 (endcondition -> . .)
    SI              reduce using rule 54 (endcondition -> . .)
    ENCUANTO        reduce using rule 54 (endcondition -> . .)
    PARA            reduce using rule 54 (endcondition -> . .)
    $end            reduce using rule 54 (endcondition -> . .)
    .               reduce using rule 54 (endcondition -> . .)
    CASO            reduce using rule 54 (endcondition -> . .)
    DEVUELVE        reduce using rule 54 (endcondition -> . .)


state 109

    (55) endcondition -> CASO . CONTRARIO statements .

    CONTRARIO       shift and go to state 118


state 110

    (70) ciclos -> ENCUANTO expL HACER statements . .

    ID              reduce using rule 70 (ciclos -> ENCUANTO expL HACER statements . .)
    SI              reduce using rule 70 (ciclos -> ENCUANTO expL HACER statements . .)
    ENCUANTO        reduce using rule 70 (ciclos -> ENCUANTO expL HACER statements . .)
    PARA            reduce using rule 70 (ciclos -> ENCUANTO expL HACER statements . .)
    $end            reduce using rule 70 (ciclos -> ENCUANTO expL HACER statements . .)
    .               reduce using rule 70 (ciclos -> ENCUANTO expL HACER statements . .)
    CASO            reduce using rule 70 (ciclos -> ENCUANTO expL HACER statements . .)
    DEVUELVE        reduce using rule 70 (ciclos -> ENCUANTO expL HACER statements . .)


state 111

    (71) ciclos -> PARA expL SIGUIENTE atrib . .

    ID              reduce using rule 71 (ciclos -> PARA expL SIGUIENTE atrib . .)
    SI              reduce using rule 71 (ciclos -> PARA expL SIGUIENTE atrib . .)
    ENCUANTO        reduce using rule 71 (ciclos -> PARA expL SIGUIENTE atrib . .)
    PARA            reduce using rule 71 (ciclos -> PARA expL SIGUIENTE atrib . .)
    $end            reduce using rule 71 (ciclos -> PARA expL SIGUIENTE atrib . .)
    .               reduce using rule 71 (ciclos -> PARA expL SIGUIENTE atrib . .)
    CASO            reduce using rule 71 (ciclos -> PARA expL SIGUIENTE atrib . .)
    DEVUELVE        reduce using rule 71 (ciclos -> PARA expL SIGUIENTE atrib . .)


state 112

    (72) ciclos -> PARA expL SIGUIENTE atrib HACER . statements .
    (36) statements -> . stat
    (37) statements -> . statements stat
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (41) atrib -> . ID = exp
    (53) conditions -> . SI expL ENTONCES statements endcondition
    (70) ciclos -> . ENCUANTO expL HACER statements .
    (71) ciclos -> . PARA expL SIGUIENTE atrib .
    (72) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    atrib                          shift and go to state 13
    statements                     shift and go to state 119
    stat                           shift and go to state 12
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 113

    (29) parametros -> ID : tipo .

    )               reduce using rule 29 (parametros -> ID : tipo .)
    ,               reduce using rule 29 (parametros -> ID : tipo .)


state 114

    (27) declF -> FUNCION ID ( parametros ) : . tipo declarations statements DEVUELVE return .
    (13) tipo -> . ENTERO
    (14) tipo -> . REAL
    (15) tipo -> . BOOLEANO

    ENTERO          shift and go to state 69
    REAL            shift and go to state 70
    BOOLEANO        shift and go to state 71

    tipo                           shift and go to state 120

state 115

    (30) parametros -> parametros , ID . : tipo

    :               shift and go to state 121


state 116

    (18) lista -> [ elementos ] .

    VAR             reduce using rule 18 (lista -> [ elementos ] .)
    FUNCION         reduce using rule 18 (lista -> [ elementos ] .)
    LISTA           reduce using rule 18 (lista -> [ elementos ] .)
    ID              reduce using rule 18 (lista -> [ elementos ] .)
    SI              reduce using rule 18 (lista -> [ elementos ] .)
    ENCUANTO        reduce using rule 18 (lista -> [ elementos ] .)
    PARA            reduce using rule 18 (lista -> [ elementos ] .)
    ]               reduce using rule 18 (lista -> [ elementos ] .)
    ,               reduce using rule 18 (lista -> [ elementos ] .)


state 117

    (20) elementos -> elementos , . elemento
    (21) elemento -> . INT
    (22) elemento -> . FLOAT
    (23) elemento -> . BOOLEANO
    (24) elemento -> . STRING
    (25) elemento -> . ID
    (26) elemento -> . lista
    (17) lista -> . [ ]
    (18) lista -> . [ elementos ]

    INT             shift and go to state 101
    FLOAT           shift and go to state 102
    BOOLEANO        shift and go to state 103
    STRING          shift and go to state 104
    ID              shift and go to state 105
    [               shift and go to state 78

    elemento                       shift and go to state 122
    lista                          shift and go to state 106

state 118

    (55) endcondition -> CASO CONTRARIO . statements .
    (36) statements -> . stat
    (37) statements -> . statements stat
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (41) atrib -> . ID = exp
    (53) conditions -> . SI expL ENTONCES statements endcondition
    (70) ciclos -> . ENCUANTO expL HACER statements .
    (71) ciclos -> . PARA expL SIGUIENTE atrib .
    (72) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    statements                     shift and go to state 123
    stat                           shift and go to state 12
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 119

    (72) ciclos -> PARA expL SIGUIENTE atrib HACER statements . .
    (37) statements -> statements . stat
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (41) atrib -> . ID = exp
    (53) conditions -> . SI expL ENTONCES statements endcondition
    (70) ciclos -> . ENCUANTO expL HACER statements .
    (71) ciclos -> . PARA expL SIGUIENTE atrib .
    (72) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    .               shift and go to state 124
    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    atrib                          shift and go to state 13
    stat                           shift and go to state 26
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 120

    (27) declF -> FUNCION ID ( parametros ) : tipo . declarations statements DEVUELVE return .
    (2) declarations -> . decl
    (3) declarations -> . declarations decl
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (7) declV -> . VAR ids : tipo
    (8) declV -> . VAR atribs : tipo
    (27) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (16) declL -> . LISTA ID = lista

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9

    declarations                   shift and go to state 125
    decl                           shift and go to state 3
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6

state 121

    (30) parametros -> parametros , ID : . tipo
    (13) tipo -> . ENTERO
    (14) tipo -> . REAL
    (15) tipo -> . BOOLEANO

    ENTERO          shift and go to state 69
    REAL            shift and go to state 70
    BOOLEANO        shift and go to state 71

    tipo                           shift and go to state 126

state 122

    (20) elementos -> elementos , elemento .

    ]               reduce using rule 20 (elementos -> elementos , elemento .)
    ,               reduce using rule 20 (elementos -> elementos , elemento .)


state 123

    (55) endcondition -> CASO CONTRARIO statements . .
    (37) statements -> statements . stat
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (41) atrib -> . ID = exp
    (53) conditions -> . SI expL ENTONCES statements endcondition
    (70) ciclos -> . ENCUANTO expL HACER statements .
    (71) ciclos -> . PARA expL SIGUIENTE atrib .
    (72) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    .               shift and go to state 127
    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    stat                           shift and go to state 26
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 124

    (72) ciclos -> PARA expL SIGUIENTE atrib HACER statements . .

    ID              reduce using rule 72 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    SI              reduce using rule 72 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    ENCUANTO        reduce using rule 72 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    PARA            reduce using rule 72 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    $end            reduce using rule 72 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    .               reduce using rule 72 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    CASO            reduce using rule 72 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    DEVUELVE        reduce using rule 72 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)


state 125

    (27) declF -> FUNCION ID ( parametros ) : tipo declarations . statements DEVUELVE return .
    (3) declarations -> declarations . decl
    (36) statements -> . stat
    (37) statements -> . statements stat
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (7) declV -> . VAR ids : tipo
    (8) declV -> . VAR atribs : tipo
    (27) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (16) declL -> . LISTA ID = lista
    (41) atrib -> . ID = exp
    (53) conditions -> . SI expL ENTONCES statements endcondition
    (70) ciclos -> . ENCUANTO expL HACER statements .
    (71) ciclos -> . PARA expL SIGUIENTE atrib .
    (72) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9
    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    statements                     shift and go to state 128
    decl                           shift and go to state 11
    stat                           shift and go to state 12
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 126

    (30) parametros -> parametros , ID : tipo .

    )               reduce using rule 30 (parametros -> parametros , ID : tipo .)
    ,               reduce using rule 30 (parametros -> parametros , ID : tipo .)


state 127

    (55) endcondition -> CASO CONTRARIO statements . .

    ID              reduce using rule 55 (endcondition -> CASO CONTRARIO statements . .)
    SI              reduce using rule 55 (endcondition -> CASO CONTRARIO statements . .)
    ENCUANTO        reduce using rule 55 (endcondition -> CASO CONTRARIO statements . .)
    PARA            reduce using rule 55 (endcondition -> CASO CONTRARIO statements . .)
    $end            reduce using rule 55 (endcondition -> CASO CONTRARIO statements . .)
    .               reduce using rule 55 (endcondition -> CASO CONTRARIO statements . .)
    CASO            reduce using rule 55 (endcondition -> CASO CONTRARIO statements . .)
    DEVUELVE        reduce using rule 55 (endcondition -> CASO CONTRARIO statements . .)


state 128

    (27) declF -> FUNCION ID ( parametros ) : tipo declarations statements . DEVUELVE return .
    (37) statements -> statements . stat
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (41) atrib -> . ID = exp
    (53) conditions -> . SI expL ENTONCES statements endcondition
    (70) ciclos -> . ENCUANTO expL HACER statements .
    (71) ciclos -> . PARA expL SIGUIENTE atrib .
    (72) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .

    DEVUELVE        shift and go to state 129
    ID              shift and go to state 16
    SI              shift and go to state 17
    ENCUANTO        shift and go to state 18
    PARA            shift and go to state 19

    stat                           shift and go to state 26
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15

state 129

    (27) declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE . return .
    (31) return -> . INT
    (32) return -> . ID
    (33) return -> . FLOAT
    (34) return -> . VERDADERO
    (35) return -> . FALSO

    INT             shift and go to state 132
    ID              shift and go to state 130
    FLOAT           shift and go to state 133
    VERDADERO       shift and go to state 134
    FALSO           shift and go to state 135

    return                         shift and go to state 131

state 130

    (32) return -> ID .

    .               reduce using rule 32 (return -> ID .)


state 131

    (27) declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .

    .               shift and go to state 136


state 132

    (31) return -> INT .

    .               reduce using rule 31 (return -> INT .)


state 133

    (33) return -> FLOAT .

    .               reduce using rule 33 (return -> FLOAT .)


state 134

    (34) return -> VERDADERO .

    .               reduce using rule 34 (return -> VERDADERO .)


state 135

    (35) return -> FALSO .

    .               reduce using rule 35 (return -> FALSO .)


state 136

    (27) declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .

    VAR             reduce using rule 27 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    FUNCION         reduce using rule 27 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    LISTA           reduce using rule 27 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    ID              reduce using rule 27 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    SI              reduce using rule 27 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    ENCUANTO        reduce using rule 27 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    PARA            reduce using rule 27 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)

