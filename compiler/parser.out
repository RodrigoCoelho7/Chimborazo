Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ENTER

Grammar

Rule 0     S' -> prg
Rule 1     prg -> declarations statements
Rule 2     declarations -> decl
Rule 3     declarations -> declarations decl
Rule 4     decl -> declV
Rule 5     decl -> declF
Rule 6     decl -> declL
Rule 7     declV -> VAR vari : tipo
Rule 8     vari -> atribD
Rule 9     vari -> ID
Rule 10    vari -> vari , atribD
Rule 11    vari -> vari , ID
Rule 12    tipo -> ENTERO
Rule 13    tipo -> REAL
Rule 14    tipo -> BOOLEANO
Rule 15    tipo -> STR
Rule 16    atribD -> ID = STRING
Rule 17    atribD -> ID = VERDADERO
Rule 18    atribD -> ID = FALSO
Rule 19    atribD -> ID = exp
Rule 20    declL -> LISTA ID = lista
Rule 21    lista -> [ ]
Rule 22    lista -> [ elementos ]
Rule 23    elementos -> elemento
Rule 24    elementos -> elementos , elemento
Rule 25    elemento -> INT
Rule 26    elemento -> FLOAT
Rule 27    elemento -> BOOLEANO
Rule 28    elemento -> STRING
Rule 29    elemento -> ID
Rule 30    elemento -> lista
Rule 31    declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
Rule 32    parametros -> <empty>
Rule 33    parametros -> ID : tipo
Rule 34    parametros -> parametros , ID : tipo
Rule 35    return -> INT
Rule 36    return -> ID
Rule 37    return -> FLOAT
Rule 38    return -> VERDADERO
Rule 39    return -> FALSO
Rule 40    statements -> stat
Rule 41    statements -> statements stat
Rule 42    stat -> atrib ;
Rule 43    stat -> conditions
Rule 44    stat -> ciclos
Rule 45    stat -> write
Rule 46    atrib -> ID = STRING
Rule 47    atrib -> ID = VERDADERO
Rule 48    atrib -> ID = FALSO
Rule 49    atrib -> ID = exp
Rule 50    exp -> exp + termo
Rule 51    exp -> exp - termo
Rule 52    exp -> termo
Rule 53    termo -> termo * fator
Rule 54    termo -> termo / fator
Rule 55    termo -> termo RESTO fator
Rule 56    termo -> termo ^ fator
Rule 57    termo -> fator
Rule 58    fator -> INT
Rule 59    fator -> VERDADERO
Rule 60    fator -> FALSO
Rule 61    fator -> FLOAT
Rule 62    fator -> STRING
Rule 63    fator -> ID
Rule 64    fator -> ID ( content_params )
Rule 65    fator -> ( exp )
Rule 66    fator -> cast
Rule 67    fator -> read
Rule 68    content_params -> <empty>
Rule 69    content_params -> list_params
Rule 70    list_params -> exp
Rule 71    list_params -> list_params , exp
Rule 72    conditions -> SI expL ENTONCES statements endcondition
Rule 73    endcondition -> .
Rule 74    endcondition -> CASO CONTRARIO statements .
Rule 75    expL -> termoB
Rule 76    expL -> expL OR termoB
Rule 77    termoB -> fatorB
Rule 78    termoB -> termoB AND fatorB
Rule 79    fatorB -> condition
Rule 80    fatorB -> VERDADERO
Rule 81    fatorB -> FALSO
Rule 82    fatorB -> ( expL )
Rule 83    condition -> exp op exp
Rule 84    op -> >
Rule 85    op -> <
Rule 86    op -> IGUAL
Rule 87    op -> DIFERENTE
Rule 88    op -> > IGUAL
Rule 89    op -> < IGUAL
Rule 90    ciclos -> ENCUANTO expL HACER statements .
Rule 91    ciclos -> PARA expL SIGUIENTE atrib .
Rule 92    ciclos -> PARA expL SIGUIENTE atrib HACER statements .
Rule 93    write -> ESCRIBIR ( exp ) ;
Rule 94    write -> ESCRIBIR ( exp , FIM : exp ) ;
Rule 95    read -> LEER ( STRING )
Rule 96    cast -> tipocast ( exp )
Rule 97    cast -> tipocast ( STRING )
Rule 98    tipocast -> REAL
Rule 99    tipocast -> ENTERO
Rule 100   tipocast -> STR

Terminals, with rules where they appear

(                    : 31 64 65 82 93 94 95 96 97
)                    : 31 64 65 82 93 94 95 96 97
*                    : 53
+                    : 50
,                    : 10 11 24 34 71 94
-                    : 51
.                    : 31 73 74 90 91 92
/                    : 54
:                    : 7 31 33 34 94
;                    : 42 93 94
<                    : 85 89
=                    : 16 17 18 19 20 46 47 48 49
>                    : 84 88
AND                  : 78
BOOLEANO             : 14 27
CASO                 : 74
CONTRARIO            : 74
DEVUELVE             : 31
DIFERENTE            : 87
ENCUANTO             : 90
ENTER                : 
ENTERO               : 12 99
ENTONCES             : 72
ESCRIBIR             : 93 94
FALSO                : 18 39 48 60 81
FIM                  : 94
FLOAT                : 26 37 61
FUNCION              : 31
HACER                : 90 92
ID                   : 9 11 16 17 18 19 20 29 31 33 34 36 46 47 48 49 63 64
IGUAL                : 86 88 89
INT                  : 25 35 58
LEER                 : 95
LISTA                : 20
OR                   : 76
PARA                 : 91 92
REAL                 : 13 98
RESTO                : 55
SI                   : 72
SIGUIENTE            : 91 92
STR                  : 15 100
STRING               : 16 28 46 62 95 97
VAR                  : 7
VERDADERO            : 17 38 47 59 80
[                    : 21 22
]                    : 21 22
^                    : 56
error                : 

Nonterminals, with rules where they appear

atrib                : 42 91 92
atribD               : 8 10
cast                 : 66
ciclos               : 44
condition            : 79
conditions           : 43
content_params       : 64
decl                 : 2 3
declF                : 5
declL                : 6
declV                : 4
declarations         : 1 3 31
elemento             : 23 24
elementos            : 22 24
endcondition         : 72
exp                  : 19 49 50 51 65 70 71 83 83 93 94 94 96
expL                 : 72 76 82 90 91 92
fator                : 53 54 55 56 57
fatorB               : 77 78
list_params          : 69 71
lista                : 20 30
op                   : 83
parametros           : 31 34
prg                  : 0
read                 : 67
return               : 31
stat                 : 40 41
statements           : 1 31 41 72 74 90 92
termo                : 50 51 52 53 54 55 56
termoB               : 75 76 78
tipo                 : 7 31 33 34
tipocast             : 96 97
vari                 : 7 10 11
write                : 45

Parsing method: LALR

state 0

    (0) S' -> . prg
    (1) prg -> . declarations statements
    (2) declarations -> . decl
    (3) declarations -> . declarations decl
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (7) declV -> . VAR vari : tipo
    (31) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (20) declL -> . LISTA ID = lista

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9

    prg                            shift and go to state 1
    declarations                   shift and go to state 2
    decl                           shift and go to state 3
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6

state 1

    (0) S' -> prg .



state 2

    (1) prg -> declarations . statements
    (3) declarations -> declarations . decl
    (40) statements -> . stat
    (41) statements -> . statements stat
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (7) declV -> . VAR vari : tipo
    (31) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (20) declL -> . LISTA ID = lista
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (72) conditions -> . SI expL ENTONCES statements endcondition
    (90) ciclos -> . ENCUANTO expL HACER statements .
    (91) ciclos -> . PARA expL SIGUIENTE atrib .
    (92) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (93) write -> . ESCRIBIR ( exp ) ;
    (94) write -> . ESCRIBIR ( exp , FIM : exp ) ;

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    statements                     shift and go to state 10
    decl                           shift and go to state 11
    stat                           shift and go to state 12
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 3

    (2) declarations -> decl .

    VAR             reduce using rule 2 (declarations -> decl .)
    FUNCION         reduce using rule 2 (declarations -> decl .)
    LISTA           reduce using rule 2 (declarations -> decl .)
    ID              reduce using rule 2 (declarations -> decl .)
    SI              reduce using rule 2 (declarations -> decl .)
    ENCUANTO        reduce using rule 2 (declarations -> decl .)
    PARA            reduce using rule 2 (declarations -> decl .)
    ESCRIBIR        reduce using rule 2 (declarations -> decl .)


state 4

    (4) decl -> declV .

    VAR             reduce using rule 4 (decl -> declV .)
    FUNCION         reduce using rule 4 (decl -> declV .)
    LISTA           reduce using rule 4 (decl -> declV .)
    ID              reduce using rule 4 (decl -> declV .)
    SI              reduce using rule 4 (decl -> declV .)
    ENCUANTO        reduce using rule 4 (decl -> declV .)
    PARA            reduce using rule 4 (decl -> declV .)
    ESCRIBIR        reduce using rule 4 (decl -> declV .)


state 5

    (5) decl -> declF .

    VAR             reduce using rule 5 (decl -> declF .)
    FUNCION         reduce using rule 5 (decl -> declF .)
    LISTA           reduce using rule 5 (decl -> declF .)
    ID              reduce using rule 5 (decl -> declF .)
    SI              reduce using rule 5 (decl -> declF .)
    ENCUANTO        reduce using rule 5 (decl -> declF .)
    PARA            reduce using rule 5 (decl -> declF .)
    ESCRIBIR        reduce using rule 5 (decl -> declF .)


state 6

    (6) decl -> declL .

    VAR             reduce using rule 6 (decl -> declL .)
    FUNCION         reduce using rule 6 (decl -> declL .)
    LISTA           reduce using rule 6 (decl -> declL .)
    ID              reduce using rule 6 (decl -> declL .)
    SI              reduce using rule 6 (decl -> declL .)
    ENCUANTO        reduce using rule 6 (decl -> declL .)
    PARA            reduce using rule 6 (decl -> declL .)
    ESCRIBIR        reduce using rule 6 (decl -> declL .)


state 7

    (7) declV -> VAR . vari : tipo
    (8) vari -> . atribD
    (9) vari -> . ID
    (10) vari -> . vari , atribD
    (11) vari -> . vari , ID
    (16) atribD -> . ID = STRING
    (17) atribD -> . ID = VERDADERO
    (18) atribD -> . ID = FALSO
    (19) atribD -> . ID = exp

    ID              shift and go to state 24

    vari                           shift and go to state 22
    atribD                         shift and go to state 23

state 8

    (31) declF -> FUNCION . ID ( parametros ) : tipo declarations statements DEVUELVE return .

    ID              shift and go to state 25


state 9

    (20) declL -> LISTA . ID = lista

    ID              shift and go to state 26


state 10

    (1) prg -> declarations statements .
    (41) statements -> statements . stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (72) conditions -> . SI expL ENTONCES statements endcondition
    (90) ciclos -> . ENCUANTO expL HACER statements .
    (91) ciclos -> . PARA expL SIGUIENTE atrib .
    (92) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (93) write -> . ESCRIBIR ( exp ) ;
    (94) write -> . ESCRIBIR ( exp , FIM : exp ) ;

    $end            reduce using rule 1 (prg -> declarations statements .)
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    stat                           shift and go to state 27
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 11

    (3) declarations -> declarations decl .

    VAR             reduce using rule 3 (declarations -> declarations decl .)
    FUNCION         reduce using rule 3 (declarations -> declarations decl .)
    LISTA           reduce using rule 3 (declarations -> declarations decl .)
    ID              reduce using rule 3 (declarations -> declarations decl .)
    SI              reduce using rule 3 (declarations -> declarations decl .)
    ENCUANTO        reduce using rule 3 (declarations -> declarations decl .)
    PARA            reduce using rule 3 (declarations -> declarations decl .)
    ESCRIBIR        reduce using rule 3 (declarations -> declarations decl .)


state 12

    (40) statements -> stat .

    ID              reduce using rule 40 (statements -> stat .)
    SI              reduce using rule 40 (statements -> stat .)
    ENCUANTO        reduce using rule 40 (statements -> stat .)
    PARA            reduce using rule 40 (statements -> stat .)
    ESCRIBIR        reduce using rule 40 (statements -> stat .)
    $end            reduce using rule 40 (statements -> stat .)
    .               reduce using rule 40 (statements -> stat .)
    CASO            reduce using rule 40 (statements -> stat .)
    DEVUELVE        reduce using rule 40 (statements -> stat .)


state 13

    (42) stat -> atrib . ;

    ;               shift and go to state 28


state 14

    (43) stat -> conditions .

    ID              reduce using rule 43 (stat -> conditions .)
    SI              reduce using rule 43 (stat -> conditions .)
    ENCUANTO        reduce using rule 43 (stat -> conditions .)
    PARA            reduce using rule 43 (stat -> conditions .)
    ESCRIBIR        reduce using rule 43 (stat -> conditions .)
    $end            reduce using rule 43 (stat -> conditions .)
    .               reduce using rule 43 (stat -> conditions .)
    CASO            reduce using rule 43 (stat -> conditions .)
    DEVUELVE        reduce using rule 43 (stat -> conditions .)


state 15

    (44) stat -> ciclos .

    ID              reduce using rule 44 (stat -> ciclos .)
    SI              reduce using rule 44 (stat -> ciclos .)
    ENCUANTO        reduce using rule 44 (stat -> ciclos .)
    PARA            reduce using rule 44 (stat -> ciclos .)
    ESCRIBIR        reduce using rule 44 (stat -> ciclos .)
    $end            reduce using rule 44 (stat -> ciclos .)
    .               reduce using rule 44 (stat -> ciclos .)
    CASO            reduce using rule 44 (stat -> ciclos .)
    DEVUELVE        reduce using rule 44 (stat -> ciclos .)


state 16

    (45) stat -> write .

    ID              reduce using rule 45 (stat -> write .)
    SI              reduce using rule 45 (stat -> write .)
    ENCUANTO        reduce using rule 45 (stat -> write .)
    PARA            reduce using rule 45 (stat -> write .)
    ESCRIBIR        reduce using rule 45 (stat -> write .)
    $end            reduce using rule 45 (stat -> write .)
    .               reduce using rule 45 (stat -> write .)
    CASO            reduce using rule 45 (stat -> write .)
    DEVUELVE        reduce using rule 45 (stat -> write .)


state 17

    (46) atrib -> ID . = STRING
    (47) atrib -> ID . = VERDADERO
    (48) atrib -> ID . = FALSO
    (49) atrib -> ID . = exp

    =               shift and go to state 29


state 18

    (72) conditions -> SI . expL ENTONCES statements endcondition
    (75) expL -> . termoB
    (76) expL -> . expL OR termoB
    (77) termoB -> . fatorB
    (78) termoB -> . termoB AND fatorB
    (79) fatorB -> . condition
    (80) fatorB -> . VERDADERO
    (81) fatorB -> . FALSO
    (82) fatorB -> . ( expL )
    (83) condition -> . exp op exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo RESTO fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . VERDADERO
    (60) fator -> . FALSO
    (61) fator -> . FLOAT
    (62) fator -> . STRING
    (63) fator -> . ID
    (64) fator -> . ID ( content_params )
    (65) fator -> . ( exp )
    (66) fator -> . cast
    (67) fator -> . read
    (96) cast -> . tipocast ( exp )
    (97) cast -> . tipocast ( STRING )
    (95) read -> . LEER ( STRING )
    (98) tipocast -> . REAL
    (99) tipocast -> . ENTERO
    (100) tipocast -> . STR

    VERDADERO       shift and go to state 34
    FALSO           shift and go to state 35
    (               shift and go to state 36
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 43
    LEER            shift and go to state 47
    REAL            shift and go to state 48
    ENTERO          shift and go to state 49
    STR             shift and go to state 50

    expL                           shift and go to state 30
    termoB                         shift and go to state 31
    fatorB                         shift and go to state 32
    condition                      shift and go to state 33
    exp                            shift and go to state 37
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 44
    read                           shift and go to state 45
    tipocast                       shift and go to state 46

state 19

    (90) ciclos -> ENCUANTO . expL HACER statements .
    (75) expL -> . termoB
    (76) expL -> . expL OR termoB
    (77) termoB -> . fatorB
    (78) termoB -> . termoB AND fatorB
    (79) fatorB -> . condition
    (80) fatorB -> . VERDADERO
    (81) fatorB -> . FALSO
    (82) fatorB -> . ( expL )
    (83) condition -> . exp op exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo RESTO fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . VERDADERO
    (60) fator -> . FALSO
    (61) fator -> . FLOAT
    (62) fator -> . STRING
    (63) fator -> . ID
    (64) fator -> . ID ( content_params )
    (65) fator -> . ( exp )
    (66) fator -> . cast
    (67) fator -> . read
    (96) cast -> . tipocast ( exp )
    (97) cast -> . tipocast ( STRING )
    (95) read -> . LEER ( STRING )
    (98) tipocast -> . REAL
    (99) tipocast -> . ENTERO
    (100) tipocast -> . STR

    VERDADERO       shift and go to state 34
    FALSO           shift and go to state 35
    (               shift and go to state 36
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 43
    LEER            shift and go to state 47
    REAL            shift and go to state 48
    ENTERO          shift and go to state 49
    STR             shift and go to state 50

    expL                           shift and go to state 51
    termoB                         shift and go to state 31
    fatorB                         shift and go to state 32
    condition                      shift and go to state 33
    exp                            shift and go to state 37
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 44
    read                           shift and go to state 45
    tipocast                       shift and go to state 46

state 20

    (91) ciclos -> PARA . expL SIGUIENTE atrib .
    (92) ciclos -> PARA . expL SIGUIENTE atrib HACER statements .
    (75) expL -> . termoB
    (76) expL -> . expL OR termoB
    (77) termoB -> . fatorB
    (78) termoB -> . termoB AND fatorB
    (79) fatorB -> . condition
    (80) fatorB -> . VERDADERO
    (81) fatorB -> . FALSO
    (82) fatorB -> . ( expL )
    (83) condition -> . exp op exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo RESTO fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . VERDADERO
    (60) fator -> . FALSO
    (61) fator -> . FLOAT
    (62) fator -> . STRING
    (63) fator -> . ID
    (64) fator -> . ID ( content_params )
    (65) fator -> . ( exp )
    (66) fator -> . cast
    (67) fator -> . read
    (96) cast -> . tipocast ( exp )
    (97) cast -> . tipocast ( STRING )
    (95) read -> . LEER ( STRING )
    (98) tipocast -> . REAL
    (99) tipocast -> . ENTERO
    (100) tipocast -> . STR

    VERDADERO       shift and go to state 34
    FALSO           shift and go to state 35
    (               shift and go to state 36
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 43
    LEER            shift and go to state 47
    REAL            shift and go to state 48
    ENTERO          shift and go to state 49
    STR             shift and go to state 50

    expL                           shift and go to state 52
    termoB                         shift and go to state 31
    fatorB                         shift and go to state 32
    condition                      shift and go to state 33
    exp                            shift and go to state 37
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 44
    read                           shift and go to state 45
    tipocast                       shift and go to state 46

state 21

    (93) write -> ESCRIBIR . ( exp ) ;
    (94) write -> ESCRIBIR . ( exp , FIM : exp ) ;

    (               shift and go to state 53


state 22

    (7) declV -> VAR vari . : tipo
    (10) vari -> vari . , atribD
    (11) vari -> vari . , ID

    :               shift and go to state 54
    ,               shift and go to state 55


state 23

    (8) vari -> atribD .

    :               reduce using rule 8 (vari -> atribD .)
    ,               reduce using rule 8 (vari -> atribD .)


state 24

    (9) vari -> ID .
    (16) atribD -> ID . = STRING
    (17) atribD -> ID . = VERDADERO
    (18) atribD -> ID . = FALSO
    (19) atribD -> ID . = exp

    :               reduce using rule 9 (vari -> ID .)
    ,               reduce using rule 9 (vari -> ID .)
    =               shift and go to state 56


state 25

    (31) declF -> FUNCION ID . ( parametros ) : tipo declarations statements DEVUELVE return .

    (               shift and go to state 57


state 26

    (20) declL -> LISTA ID . = lista

    =               shift and go to state 58


state 27

    (41) statements -> statements stat .

    ID              reduce using rule 41 (statements -> statements stat .)
    SI              reduce using rule 41 (statements -> statements stat .)
    ENCUANTO        reduce using rule 41 (statements -> statements stat .)
    PARA            reduce using rule 41 (statements -> statements stat .)
    ESCRIBIR        reduce using rule 41 (statements -> statements stat .)
    $end            reduce using rule 41 (statements -> statements stat .)
    .               reduce using rule 41 (statements -> statements stat .)
    CASO            reduce using rule 41 (statements -> statements stat .)
    DEVUELVE        reduce using rule 41 (statements -> statements stat .)


state 28

    (42) stat -> atrib ; .

    ID              reduce using rule 42 (stat -> atrib ; .)
    SI              reduce using rule 42 (stat -> atrib ; .)
    ENCUANTO        reduce using rule 42 (stat -> atrib ; .)
    PARA            reduce using rule 42 (stat -> atrib ; .)
    ESCRIBIR        reduce using rule 42 (stat -> atrib ; .)
    $end            reduce using rule 42 (stat -> atrib ; .)
    .               reduce using rule 42 (stat -> atrib ; .)
    CASO            reduce using rule 42 (stat -> atrib ; .)
    DEVUELVE        reduce using rule 42 (stat -> atrib ; .)


state 29

    (46) atrib -> ID = . STRING
    (47) atrib -> ID = . VERDADERO
    (48) atrib -> ID = . FALSO
    (49) atrib -> ID = . exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo RESTO fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . VERDADERO
    (60) fator -> . FALSO
    (61) fator -> . FLOAT
    (62) fator -> . STRING
    (63) fator -> . ID
    (64) fator -> . ID ( content_params )
    (65) fator -> . ( exp )
    (66) fator -> . cast
    (67) fator -> . read
    (96) cast -> . tipocast ( exp )
    (97) cast -> . tipocast ( STRING )
    (95) read -> . LEER ( STRING )
    (98) tipocast -> . REAL
    (99) tipocast -> . ENTERO
    (100) tipocast -> . STR

    STRING          shift and go to state 59
    VERDADERO       shift and go to state 60
    FALSO           shift and go to state 61
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 43
    (               shift and go to state 63
    LEER            shift and go to state 47
    REAL            shift and go to state 48
    ENTERO          shift and go to state 49
    STR             shift and go to state 50

    exp                            shift and go to state 62
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 44
    read                           shift and go to state 45
    tipocast                       shift and go to state 46

state 30

    (72) conditions -> SI expL . ENTONCES statements endcondition
    (76) expL -> expL . OR termoB

    ENTONCES        shift and go to state 64
    OR              shift and go to state 65


state 31

    (75) expL -> termoB .
    (78) termoB -> termoB . AND fatorB

    ENTONCES        reduce using rule 75 (expL -> termoB .)
    OR              reduce using rule 75 (expL -> termoB .)
    HACER           reduce using rule 75 (expL -> termoB .)
    SIGUIENTE       reduce using rule 75 (expL -> termoB .)
    )               reduce using rule 75 (expL -> termoB .)
    AND             shift and go to state 66


state 32

    (77) termoB -> fatorB .

    AND             reduce using rule 77 (termoB -> fatorB .)
    ENTONCES        reduce using rule 77 (termoB -> fatorB .)
    OR              reduce using rule 77 (termoB -> fatorB .)
    HACER           reduce using rule 77 (termoB -> fatorB .)
    SIGUIENTE       reduce using rule 77 (termoB -> fatorB .)
    )               reduce using rule 77 (termoB -> fatorB .)


state 33

    (79) fatorB -> condition .

    AND             reduce using rule 79 (fatorB -> condition .)
    ENTONCES        reduce using rule 79 (fatorB -> condition .)
    OR              reduce using rule 79 (fatorB -> condition .)
    HACER           reduce using rule 79 (fatorB -> condition .)
    SIGUIENTE       reduce using rule 79 (fatorB -> condition .)
    )               reduce using rule 79 (fatorB -> condition .)


state 34

    (80) fatorB -> VERDADERO .
    (59) fator -> VERDADERO .

  ! reduce/reduce conflict for ) resolved using rule 59 (fator -> VERDADERO .)
    AND             reduce using rule 80 (fatorB -> VERDADERO .)
    ENTONCES        reduce using rule 80 (fatorB -> VERDADERO .)
    OR              reduce using rule 80 (fatorB -> VERDADERO .)
    HACER           reduce using rule 80 (fatorB -> VERDADERO .)
    SIGUIENTE       reduce using rule 80 (fatorB -> VERDADERO .)
    *               reduce using rule 59 (fator -> VERDADERO .)
    /               reduce using rule 59 (fator -> VERDADERO .)
    RESTO           reduce using rule 59 (fator -> VERDADERO .)
    ^               reduce using rule 59 (fator -> VERDADERO .)
    +               reduce using rule 59 (fator -> VERDADERO .)
    -               reduce using rule 59 (fator -> VERDADERO .)
    >               reduce using rule 59 (fator -> VERDADERO .)
    <               reduce using rule 59 (fator -> VERDADERO .)
    IGUAL           reduce using rule 59 (fator -> VERDADERO .)
    DIFERENTE       reduce using rule 59 (fator -> VERDADERO .)
    )               reduce using rule 59 (fator -> VERDADERO .)

  ! )               [ reduce using rule 80 (fatorB -> VERDADERO .) ]


state 35

    (81) fatorB -> FALSO .
    (60) fator -> FALSO .

  ! reduce/reduce conflict for ) resolved using rule 60 (fator -> FALSO .)
    AND             reduce using rule 81 (fatorB -> FALSO .)
    ENTONCES        reduce using rule 81 (fatorB -> FALSO .)
    OR              reduce using rule 81 (fatorB -> FALSO .)
    HACER           reduce using rule 81 (fatorB -> FALSO .)
    SIGUIENTE       reduce using rule 81 (fatorB -> FALSO .)
    *               reduce using rule 60 (fator -> FALSO .)
    /               reduce using rule 60 (fator -> FALSO .)
    RESTO           reduce using rule 60 (fator -> FALSO .)
    ^               reduce using rule 60 (fator -> FALSO .)
    +               reduce using rule 60 (fator -> FALSO .)
    -               reduce using rule 60 (fator -> FALSO .)
    >               reduce using rule 60 (fator -> FALSO .)
    <               reduce using rule 60 (fator -> FALSO .)
    IGUAL           reduce using rule 60 (fator -> FALSO .)
    DIFERENTE       reduce using rule 60 (fator -> FALSO .)
    )               reduce using rule 60 (fator -> FALSO .)

  ! )               [ reduce using rule 81 (fatorB -> FALSO .) ]


state 36

    (82) fatorB -> ( . expL )
    (65) fator -> ( . exp )
    (75) expL -> . termoB
    (76) expL -> . expL OR termoB
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (77) termoB -> . fatorB
    (78) termoB -> . termoB AND fatorB
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo RESTO fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (79) fatorB -> . condition
    (80) fatorB -> . VERDADERO
    (81) fatorB -> . FALSO
    (82) fatorB -> . ( expL )
    (58) fator -> . INT
    (59) fator -> . VERDADERO
    (60) fator -> . FALSO
    (61) fator -> . FLOAT
    (62) fator -> . STRING
    (63) fator -> . ID
    (64) fator -> . ID ( content_params )
    (65) fator -> . ( exp )
    (66) fator -> . cast
    (67) fator -> . read
    (83) condition -> . exp op exp
    (96) cast -> . tipocast ( exp )
    (97) cast -> . tipocast ( STRING )
    (95) read -> . LEER ( STRING )
    (98) tipocast -> . REAL
    (99) tipocast -> . ENTERO
    (100) tipocast -> . STR

    VERDADERO       shift and go to state 34
    FALSO           shift and go to state 35
    (               shift and go to state 36
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 43
    LEER            shift and go to state 47
    REAL            shift and go to state 48
    ENTERO          shift and go to state 49
    STR             shift and go to state 50

    expL                           shift and go to state 67
    exp                            shift and go to state 68
    termoB                         shift and go to state 31
    termo                          shift and go to state 38
    fatorB                         shift and go to state 32
    fator                          shift and go to state 39
    condition                      shift and go to state 33
    cast                           shift and go to state 44
    read                           shift and go to state 45
    tipocast                       shift and go to state 46

state 37

    (83) condition -> exp . op exp
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo
    (84) op -> . >
    (85) op -> . <
    (86) op -> . IGUAL
    (87) op -> . DIFERENTE
    (88) op -> . > IGUAL
    (89) op -> . < IGUAL

    +               shift and go to state 70
    -               shift and go to state 71
    >               shift and go to state 72
    <               shift and go to state 73
    IGUAL           shift and go to state 74
    DIFERENTE       shift and go to state 75

    op                             shift and go to state 69

state 38

    (52) exp -> termo .
    (53) termo -> termo . * fator
    (54) termo -> termo . / fator
    (55) termo -> termo . RESTO fator
    (56) termo -> termo . ^ fator

    +               reduce using rule 52 (exp -> termo .)
    -               reduce using rule 52 (exp -> termo .)
    >               reduce using rule 52 (exp -> termo .)
    <               reduce using rule 52 (exp -> termo .)
    IGUAL           reduce using rule 52 (exp -> termo .)
    DIFERENTE       reduce using rule 52 (exp -> termo .)
    ;               reduce using rule 52 (exp -> termo .)
    .               reduce using rule 52 (exp -> termo .)
    HACER           reduce using rule 52 (exp -> termo .)
    )               reduce using rule 52 (exp -> termo .)
    ,               reduce using rule 52 (exp -> termo .)
    :               reduce using rule 52 (exp -> termo .)
    AND             reduce using rule 52 (exp -> termo .)
    ENTONCES        reduce using rule 52 (exp -> termo .)
    OR              reduce using rule 52 (exp -> termo .)
    SIGUIENTE       reduce using rule 52 (exp -> termo .)
    *               shift and go to state 76
    /               shift and go to state 77
    RESTO           shift and go to state 78
    ^               shift and go to state 79


state 39

    (57) termo -> fator .

    *               reduce using rule 57 (termo -> fator .)
    /               reduce using rule 57 (termo -> fator .)
    RESTO           reduce using rule 57 (termo -> fator .)
    ^               reduce using rule 57 (termo -> fator .)
    +               reduce using rule 57 (termo -> fator .)
    -               reduce using rule 57 (termo -> fator .)
    >               reduce using rule 57 (termo -> fator .)
    <               reduce using rule 57 (termo -> fator .)
    IGUAL           reduce using rule 57 (termo -> fator .)
    DIFERENTE       reduce using rule 57 (termo -> fator .)
    ;               reduce using rule 57 (termo -> fator .)
    .               reduce using rule 57 (termo -> fator .)
    HACER           reduce using rule 57 (termo -> fator .)
    )               reduce using rule 57 (termo -> fator .)
    ,               reduce using rule 57 (termo -> fator .)
    :               reduce using rule 57 (termo -> fator .)
    AND             reduce using rule 57 (termo -> fator .)
    ENTONCES        reduce using rule 57 (termo -> fator .)
    OR              reduce using rule 57 (termo -> fator .)
    SIGUIENTE       reduce using rule 57 (termo -> fator .)


state 40

    (58) fator -> INT .

    *               reduce using rule 58 (fator -> INT .)
    /               reduce using rule 58 (fator -> INT .)
    RESTO           reduce using rule 58 (fator -> INT .)
    ^               reduce using rule 58 (fator -> INT .)
    +               reduce using rule 58 (fator -> INT .)
    -               reduce using rule 58 (fator -> INT .)
    >               reduce using rule 58 (fator -> INT .)
    <               reduce using rule 58 (fator -> INT .)
    IGUAL           reduce using rule 58 (fator -> INT .)
    DIFERENTE       reduce using rule 58 (fator -> INT .)
    ;               reduce using rule 58 (fator -> INT .)
    .               reduce using rule 58 (fator -> INT .)
    HACER           reduce using rule 58 (fator -> INT .)
    )               reduce using rule 58 (fator -> INT .)
    ,               reduce using rule 58 (fator -> INT .)
    :               reduce using rule 58 (fator -> INT .)
    AND             reduce using rule 58 (fator -> INT .)
    ENTONCES        reduce using rule 58 (fator -> INT .)
    OR              reduce using rule 58 (fator -> INT .)
    SIGUIENTE       reduce using rule 58 (fator -> INT .)


state 41

    (61) fator -> FLOAT .

    *               reduce using rule 61 (fator -> FLOAT .)
    /               reduce using rule 61 (fator -> FLOAT .)
    RESTO           reduce using rule 61 (fator -> FLOAT .)
    ^               reduce using rule 61 (fator -> FLOAT .)
    +               reduce using rule 61 (fator -> FLOAT .)
    -               reduce using rule 61 (fator -> FLOAT .)
    >               reduce using rule 61 (fator -> FLOAT .)
    <               reduce using rule 61 (fator -> FLOAT .)
    IGUAL           reduce using rule 61 (fator -> FLOAT .)
    DIFERENTE       reduce using rule 61 (fator -> FLOAT .)
    ;               reduce using rule 61 (fator -> FLOAT .)
    .               reduce using rule 61 (fator -> FLOAT .)
    HACER           reduce using rule 61 (fator -> FLOAT .)
    )               reduce using rule 61 (fator -> FLOAT .)
    ,               reduce using rule 61 (fator -> FLOAT .)
    :               reduce using rule 61 (fator -> FLOAT .)
    AND             reduce using rule 61 (fator -> FLOAT .)
    ENTONCES        reduce using rule 61 (fator -> FLOAT .)
    OR              reduce using rule 61 (fator -> FLOAT .)
    SIGUIENTE       reduce using rule 61 (fator -> FLOAT .)


state 42

    (62) fator -> STRING .

    *               reduce using rule 62 (fator -> STRING .)
    /               reduce using rule 62 (fator -> STRING .)
    RESTO           reduce using rule 62 (fator -> STRING .)
    ^               reduce using rule 62 (fator -> STRING .)
    +               reduce using rule 62 (fator -> STRING .)
    -               reduce using rule 62 (fator -> STRING .)
    >               reduce using rule 62 (fator -> STRING .)
    <               reduce using rule 62 (fator -> STRING .)
    IGUAL           reduce using rule 62 (fator -> STRING .)
    DIFERENTE       reduce using rule 62 (fator -> STRING .)
    )               reduce using rule 62 (fator -> STRING .)
    ,               reduce using rule 62 (fator -> STRING .)
    AND             reduce using rule 62 (fator -> STRING .)
    ENTONCES        reduce using rule 62 (fator -> STRING .)
    OR              reduce using rule 62 (fator -> STRING .)
    HACER           reduce using rule 62 (fator -> STRING .)
    SIGUIENTE       reduce using rule 62 (fator -> STRING .)
    ;               reduce using rule 62 (fator -> STRING .)
    .               reduce using rule 62 (fator -> STRING .)
    :               reduce using rule 62 (fator -> STRING .)


state 43

    (63) fator -> ID .
    (64) fator -> ID . ( content_params )

    *               reduce using rule 63 (fator -> ID .)
    /               reduce using rule 63 (fator -> ID .)
    RESTO           reduce using rule 63 (fator -> ID .)
    ^               reduce using rule 63 (fator -> ID .)
    +               reduce using rule 63 (fator -> ID .)
    -               reduce using rule 63 (fator -> ID .)
    >               reduce using rule 63 (fator -> ID .)
    <               reduce using rule 63 (fator -> ID .)
    IGUAL           reduce using rule 63 (fator -> ID .)
    DIFERENTE       reduce using rule 63 (fator -> ID .)
    ;               reduce using rule 63 (fator -> ID .)
    .               reduce using rule 63 (fator -> ID .)
    HACER           reduce using rule 63 (fator -> ID .)
    )               reduce using rule 63 (fator -> ID .)
    ,               reduce using rule 63 (fator -> ID .)
    :               reduce using rule 63 (fator -> ID .)
    AND             reduce using rule 63 (fator -> ID .)
    ENTONCES        reduce using rule 63 (fator -> ID .)
    OR              reduce using rule 63 (fator -> ID .)
    SIGUIENTE       reduce using rule 63 (fator -> ID .)
    (               shift and go to state 80


state 44

    (66) fator -> cast .

    *               reduce using rule 66 (fator -> cast .)
    /               reduce using rule 66 (fator -> cast .)
    RESTO           reduce using rule 66 (fator -> cast .)
    ^               reduce using rule 66 (fator -> cast .)
    +               reduce using rule 66 (fator -> cast .)
    -               reduce using rule 66 (fator -> cast .)
    >               reduce using rule 66 (fator -> cast .)
    <               reduce using rule 66 (fator -> cast .)
    IGUAL           reduce using rule 66 (fator -> cast .)
    DIFERENTE       reduce using rule 66 (fator -> cast .)
    ;               reduce using rule 66 (fator -> cast .)
    .               reduce using rule 66 (fator -> cast .)
    HACER           reduce using rule 66 (fator -> cast .)
    )               reduce using rule 66 (fator -> cast .)
    ,               reduce using rule 66 (fator -> cast .)
    :               reduce using rule 66 (fator -> cast .)
    AND             reduce using rule 66 (fator -> cast .)
    ENTONCES        reduce using rule 66 (fator -> cast .)
    OR              reduce using rule 66 (fator -> cast .)
    SIGUIENTE       reduce using rule 66 (fator -> cast .)


state 45

    (67) fator -> read .

    *               reduce using rule 67 (fator -> read .)
    /               reduce using rule 67 (fator -> read .)
    RESTO           reduce using rule 67 (fator -> read .)
    ^               reduce using rule 67 (fator -> read .)
    +               reduce using rule 67 (fator -> read .)
    -               reduce using rule 67 (fator -> read .)
    >               reduce using rule 67 (fator -> read .)
    <               reduce using rule 67 (fator -> read .)
    IGUAL           reduce using rule 67 (fator -> read .)
    DIFERENTE       reduce using rule 67 (fator -> read .)
    ;               reduce using rule 67 (fator -> read .)
    .               reduce using rule 67 (fator -> read .)
    HACER           reduce using rule 67 (fator -> read .)
    )               reduce using rule 67 (fator -> read .)
    ,               reduce using rule 67 (fator -> read .)
    :               reduce using rule 67 (fator -> read .)
    AND             reduce using rule 67 (fator -> read .)
    ENTONCES        reduce using rule 67 (fator -> read .)
    OR              reduce using rule 67 (fator -> read .)
    SIGUIENTE       reduce using rule 67 (fator -> read .)


state 46

    (96) cast -> tipocast . ( exp )
    (97) cast -> tipocast . ( STRING )

    (               shift and go to state 81


state 47

    (95) read -> LEER . ( STRING )

    (               shift and go to state 82


state 48

    (98) tipocast -> REAL .

    (               reduce using rule 98 (tipocast -> REAL .)


state 49

    (99) tipocast -> ENTERO .

    (               reduce using rule 99 (tipocast -> ENTERO .)


state 50

    (100) tipocast -> STR .

    (               reduce using rule 100 (tipocast -> STR .)


state 51

    (90) ciclos -> ENCUANTO expL . HACER statements .
    (76) expL -> expL . OR termoB

    HACER           shift and go to state 83
    OR              shift and go to state 65


state 52

    (91) ciclos -> PARA expL . SIGUIENTE atrib .
    (92) ciclos -> PARA expL . SIGUIENTE atrib HACER statements .
    (76) expL -> expL . OR termoB

    SIGUIENTE       shift and go to state 84
    OR              shift and go to state 65


state 53

    (93) write -> ESCRIBIR ( . exp ) ;
    (94) write -> ESCRIBIR ( . exp , FIM : exp ) ;
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo RESTO fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . VERDADERO
    (60) fator -> . FALSO
    (61) fator -> . FLOAT
    (62) fator -> . STRING
    (63) fator -> . ID
    (64) fator -> . ID ( content_params )
    (65) fator -> . ( exp )
    (66) fator -> . cast
    (67) fator -> . read
    (96) cast -> . tipocast ( exp )
    (97) cast -> . tipocast ( STRING )
    (95) read -> . LEER ( STRING )
    (98) tipocast -> . REAL
    (99) tipocast -> . ENTERO
    (100) tipocast -> . STR

    INT             shift and go to state 40
    VERDADERO       shift and go to state 86
    FALSO           shift and go to state 87
    FLOAT           shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 43
    (               shift and go to state 63
    LEER            shift and go to state 47
    REAL            shift and go to state 48
    ENTERO          shift and go to state 49
    STR             shift and go to state 50

    exp                            shift and go to state 85
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 44
    read                           shift and go to state 45
    tipocast                       shift and go to state 46

state 54

    (7) declV -> VAR vari : . tipo
    (12) tipo -> . ENTERO
    (13) tipo -> . REAL
    (14) tipo -> . BOOLEANO
    (15) tipo -> . STR

    ENTERO          shift and go to state 89
    REAL            shift and go to state 90
    BOOLEANO        shift and go to state 91
    STR             shift and go to state 92

    tipo                           shift and go to state 88

state 55

    (10) vari -> vari , . atribD
    (11) vari -> vari , . ID
    (16) atribD -> . ID = STRING
    (17) atribD -> . ID = VERDADERO
    (18) atribD -> . ID = FALSO
    (19) atribD -> . ID = exp

    ID              shift and go to state 94

    atribD                         shift and go to state 93

state 56

    (16) atribD -> ID = . STRING
    (17) atribD -> ID = . VERDADERO
    (18) atribD -> ID = . FALSO
    (19) atribD -> ID = . exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo RESTO fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . VERDADERO
    (60) fator -> . FALSO
    (61) fator -> . FLOAT
    (62) fator -> . STRING
    (63) fator -> . ID
    (64) fator -> . ID ( content_params )
    (65) fator -> . ( exp )
    (66) fator -> . cast
    (67) fator -> . read
    (96) cast -> . tipocast ( exp )
    (97) cast -> . tipocast ( STRING )
    (95) read -> . LEER ( STRING )
    (98) tipocast -> . REAL
    (99) tipocast -> . ENTERO
    (100) tipocast -> . STR

    STRING          shift and go to state 95
    VERDADERO       shift and go to state 96
    FALSO           shift and go to state 97
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    ID              shift and go to state 43
    (               shift and go to state 63
    LEER            shift and go to state 47
    REAL            shift and go to state 48
    ENTERO          shift and go to state 49
    STR             shift and go to state 50

    exp                            shift and go to state 98
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 44
    read                           shift and go to state 45
    tipocast                       shift and go to state 46

state 57

    (31) declF -> FUNCION ID ( . parametros ) : tipo declarations statements DEVUELVE return .
    (32) parametros -> .
    (33) parametros -> . ID : tipo
    (34) parametros -> . parametros , ID : tipo

    )               reduce using rule 32 (parametros -> .)
    ,               reduce using rule 32 (parametros -> .)
    ID              shift and go to state 99

    parametros                     shift and go to state 100

state 58

    (20) declL -> LISTA ID = . lista
    (21) lista -> . [ ]
    (22) lista -> . [ elementos ]

    [               shift and go to state 102

    lista                          shift and go to state 101

state 59

    (46) atrib -> ID = STRING .
    (62) fator -> STRING .

  ! reduce/reduce conflict for ; resolved using rule 46 (atrib -> ID = STRING .)
  ! reduce/reduce conflict for . resolved using rule 46 (atrib -> ID = STRING .)
  ! reduce/reduce conflict for HACER resolved using rule 46 (atrib -> ID = STRING .)
    ;               reduce using rule 46 (atrib -> ID = STRING .)
    .               reduce using rule 46 (atrib -> ID = STRING .)
    HACER           reduce using rule 46 (atrib -> ID = STRING .)
    *               reduce using rule 62 (fator -> STRING .)
    /               reduce using rule 62 (fator -> STRING .)
    RESTO           reduce using rule 62 (fator -> STRING .)
    ^               reduce using rule 62 (fator -> STRING .)
    +               reduce using rule 62 (fator -> STRING .)
    -               reduce using rule 62 (fator -> STRING .)

  ! ;               [ reduce using rule 62 (fator -> STRING .) ]
  ! .               [ reduce using rule 62 (fator -> STRING .) ]
  ! HACER           [ reduce using rule 62 (fator -> STRING .) ]


state 60

    (47) atrib -> ID = VERDADERO .
    (59) fator -> VERDADERO .

  ! reduce/reduce conflict for ; resolved using rule 47 (atrib -> ID = VERDADERO .)
  ! reduce/reduce conflict for . resolved using rule 47 (atrib -> ID = VERDADERO .)
  ! reduce/reduce conflict for HACER resolved using rule 47 (atrib -> ID = VERDADERO .)
    ;               reduce using rule 47 (atrib -> ID = VERDADERO .)
    .               reduce using rule 47 (atrib -> ID = VERDADERO .)
    HACER           reduce using rule 47 (atrib -> ID = VERDADERO .)
    *               reduce using rule 59 (fator -> VERDADERO .)
    /               reduce using rule 59 (fator -> VERDADERO .)
    RESTO           reduce using rule 59 (fator -> VERDADERO .)
    ^               reduce using rule 59 (fator -> VERDADERO .)
    +               reduce using rule 59 (fator -> VERDADERO .)
    -               reduce using rule 59 (fator -> VERDADERO .)

  ! ;               [ reduce using rule 59 (fator -> VERDADERO .) ]
  ! .               [ reduce using rule 59 (fator -> VERDADERO .) ]
  ! HACER           [ reduce using rule 59 (fator -> VERDADERO .) ]


state 61

    (48) atrib -> ID = FALSO .
    (60) fator -> FALSO .

  ! reduce/reduce conflict for ; resolved using rule 48 (atrib -> ID = FALSO .)
  ! reduce/reduce conflict for . resolved using rule 48 (atrib -> ID = FALSO .)
  ! reduce/reduce conflict for HACER resolved using rule 48 (atrib -> ID = FALSO .)
    ;               reduce using rule 48 (atrib -> ID = FALSO .)
    .               reduce using rule 48 (atrib -> ID = FALSO .)
    HACER           reduce using rule 48 (atrib -> ID = FALSO .)
    *               reduce using rule 60 (fator -> FALSO .)
    /               reduce using rule 60 (fator -> FALSO .)
    RESTO           reduce using rule 60 (fator -> FALSO .)
    ^               reduce using rule 60 (fator -> FALSO .)
    +               reduce using rule 60 (fator -> FALSO .)
    -               reduce using rule 60 (fator -> FALSO .)

  ! ;               [ reduce using rule 60 (fator -> FALSO .) ]
  ! .               [ reduce using rule 60 (fator -> FALSO .) ]
  ! HACER           [ reduce using rule 60 (fator -> FALSO .) ]


state 62

    (49) atrib -> ID = exp .
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo

    ;               reduce using rule 49 (atrib -> ID = exp .)
    .               reduce using rule 49 (atrib -> ID = exp .)
    HACER           reduce using rule 49 (atrib -> ID = exp .)
    +               shift and go to state 70
    -               shift and go to state 71


state 63

    (65) fator -> ( . exp )
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo RESTO fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . VERDADERO
    (60) fator -> . FALSO
    (61) fator -> . FLOAT
    (62) fator -> . STRING
    (63) fator -> . ID
    (64) fator -> . ID ( content_params )
    (65) fator -> . ( exp )
    (66) fator -> . cast
    (67) fator -> . read
    (96) cast -> . tipocast ( exp )
    (97) cast -> . tipocast ( STRING )
    (95) read -> . LEER ( STRING )
    (98) tipocast -> . REAL
    (99) tipocast -> . ENTERO
    (100) tipocast -> . STR

    INT             shift and go to state 40
    VERDADERO       shift and go to state 86
    FALSO           shift and go to state 87
    FLOAT           shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 43
    (               shift and go to state 63
    LEER            shift and go to state 47
    REAL            shift and go to state 48
    ENTERO          shift and go to state 49
    STR             shift and go to state 50

    exp                            shift and go to state 103
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 44
    read                           shift and go to state 45
    tipocast                       shift and go to state 46

state 64

    (72) conditions -> SI expL ENTONCES . statements endcondition
    (40) statements -> . stat
    (41) statements -> . statements stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (72) conditions -> . SI expL ENTONCES statements endcondition
    (90) ciclos -> . ENCUANTO expL HACER statements .
    (91) ciclos -> . PARA expL SIGUIENTE atrib .
    (92) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (93) write -> . ESCRIBIR ( exp ) ;
    (94) write -> . ESCRIBIR ( exp , FIM : exp ) ;

    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    statements                     shift and go to state 104
    stat                           shift and go to state 12
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 65

    (76) expL -> expL OR . termoB
    (77) termoB -> . fatorB
    (78) termoB -> . termoB AND fatorB
    (79) fatorB -> . condition
    (80) fatorB -> . VERDADERO
    (81) fatorB -> . FALSO
    (82) fatorB -> . ( expL )
    (83) condition -> . exp op exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo RESTO fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . VERDADERO
    (60) fator -> . FALSO
    (61) fator -> . FLOAT
    (62) fator -> . STRING
    (63) fator -> . ID
    (64) fator -> . ID ( content_params )
    (65) fator -> . ( exp )
    (66) fator -> . cast
    (67) fator -> . read
    (96) cast -> . tipocast ( exp )
    (97) cast -> . tipocast ( STRING )
    (95) read -> . LEER ( STRING )
    (98) tipocast -> . REAL
    (99) tipocast -> . ENTERO
    (100) tipocast -> . STR

    VERDADERO       shift and go to state 34
    FALSO           shift and go to state 35
    (               shift and go to state 36
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 43
    LEER            shift and go to state 47
    REAL            shift and go to state 48
    ENTERO          shift and go to state 49
    STR             shift and go to state 50

    termoB                         shift and go to state 105
    fatorB                         shift and go to state 32
    condition                      shift and go to state 33
    exp                            shift and go to state 37
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 44
    read                           shift and go to state 45
    tipocast                       shift and go to state 46

state 66

    (78) termoB -> termoB AND . fatorB
    (79) fatorB -> . condition
    (80) fatorB -> . VERDADERO
    (81) fatorB -> . FALSO
    (82) fatorB -> . ( expL )
    (83) condition -> . exp op exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo RESTO fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . VERDADERO
    (60) fator -> . FALSO
    (61) fator -> . FLOAT
    (62) fator -> . STRING
    (63) fator -> . ID
    (64) fator -> . ID ( content_params )
    (65) fator -> . ( exp )
    (66) fator -> . cast
    (67) fator -> . read
    (96) cast -> . tipocast ( exp )
    (97) cast -> . tipocast ( STRING )
    (95) read -> . LEER ( STRING )
    (98) tipocast -> . REAL
    (99) tipocast -> . ENTERO
    (100) tipocast -> . STR

    VERDADERO       shift and go to state 34
    FALSO           shift and go to state 35
    (               shift and go to state 36
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 43
    LEER            shift and go to state 47
    REAL            shift and go to state 48
    ENTERO          shift and go to state 49
    STR             shift and go to state 50

    fatorB                         shift and go to state 106
    condition                      shift and go to state 33
    exp                            shift and go to state 37
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 44
    read                           shift and go to state 45
    tipocast                       shift and go to state 46

state 67

    (82) fatorB -> ( expL . )
    (76) expL -> expL . OR termoB

    )               shift and go to state 107
    OR              shift and go to state 65


state 68

    (65) fator -> ( exp . )
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo
    (83) condition -> exp . op exp
    (84) op -> . >
    (85) op -> . <
    (86) op -> . IGUAL
    (87) op -> . DIFERENTE
    (88) op -> . > IGUAL
    (89) op -> . < IGUAL

    )               shift and go to state 108
    +               shift and go to state 70
    -               shift and go to state 71
    >               shift and go to state 72
    <               shift and go to state 73
    IGUAL           shift and go to state 74
    DIFERENTE       shift and go to state 75

    op                             shift and go to state 69

state 69

    (83) condition -> exp op . exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo RESTO fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . VERDADERO
    (60) fator -> . FALSO
    (61) fator -> . FLOAT
    (62) fator -> . STRING
    (63) fator -> . ID
    (64) fator -> . ID ( content_params )
    (65) fator -> . ( exp )
    (66) fator -> . cast
    (67) fator -> . read
    (96) cast -> . tipocast ( exp )
    (97) cast -> . tipocast ( STRING )
    (95) read -> . LEER ( STRING )
    (98) tipocast -> . REAL
    (99) tipocast -> . ENTERO
    (100) tipocast -> . STR

    INT             shift and go to state 40
    VERDADERO       shift and go to state 86
    FALSO           shift and go to state 87
    FLOAT           shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 43
    (               shift and go to state 63
    LEER            shift and go to state 47
    REAL            shift and go to state 48
    ENTERO          shift and go to state 49
    STR             shift and go to state 50

    exp                            shift and go to state 109
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 44
    read                           shift and go to state 45
    tipocast                       shift and go to state 46

state 70

    (50) exp -> exp + . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo RESTO fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . VERDADERO
    (60) fator -> . FALSO
    (61) fator -> . FLOAT
    (62) fator -> . STRING
    (63) fator -> . ID
    (64) fator -> . ID ( content_params )
    (65) fator -> . ( exp )
    (66) fator -> . cast
    (67) fator -> . read
    (96) cast -> . tipocast ( exp )
    (97) cast -> . tipocast ( STRING )
    (95) read -> . LEER ( STRING )
    (98) tipocast -> . REAL
    (99) tipocast -> . ENTERO
    (100) tipocast -> . STR

    INT             shift and go to state 40
    VERDADERO       shift and go to state 86
    FALSO           shift and go to state 87
    FLOAT           shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 43
    (               shift and go to state 63
    LEER            shift and go to state 47
    REAL            shift and go to state 48
    ENTERO          shift and go to state 49
    STR             shift and go to state 50

    termo                          shift and go to state 110
    fator                          shift and go to state 39
    cast                           shift and go to state 44
    read                           shift and go to state 45
    tipocast                       shift and go to state 46

state 71

    (51) exp -> exp - . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo RESTO fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . VERDADERO
    (60) fator -> . FALSO
    (61) fator -> . FLOAT
    (62) fator -> . STRING
    (63) fator -> . ID
    (64) fator -> . ID ( content_params )
    (65) fator -> . ( exp )
    (66) fator -> . cast
    (67) fator -> . read
    (96) cast -> . tipocast ( exp )
    (97) cast -> . tipocast ( STRING )
    (95) read -> . LEER ( STRING )
    (98) tipocast -> . REAL
    (99) tipocast -> . ENTERO
    (100) tipocast -> . STR

    INT             shift and go to state 40
    VERDADERO       shift and go to state 86
    FALSO           shift and go to state 87
    FLOAT           shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 43
    (               shift and go to state 63
    LEER            shift and go to state 47
    REAL            shift and go to state 48
    ENTERO          shift and go to state 49
    STR             shift and go to state 50

    termo                          shift and go to state 111
    fator                          shift and go to state 39
    cast                           shift and go to state 44
    read                           shift and go to state 45
    tipocast                       shift and go to state 46

state 72

    (84) op -> > .
    (88) op -> > . IGUAL

    INT             reduce using rule 84 (op -> > .)
    VERDADERO       reduce using rule 84 (op -> > .)
    FALSO           reduce using rule 84 (op -> > .)
    FLOAT           reduce using rule 84 (op -> > .)
    STRING          reduce using rule 84 (op -> > .)
    ID              reduce using rule 84 (op -> > .)
    (               reduce using rule 84 (op -> > .)
    LEER            reduce using rule 84 (op -> > .)
    REAL            reduce using rule 84 (op -> > .)
    ENTERO          reduce using rule 84 (op -> > .)
    STR             reduce using rule 84 (op -> > .)
    IGUAL           shift and go to state 112


state 73

    (85) op -> < .
    (89) op -> < . IGUAL

    INT             reduce using rule 85 (op -> < .)
    VERDADERO       reduce using rule 85 (op -> < .)
    FALSO           reduce using rule 85 (op -> < .)
    FLOAT           reduce using rule 85 (op -> < .)
    STRING          reduce using rule 85 (op -> < .)
    ID              reduce using rule 85 (op -> < .)
    (               reduce using rule 85 (op -> < .)
    LEER            reduce using rule 85 (op -> < .)
    REAL            reduce using rule 85 (op -> < .)
    ENTERO          reduce using rule 85 (op -> < .)
    STR             reduce using rule 85 (op -> < .)
    IGUAL           shift and go to state 113


state 74

    (86) op -> IGUAL .

    INT             reduce using rule 86 (op -> IGUAL .)
    VERDADERO       reduce using rule 86 (op -> IGUAL .)
    FALSO           reduce using rule 86 (op -> IGUAL .)
    FLOAT           reduce using rule 86 (op -> IGUAL .)
    STRING          reduce using rule 86 (op -> IGUAL .)
    ID              reduce using rule 86 (op -> IGUAL .)
    (               reduce using rule 86 (op -> IGUAL .)
    LEER            reduce using rule 86 (op -> IGUAL .)
    REAL            reduce using rule 86 (op -> IGUAL .)
    ENTERO          reduce using rule 86 (op -> IGUAL .)
    STR             reduce using rule 86 (op -> IGUAL .)


state 75

    (87) op -> DIFERENTE .

    INT             reduce using rule 87 (op -> DIFERENTE .)
    VERDADERO       reduce using rule 87 (op -> DIFERENTE .)
    FALSO           reduce using rule 87 (op -> DIFERENTE .)
    FLOAT           reduce using rule 87 (op -> DIFERENTE .)
    STRING          reduce using rule 87 (op -> DIFERENTE .)
    ID              reduce using rule 87 (op -> DIFERENTE .)
    (               reduce using rule 87 (op -> DIFERENTE .)
    LEER            reduce using rule 87 (op -> DIFERENTE .)
    REAL            reduce using rule 87 (op -> DIFERENTE .)
    ENTERO          reduce using rule 87 (op -> DIFERENTE .)
    STR             reduce using rule 87 (op -> DIFERENTE .)


state 76

    (53) termo -> termo * . fator
    (58) fator -> . INT
    (59) fator -> . VERDADERO
    (60) fator -> . FALSO
    (61) fator -> . FLOAT
    (62) fator -> . STRING
    (63) fator -> . ID
    (64) fator -> . ID ( content_params )
    (65) fator -> . ( exp )
    (66) fator -> . cast
    (67) fator -> . read
    (96) cast -> . tipocast ( exp )
    (97) cast -> . tipocast ( STRING )
    (95) read -> . LEER ( STRING )
    (98) tipocast -> . REAL
    (99) tipocast -> . ENTERO
    (100) tipocast -> . STR

    INT             shift and go to state 40
    VERDADERO       shift and go to state 86
    FALSO           shift and go to state 87
    FLOAT           shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 43
    (               shift and go to state 63
    LEER            shift and go to state 47
    REAL            shift and go to state 48
    ENTERO          shift and go to state 49
    STR             shift and go to state 50

    fator                          shift and go to state 114
    cast                           shift and go to state 44
    read                           shift and go to state 45
    tipocast                       shift and go to state 46

state 77

    (54) termo -> termo / . fator
    (58) fator -> . INT
    (59) fator -> . VERDADERO
    (60) fator -> . FALSO
    (61) fator -> . FLOAT
    (62) fator -> . STRING
    (63) fator -> . ID
    (64) fator -> . ID ( content_params )
    (65) fator -> . ( exp )
    (66) fator -> . cast
    (67) fator -> . read
    (96) cast -> . tipocast ( exp )
    (97) cast -> . tipocast ( STRING )
    (95) read -> . LEER ( STRING )
    (98) tipocast -> . REAL
    (99) tipocast -> . ENTERO
    (100) tipocast -> . STR

    INT             shift and go to state 40
    VERDADERO       shift and go to state 86
    FALSO           shift and go to state 87
    FLOAT           shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 43
    (               shift and go to state 63
    LEER            shift and go to state 47
    REAL            shift and go to state 48
    ENTERO          shift and go to state 49
    STR             shift and go to state 50

    fator                          shift and go to state 115
    cast                           shift and go to state 44
    read                           shift and go to state 45
    tipocast                       shift and go to state 46

state 78

    (55) termo -> termo RESTO . fator
    (58) fator -> . INT
    (59) fator -> . VERDADERO
    (60) fator -> . FALSO
    (61) fator -> . FLOAT
    (62) fator -> . STRING
    (63) fator -> . ID
    (64) fator -> . ID ( content_params )
    (65) fator -> . ( exp )
    (66) fator -> . cast
    (67) fator -> . read
    (96) cast -> . tipocast ( exp )
    (97) cast -> . tipocast ( STRING )
    (95) read -> . LEER ( STRING )
    (98) tipocast -> . REAL
    (99) tipocast -> . ENTERO
    (100) tipocast -> . STR

    INT             shift and go to state 40
    VERDADERO       shift and go to state 86
    FALSO           shift and go to state 87
    FLOAT           shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 43
    (               shift and go to state 63
    LEER            shift and go to state 47
    REAL            shift and go to state 48
    ENTERO          shift and go to state 49
    STR             shift and go to state 50

    fator                          shift and go to state 116
    cast                           shift and go to state 44
    read                           shift and go to state 45
    tipocast                       shift and go to state 46

state 79

    (56) termo -> termo ^ . fator
    (58) fator -> . INT
    (59) fator -> . VERDADERO
    (60) fator -> . FALSO
    (61) fator -> . FLOAT
    (62) fator -> . STRING
    (63) fator -> . ID
    (64) fator -> . ID ( content_params )
    (65) fator -> . ( exp )
    (66) fator -> . cast
    (67) fator -> . read
    (96) cast -> . tipocast ( exp )
    (97) cast -> . tipocast ( STRING )
    (95) read -> . LEER ( STRING )
    (98) tipocast -> . REAL
    (99) tipocast -> . ENTERO
    (100) tipocast -> . STR

    INT             shift and go to state 40
    VERDADERO       shift and go to state 86
    FALSO           shift and go to state 87
    FLOAT           shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 43
    (               shift and go to state 63
    LEER            shift and go to state 47
    REAL            shift and go to state 48
    ENTERO          shift and go to state 49
    STR             shift and go to state 50

    fator                          shift and go to state 117
    cast                           shift and go to state 44
    read                           shift and go to state 45
    tipocast                       shift and go to state 46

state 80

    (64) fator -> ID ( . content_params )
    (68) content_params -> .
    (69) content_params -> . list_params
    (70) list_params -> . exp
    (71) list_params -> . list_params , exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo RESTO fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . VERDADERO
    (60) fator -> . FALSO
    (61) fator -> . FLOAT
    (62) fator -> . STRING
    (63) fator -> . ID
    (64) fator -> . ID ( content_params )
    (65) fator -> . ( exp )
    (66) fator -> . cast
    (67) fator -> . read
    (96) cast -> . tipocast ( exp )
    (97) cast -> . tipocast ( STRING )
    (95) read -> . LEER ( STRING )
    (98) tipocast -> . REAL
    (99) tipocast -> . ENTERO
    (100) tipocast -> . STR

    )               reduce using rule 68 (content_params -> .)
    INT             shift and go to state 40
    VERDADERO       shift and go to state 86
    FALSO           shift and go to state 87
    FLOAT           shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 43
    (               shift and go to state 63
    LEER            shift and go to state 47
    REAL            shift and go to state 48
    ENTERO          shift and go to state 49
    STR             shift and go to state 50

    content_params                 shift and go to state 118
    list_params                    shift and go to state 119
    exp                            shift and go to state 120
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 44
    read                           shift and go to state 45
    tipocast                       shift and go to state 46

state 81

    (96) cast -> tipocast ( . exp )
    (97) cast -> tipocast ( . STRING )
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo RESTO fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . VERDADERO
    (60) fator -> . FALSO
    (61) fator -> . FLOAT
    (62) fator -> . STRING
    (63) fator -> . ID
    (64) fator -> . ID ( content_params )
    (65) fator -> . ( exp )
    (66) fator -> . cast
    (67) fator -> . read
    (96) cast -> . tipocast ( exp )
    (97) cast -> . tipocast ( STRING )
    (95) read -> . LEER ( STRING )
    (98) tipocast -> . REAL
    (99) tipocast -> . ENTERO
    (100) tipocast -> . STR

    STRING          shift and go to state 122
    INT             shift and go to state 40
    VERDADERO       shift and go to state 86
    FALSO           shift and go to state 87
    FLOAT           shift and go to state 41
    ID              shift and go to state 43
    (               shift and go to state 63
    LEER            shift and go to state 47
    REAL            shift and go to state 48
    ENTERO          shift and go to state 49
    STR             shift and go to state 50

    tipocast                       shift and go to state 46
    exp                            shift and go to state 121
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 44
    read                           shift and go to state 45

state 82

    (95) read -> LEER ( . STRING )

    STRING          shift and go to state 123


state 83

    (90) ciclos -> ENCUANTO expL HACER . statements .
    (40) statements -> . stat
    (41) statements -> . statements stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (72) conditions -> . SI expL ENTONCES statements endcondition
    (90) ciclos -> . ENCUANTO expL HACER statements .
    (91) ciclos -> . PARA expL SIGUIENTE atrib .
    (92) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (93) write -> . ESCRIBIR ( exp ) ;
    (94) write -> . ESCRIBIR ( exp , FIM : exp ) ;

    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    statements                     shift and go to state 124
    stat                           shift and go to state 12
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 84

    (91) ciclos -> PARA expL SIGUIENTE . atrib .
    (92) ciclos -> PARA expL SIGUIENTE . atrib HACER statements .
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp

    ID              shift and go to state 17

    atrib                          shift and go to state 125

state 85

    (93) write -> ESCRIBIR ( exp . ) ;
    (94) write -> ESCRIBIR ( exp . , FIM : exp ) ;
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo

    )               shift and go to state 126
    ,               shift and go to state 127
    +               shift and go to state 70
    -               shift and go to state 71


state 86

    (59) fator -> VERDADERO .

    *               reduce using rule 59 (fator -> VERDADERO .)
    /               reduce using rule 59 (fator -> VERDADERO .)
    RESTO           reduce using rule 59 (fator -> VERDADERO .)
    ^               reduce using rule 59 (fator -> VERDADERO .)
    )               reduce using rule 59 (fator -> VERDADERO .)
    ,               reduce using rule 59 (fator -> VERDADERO .)
    +               reduce using rule 59 (fator -> VERDADERO .)
    -               reduce using rule 59 (fator -> VERDADERO .)
    AND             reduce using rule 59 (fator -> VERDADERO .)
    ENTONCES        reduce using rule 59 (fator -> VERDADERO .)
    OR              reduce using rule 59 (fator -> VERDADERO .)
    HACER           reduce using rule 59 (fator -> VERDADERO .)
    SIGUIENTE       reduce using rule 59 (fator -> VERDADERO .)
    >               reduce using rule 59 (fator -> VERDADERO .)
    <               reduce using rule 59 (fator -> VERDADERO .)
    IGUAL           reduce using rule 59 (fator -> VERDADERO .)
    DIFERENTE       reduce using rule 59 (fator -> VERDADERO .)
    ;               reduce using rule 59 (fator -> VERDADERO .)
    .               reduce using rule 59 (fator -> VERDADERO .)
    :               reduce using rule 59 (fator -> VERDADERO .)


state 87

    (60) fator -> FALSO .

    *               reduce using rule 60 (fator -> FALSO .)
    /               reduce using rule 60 (fator -> FALSO .)
    RESTO           reduce using rule 60 (fator -> FALSO .)
    ^               reduce using rule 60 (fator -> FALSO .)
    )               reduce using rule 60 (fator -> FALSO .)
    ,               reduce using rule 60 (fator -> FALSO .)
    +               reduce using rule 60 (fator -> FALSO .)
    -               reduce using rule 60 (fator -> FALSO .)
    AND             reduce using rule 60 (fator -> FALSO .)
    ENTONCES        reduce using rule 60 (fator -> FALSO .)
    OR              reduce using rule 60 (fator -> FALSO .)
    HACER           reduce using rule 60 (fator -> FALSO .)
    SIGUIENTE       reduce using rule 60 (fator -> FALSO .)
    >               reduce using rule 60 (fator -> FALSO .)
    <               reduce using rule 60 (fator -> FALSO .)
    IGUAL           reduce using rule 60 (fator -> FALSO .)
    DIFERENTE       reduce using rule 60 (fator -> FALSO .)
    ;               reduce using rule 60 (fator -> FALSO .)
    .               reduce using rule 60 (fator -> FALSO .)
    :               reduce using rule 60 (fator -> FALSO .)


state 88

    (7) declV -> VAR vari : tipo .

    VAR             reduce using rule 7 (declV -> VAR vari : tipo .)
    FUNCION         reduce using rule 7 (declV -> VAR vari : tipo .)
    LISTA           reduce using rule 7 (declV -> VAR vari : tipo .)
    ID              reduce using rule 7 (declV -> VAR vari : tipo .)
    SI              reduce using rule 7 (declV -> VAR vari : tipo .)
    ENCUANTO        reduce using rule 7 (declV -> VAR vari : tipo .)
    PARA            reduce using rule 7 (declV -> VAR vari : tipo .)
    ESCRIBIR        reduce using rule 7 (declV -> VAR vari : tipo .)


state 89

    (12) tipo -> ENTERO .

    VAR             reduce using rule 12 (tipo -> ENTERO .)
    FUNCION         reduce using rule 12 (tipo -> ENTERO .)
    LISTA           reduce using rule 12 (tipo -> ENTERO .)
    ID              reduce using rule 12 (tipo -> ENTERO .)
    SI              reduce using rule 12 (tipo -> ENTERO .)
    ENCUANTO        reduce using rule 12 (tipo -> ENTERO .)
    PARA            reduce using rule 12 (tipo -> ENTERO .)
    ESCRIBIR        reduce using rule 12 (tipo -> ENTERO .)
    )               reduce using rule 12 (tipo -> ENTERO .)
    ,               reduce using rule 12 (tipo -> ENTERO .)


state 90

    (13) tipo -> REAL .

    VAR             reduce using rule 13 (tipo -> REAL .)
    FUNCION         reduce using rule 13 (tipo -> REAL .)
    LISTA           reduce using rule 13 (tipo -> REAL .)
    ID              reduce using rule 13 (tipo -> REAL .)
    SI              reduce using rule 13 (tipo -> REAL .)
    ENCUANTO        reduce using rule 13 (tipo -> REAL .)
    PARA            reduce using rule 13 (tipo -> REAL .)
    ESCRIBIR        reduce using rule 13 (tipo -> REAL .)
    )               reduce using rule 13 (tipo -> REAL .)
    ,               reduce using rule 13 (tipo -> REAL .)


state 91

    (14) tipo -> BOOLEANO .

    VAR             reduce using rule 14 (tipo -> BOOLEANO .)
    FUNCION         reduce using rule 14 (tipo -> BOOLEANO .)
    LISTA           reduce using rule 14 (tipo -> BOOLEANO .)
    ID              reduce using rule 14 (tipo -> BOOLEANO .)
    SI              reduce using rule 14 (tipo -> BOOLEANO .)
    ENCUANTO        reduce using rule 14 (tipo -> BOOLEANO .)
    PARA            reduce using rule 14 (tipo -> BOOLEANO .)
    ESCRIBIR        reduce using rule 14 (tipo -> BOOLEANO .)
    )               reduce using rule 14 (tipo -> BOOLEANO .)
    ,               reduce using rule 14 (tipo -> BOOLEANO .)


state 92

    (15) tipo -> STR .

    VAR             reduce using rule 15 (tipo -> STR .)
    FUNCION         reduce using rule 15 (tipo -> STR .)
    LISTA           reduce using rule 15 (tipo -> STR .)
    ID              reduce using rule 15 (tipo -> STR .)
    SI              reduce using rule 15 (tipo -> STR .)
    ENCUANTO        reduce using rule 15 (tipo -> STR .)
    PARA            reduce using rule 15 (tipo -> STR .)
    ESCRIBIR        reduce using rule 15 (tipo -> STR .)
    )               reduce using rule 15 (tipo -> STR .)
    ,               reduce using rule 15 (tipo -> STR .)


state 93

    (10) vari -> vari , atribD .

    :               reduce using rule 10 (vari -> vari , atribD .)
    ,               reduce using rule 10 (vari -> vari , atribD .)


state 94

    (11) vari -> vari , ID .
    (16) atribD -> ID . = STRING
    (17) atribD -> ID . = VERDADERO
    (18) atribD -> ID . = FALSO
    (19) atribD -> ID . = exp

    :               reduce using rule 11 (vari -> vari , ID .)
    ,               reduce using rule 11 (vari -> vari , ID .)
    =               shift and go to state 56


state 95

    (16) atribD -> ID = STRING .
    (62) fator -> STRING .

  ! reduce/reduce conflict for : resolved using rule 16 (atribD -> ID = STRING .)
  ! reduce/reduce conflict for , resolved using rule 16 (atribD -> ID = STRING .)
    :               reduce using rule 16 (atribD -> ID = STRING .)
    ,               reduce using rule 16 (atribD -> ID = STRING .)
    *               reduce using rule 62 (fator -> STRING .)
    /               reduce using rule 62 (fator -> STRING .)
    RESTO           reduce using rule 62 (fator -> STRING .)
    ^               reduce using rule 62 (fator -> STRING .)
    +               reduce using rule 62 (fator -> STRING .)
    -               reduce using rule 62 (fator -> STRING .)

  ! :               [ reduce using rule 62 (fator -> STRING .) ]
  ! ,               [ reduce using rule 62 (fator -> STRING .) ]


state 96

    (17) atribD -> ID = VERDADERO .
    (59) fator -> VERDADERO .

  ! reduce/reduce conflict for : resolved using rule 17 (atribD -> ID = VERDADERO .)
  ! reduce/reduce conflict for , resolved using rule 17 (atribD -> ID = VERDADERO .)
    :               reduce using rule 17 (atribD -> ID = VERDADERO .)
    ,               reduce using rule 17 (atribD -> ID = VERDADERO .)
    *               reduce using rule 59 (fator -> VERDADERO .)
    /               reduce using rule 59 (fator -> VERDADERO .)
    RESTO           reduce using rule 59 (fator -> VERDADERO .)
    ^               reduce using rule 59 (fator -> VERDADERO .)
    +               reduce using rule 59 (fator -> VERDADERO .)
    -               reduce using rule 59 (fator -> VERDADERO .)

  ! :               [ reduce using rule 59 (fator -> VERDADERO .) ]
  ! ,               [ reduce using rule 59 (fator -> VERDADERO .) ]


state 97

    (18) atribD -> ID = FALSO .
    (60) fator -> FALSO .

  ! reduce/reduce conflict for : resolved using rule 18 (atribD -> ID = FALSO .)
  ! reduce/reduce conflict for , resolved using rule 18 (atribD -> ID = FALSO .)
    :               reduce using rule 18 (atribD -> ID = FALSO .)
    ,               reduce using rule 18 (atribD -> ID = FALSO .)
    *               reduce using rule 60 (fator -> FALSO .)
    /               reduce using rule 60 (fator -> FALSO .)
    RESTO           reduce using rule 60 (fator -> FALSO .)
    ^               reduce using rule 60 (fator -> FALSO .)
    +               reduce using rule 60 (fator -> FALSO .)
    -               reduce using rule 60 (fator -> FALSO .)

  ! :               [ reduce using rule 60 (fator -> FALSO .) ]
  ! ,               [ reduce using rule 60 (fator -> FALSO .) ]


state 98

    (19) atribD -> ID = exp .
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo

    :               reduce using rule 19 (atribD -> ID = exp .)
    ,               reduce using rule 19 (atribD -> ID = exp .)
    +               shift and go to state 70
    -               shift and go to state 71


state 99

    (33) parametros -> ID . : tipo

    :               shift and go to state 128


state 100

    (31) declF -> FUNCION ID ( parametros . ) : tipo declarations statements DEVUELVE return .
    (34) parametros -> parametros . , ID : tipo

    )               shift and go to state 129
    ,               shift and go to state 130


state 101

    (20) declL -> LISTA ID = lista .

    VAR             reduce using rule 20 (declL -> LISTA ID = lista .)
    FUNCION         reduce using rule 20 (declL -> LISTA ID = lista .)
    LISTA           reduce using rule 20 (declL -> LISTA ID = lista .)
    ID              reduce using rule 20 (declL -> LISTA ID = lista .)
    SI              reduce using rule 20 (declL -> LISTA ID = lista .)
    ENCUANTO        reduce using rule 20 (declL -> LISTA ID = lista .)
    PARA            reduce using rule 20 (declL -> LISTA ID = lista .)
    ESCRIBIR        reduce using rule 20 (declL -> LISTA ID = lista .)


state 102

    (21) lista -> [ . ]
    (22) lista -> [ . elementos ]
    (23) elementos -> . elemento
    (24) elementos -> . elementos , elemento
    (25) elemento -> . INT
    (26) elemento -> . FLOAT
    (27) elemento -> . BOOLEANO
    (28) elemento -> . STRING
    (29) elemento -> . ID
    (30) elemento -> . lista
    (21) lista -> . [ ]
    (22) lista -> . [ elementos ]

    ]               shift and go to state 131
    INT             shift and go to state 134
    FLOAT           shift and go to state 135
    BOOLEANO        shift and go to state 136
    STRING          shift and go to state 137
    ID              shift and go to state 138
    [               shift and go to state 102

    elementos                      shift and go to state 132
    elemento                       shift and go to state 133
    lista                          shift and go to state 139

state 103

    (65) fator -> ( exp . )
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo

    )               shift and go to state 108
    +               shift and go to state 70
    -               shift and go to state 71


state 104

    (72) conditions -> SI expL ENTONCES statements . endcondition
    (41) statements -> statements . stat
    (73) endcondition -> . .
    (74) endcondition -> . CASO CONTRARIO statements .
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (72) conditions -> . SI expL ENTONCES statements endcondition
    (90) ciclos -> . ENCUANTO expL HACER statements .
    (91) ciclos -> . PARA expL SIGUIENTE atrib .
    (92) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (93) write -> . ESCRIBIR ( exp ) ;
    (94) write -> . ESCRIBIR ( exp , FIM : exp ) ;

    .               shift and go to state 141
    CASO            shift and go to state 142
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    endcondition                   shift and go to state 140
    stat                           shift and go to state 27
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 105

    (76) expL -> expL OR termoB .
    (78) termoB -> termoB . AND fatorB

    ENTONCES        reduce using rule 76 (expL -> expL OR termoB .)
    OR              reduce using rule 76 (expL -> expL OR termoB .)
    HACER           reduce using rule 76 (expL -> expL OR termoB .)
    SIGUIENTE       reduce using rule 76 (expL -> expL OR termoB .)
    )               reduce using rule 76 (expL -> expL OR termoB .)
    AND             shift and go to state 66


state 106

    (78) termoB -> termoB AND fatorB .

    AND             reduce using rule 78 (termoB -> termoB AND fatorB .)
    ENTONCES        reduce using rule 78 (termoB -> termoB AND fatorB .)
    OR              reduce using rule 78 (termoB -> termoB AND fatorB .)
    HACER           reduce using rule 78 (termoB -> termoB AND fatorB .)
    SIGUIENTE       reduce using rule 78 (termoB -> termoB AND fatorB .)
    )               reduce using rule 78 (termoB -> termoB AND fatorB .)


state 107

    (82) fatorB -> ( expL ) .

    AND             reduce using rule 82 (fatorB -> ( expL ) .)
    ENTONCES        reduce using rule 82 (fatorB -> ( expL ) .)
    OR              reduce using rule 82 (fatorB -> ( expL ) .)
    HACER           reduce using rule 82 (fatorB -> ( expL ) .)
    SIGUIENTE       reduce using rule 82 (fatorB -> ( expL ) .)
    )               reduce using rule 82 (fatorB -> ( expL ) .)


state 108

    (65) fator -> ( exp ) .

    *               reduce using rule 65 (fator -> ( exp ) .)
    /               reduce using rule 65 (fator -> ( exp ) .)
    RESTO           reduce using rule 65 (fator -> ( exp ) .)
    ^               reduce using rule 65 (fator -> ( exp ) .)
    +               reduce using rule 65 (fator -> ( exp ) .)
    -               reduce using rule 65 (fator -> ( exp ) .)
    >               reduce using rule 65 (fator -> ( exp ) .)
    <               reduce using rule 65 (fator -> ( exp ) .)
    IGUAL           reduce using rule 65 (fator -> ( exp ) .)
    DIFERENTE       reduce using rule 65 (fator -> ( exp ) .)
    ;               reduce using rule 65 (fator -> ( exp ) .)
    .               reduce using rule 65 (fator -> ( exp ) .)
    HACER           reduce using rule 65 (fator -> ( exp ) .)
    )               reduce using rule 65 (fator -> ( exp ) .)
    ,               reduce using rule 65 (fator -> ( exp ) .)
    :               reduce using rule 65 (fator -> ( exp ) .)
    AND             reduce using rule 65 (fator -> ( exp ) .)
    ENTONCES        reduce using rule 65 (fator -> ( exp ) .)
    OR              reduce using rule 65 (fator -> ( exp ) .)
    SIGUIENTE       reduce using rule 65 (fator -> ( exp ) .)


state 109

    (83) condition -> exp op exp .
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo

    AND             reduce using rule 83 (condition -> exp op exp .)
    ENTONCES        reduce using rule 83 (condition -> exp op exp .)
    OR              reduce using rule 83 (condition -> exp op exp .)
    HACER           reduce using rule 83 (condition -> exp op exp .)
    SIGUIENTE       reduce using rule 83 (condition -> exp op exp .)
    )               reduce using rule 83 (condition -> exp op exp .)
    +               shift and go to state 70
    -               shift and go to state 71


state 110

    (50) exp -> exp + termo .
    (53) termo -> termo . * fator
    (54) termo -> termo . / fator
    (55) termo -> termo . RESTO fator
    (56) termo -> termo . ^ fator

    +               reduce using rule 50 (exp -> exp + termo .)
    -               reduce using rule 50 (exp -> exp + termo .)
    >               reduce using rule 50 (exp -> exp + termo .)
    <               reduce using rule 50 (exp -> exp + termo .)
    IGUAL           reduce using rule 50 (exp -> exp + termo .)
    DIFERENTE       reduce using rule 50 (exp -> exp + termo .)
    ;               reduce using rule 50 (exp -> exp + termo .)
    .               reduce using rule 50 (exp -> exp + termo .)
    HACER           reduce using rule 50 (exp -> exp + termo .)
    )               reduce using rule 50 (exp -> exp + termo .)
    ,               reduce using rule 50 (exp -> exp + termo .)
    :               reduce using rule 50 (exp -> exp + termo .)
    AND             reduce using rule 50 (exp -> exp + termo .)
    ENTONCES        reduce using rule 50 (exp -> exp + termo .)
    OR              reduce using rule 50 (exp -> exp + termo .)
    SIGUIENTE       reduce using rule 50 (exp -> exp + termo .)
    *               shift and go to state 76
    /               shift and go to state 77
    RESTO           shift and go to state 78
    ^               shift and go to state 79


state 111

    (51) exp -> exp - termo .
    (53) termo -> termo . * fator
    (54) termo -> termo . / fator
    (55) termo -> termo . RESTO fator
    (56) termo -> termo . ^ fator

    +               reduce using rule 51 (exp -> exp - termo .)
    -               reduce using rule 51 (exp -> exp - termo .)
    >               reduce using rule 51 (exp -> exp - termo .)
    <               reduce using rule 51 (exp -> exp - termo .)
    IGUAL           reduce using rule 51 (exp -> exp - termo .)
    DIFERENTE       reduce using rule 51 (exp -> exp - termo .)
    ;               reduce using rule 51 (exp -> exp - termo .)
    .               reduce using rule 51 (exp -> exp - termo .)
    HACER           reduce using rule 51 (exp -> exp - termo .)
    )               reduce using rule 51 (exp -> exp - termo .)
    ,               reduce using rule 51 (exp -> exp - termo .)
    :               reduce using rule 51 (exp -> exp - termo .)
    AND             reduce using rule 51 (exp -> exp - termo .)
    ENTONCES        reduce using rule 51 (exp -> exp - termo .)
    OR              reduce using rule 51 (exp -> exp - termo .)
    SIGUIENTE       reduce using rule 51 (exp -> exp - termo .)
    *               shift and go to state 76
    /               shift and go to state 77
    RESTO           shift and go to state 78
    ^               shift and go to state 79


state 112

    (88) op -> > IGUAL .

    INT             reduce using rule 88 (op -> > IGUAL .)
    VERDADERO       reduce using rule 88 (op -> > IGUAL .)
    FALSO           reduce using rule 88 (op -> > IGUAL .)
    FLOAT           reduce using rule 88 (op -> > IGUAL .)
    STRING          reduce using rule 88 (op -> > IGUAL .)
    ID              reduce using rule 88 (op -> > IGUAL .)
    (               reduce using rule 88 (op -> > IGUAL .)
    LEER            reduce using rule 88 (op -> > IGUAL .)
    REAL            reduce using rule 88 (op -> > IGUAL .)
    ENTERO          reduce using rule 88 (op -> > IGUAL .)
    STR             reduce using rule 88 (op -> > IGUAL .)


state 113

    (89) op -> < IGUAL .

    INT             reduce using rule 89 (op -> < IGUAL .)
    VERDADERO       reduce using rule 89 (op -> < IGUAL .)
    FALSO           reduce using rule 89 (op -> < IGUAL .)
    FLOAT           reduce using rule 89 (op -> < IGUAL .)
    STRING          reduce using rule 89 (op -> < IGUAL .)
    ID              reduce using rule 89 (op -> < IGUAL .)
    (               reduce using rule 89 (op -> < IGUAL .)
    LEER            reduce using rule 89 (op -> < IGUAL .)
    REAL            reduce using rule 89 (op -> < IGUAL .)
    ENTERO          reduce using rule 89 (op -> < IGUAL .)
    STR             reduce using rule 89 (op -> < IGUAL .)


state 114

    (53) termo -> termo * fator .

    *               reduce using rule 53 (termo -> termo * fator .)
    /               reduce using rule 53 (termo -> termo * fator .)
    RESTO           reduce using rule 53 (termo -> termo * fator .)
    ^               reduce using rule 53 (termo -> termo * fator .)
    +               reduce using rule 53 (termo -> termo * fator .)
    -               reduce using rule 53 (termo -> termo * fator .)
    >               reduce using rule 53 (termo -> termo * fator .)
    <               reduce using rule 53 (termo -> termo * fator .)
    IGUAL           reduce using rule 53 (termo -> termo * fator .)
    DIFERENTE       reduce using rule 53 (termo -> termo * fator .)
    ;               reduce using rule 53 (termo -> termo * fator .)
    .               reduce using rule 53 (termo -> termo * fator .)
    HACER           reduce using rule 53 (termo -> termo * fator .)
    )               reduce using rule 53 (termo -> termo * fator .)
    ,               reduce using rule 53 (termo -> termo * fator .)
    :               reduce using rule 53 (termo -> termo * fator .)
    AND             reduce using rule 53 (termo -> termo * fator .)
    ENTONCES        reduce using rule 53 (termo -> termo * fator .)
    OR              reduce using rule 53 (termo -> termo * fator .)
    SIGUIENTE       reduce using rule 53 (termo -> termo * fator .)


state 115

    (54) termo -> termo / fator .

    *               reduce using rule 54 (termo -> termo / fator .)
    /               reduce using rule 54 (termo -> termo / fator .)
    RESTO           reduce using rule 54 (termo -> termo / fator .)
    ^               reduce using rule 54 (termo -> termo / fator .)
    +               reduce using rule 54 (termo -> termo / fator .)
    -               reduce using rule 54 (termo -> termo / fator .)
    >               reduce using rule 54 (termo -> termo / fator .)
    <               reduce using rule 54 (termo -> termo / fator .)
    IGUAL           reduce using rule 54 (termo -> termo / fator .)
    DIFERENTE       reduce using rule 54 (termo -> termo / fator .)
    ;               reduce using rule 54 (termo -> termo / fator .)
    .               reduce using rule 54 (termo -> termo / fator .)
    HACER           reduce using rule 54 (termo -> termo / fator .)
    )               reduce using rule 54 (termo -> termo / fator .)
    ,               reduce using rule 54 (termo -> termo / fator .)
    :               reduce using rule 54 (termo -> termo / fator .)
    AND             reduce using rule 54 (termo -> termo / fator .)
    ENTONCES        reduce using rule 54 (termo -> termo / fator .)
    OR              reduce using rule 54 (termo -> termo / fator .)
    SIGUIENTE       reduce using rule 54 (termo -> termo / fator .)


state 116

    (55) termo -> termo RESTO fator .

    *               reduce using rule 55 (termo -> termo RESTO fator .)
    /               reduce using rule 55 (termo -> termo RESTO fator .)
    RESTO           reduce using rule 55 (termo -> termo RESTO fator .)
    ^               reduce using rule 55 (termo -> termo RESTO fator .)
    +               reduce using rule 55 (termo -> termo RESTO fator .)
    -               reduce using rule 55 (termo -> termo RESTO fator .)
    >               reduce using rule 55 (termo -> termo RESTO fator .)
    <               reduce using rule 55 (termo -> termo RESTO fator .)
    IGUAL           reduce using rule 55 (termo -> termo RESTO fator .)
    DIFERENTE       reduce using rule 55 (termo -> termo RESTO fator .)
    ;               reduce using rule 55 (termo -> termo RESTO fator .)
    .               reduce using rule 55 (termo -> termo RESTO fator .)
    HACER           reduce using rule 55 (termo -> termo RESTO fator .)
    )               reduce using rule 55 (termo -> termo RESTO fator .)
    ,               reduce using rule 55 (termo -> termo RESTO fator .)
    :               reduce using rule 55 (termo -> termo RESTO fator .)
    AND             reduce using rule 55 (termo -> termo RESTO fator .)
    ENTONCES        reduce using rule 55 (termo -> termo RESTO fator .)
    OR              reduce using rule 55 (termo -> termo RESTO fator .)
    SIGUIENTE       reduce using rule 55 (termo -> termo RESTO fator .)


state 117

    (56) termo -> termo ^ fator .

    *               reduce using rule 56 (termo -> termo ^ fator .)
    /               reduce using rule 56 (termo -> termo ^ fator .)
    RESTO           reduce using rule 56 (termo -> termo ^ fator .)
    ^               reduce using rule 56 (termo -> termo ^ fator .)
    +               reduce using rule 56 (termo -> termo ^ fator .)
    -               reduce using rule 56 (termo -> termo ^ fator .)
    >               reduce using rule 56 (termo -> termo ^ fator .)
    <               reduce using rule 56 (termo -> termo ^ fator .)
    IGUAL           reduce using rule 56 (termo -> termo ^ fator .)
    DIFERENTE       reduce using rule 56 (termo -> termo ^ fator .)
    ;               reduce using rule 56 (termo -> termo ^ fator .)
    .               reduce using rule 56 (termo -> termo ^ fator .)
    HACER           reduce using rule 56 (termo -> termo ^ fator .)
    )               reduce using rule 56 (termo -> termo ^ fator .)
    ,               reduce using rule 56 (termo -> termo ^ fator .)
    :               reduce using rule 56 (termo -> termo ^ fator .)
    AND             reduce using rule 56 (termo -> termo ^ fator .)
    ENTONCES        reduce using rule 56 (termo -> termo ^ fator .)
    OR              reduce using rule 56 (termo -> termo ^ fator .)
    SIGUIENTE       reduce using rule 56 (termo -> termo ^ fator .)


state 118

    (64) fator -> ID ( content_params . )

    )               shift and go to state 143


state 119

    (69) content_params -> list_params .
    (71) list_params -> list_params . , exp

    )               reduce using rule 69 (content_params -> list_params .)
    ,               shift and go to state 144


state 120

    (70) list_params -> exp .
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo

    ,               reduce using rule 70 (list_params -> exp .)
    )               reduce using rule 70 (list_params -> exp .)
    +               shift and go to state 70
    -               shift and go to state 71


state 121

    (96) cast -> tipocast ( exp . )
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo

    )               shift and go to state 145
    +               shift and go to state 70
    -               shift and go to state 71


state 122

    (97) cast -> tipocast ( STRING . )
    (62) fator -> STRING .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 146
    *               reduce using rule 62 (fator -> STRING .)
    /               reduce using rule 62 (fator -> STRING .)
    RESTO           reduce using rule 62 (fator -> STRING .)
    ^               reduce using rule 62 (fator -> STRING .)
    +               reduce using rule 62 (fator -> STRING .)
    -               reduce using rule 62 (fator -> STRING .)

  ! )               [ reduce using rule 62 (fator -> STRING .) ]


state 123

    (95) read -> LEER ( STRING . )

    )               shift and go to state 147


state 124

    (90) ciclos -> ENCUANTO expL HACER statements . .
    (41) statements -> statements . stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (72) conditions -> . SI expL ENTONCES statements endcondition
    (90) ciclos -> . ENCUANTO expL HACER statements .
    (91) ciclos -> . PARA expL SIGUIENTE atrib .
    (92) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (93) write -> . ESCRIBIR ( exp ) ;
    (94) write -> . ESCRIBIR ( exp , FIM : exp ) ;

    .               shift and go to state 148
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    stat                           shift and go to state 27
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 125

    (91) ciclos -> PARA expL SIGUIENTE atrib . .
    (92) ciclos -> PARA expL SIGUIENTE atrib . HACER statements .

    .               shift and go to state 149
    HACER           shift and go to state 150


state 126

    (93) write -> ESCRIBIR ( exp ) . ;

    ;               shift and go to state 151


state 127

    (94) write -> ESCRIBIR ( exp , . FIM : exp ) ;

    FIM             shift and go to state 152


state 128

    (33) parametros -> ID : . tipo
    (12) tipo -> . ENTERO
    (13) tipo -> . REAL
    (14) tipo -> . BOOLEANO
    (15) tipo -> . STR

    ENTERO          shift and go to state 89
    REAL            shift and go to state 90
    BOOLEANO        shift and go to state 91
    STR             shift and go to state 92

    tipo                           shift and go to state 153

state 129

    (31) declF -> FUNCION ID ( parametros ) . : tipo declarations statements DEVUELVE return .

    :               shift and go to state 154


state 130

    (34) parametros -> parametros , . ID : tipo

    ID              shift and go to state 155


state 131

    (21) lista -> [ ] .

    VAR             reduce using rule 21 (lista -> [ ] .)
    FUNCION         reduce using rule 21 (lista -> [ ] .)
    LISTA           reduce using rule 21 (lista -> [ ] .)
    ID              reduce using rule 21 (lista -> [ ] .)
    SI              reduce using rule 21 (lista -> [ ] .)
    ENCUANTO        reduce using rule 21 (lista -> [ ] .)
    PARA            reduce using rule 21 (lista -> [ ] .)
    ESCRIBIR        reduce using rule 21 (lista -> [ ] .)
    ]               reduce using rule 21 (lista -> [ ] .)
    ,               reduce using rule 21 (lista -> [ ] .)


state 132

    (22) lista -> [ elementos . ]
    (24) elementos -> elementos . , elemento

    ]               shift and go to state 156
    ,               shift and go to state 157


state 133

    (23) elementos -> elemento .

    ]               reduce using rule 23 (elementos -> elemento .)
    ,               reduce using rule 23 (elementos -> elemento .)


state 134

    (25) elemento -> INT .

    ]               reduce using rule 25 (elemento -> INT .)
    ,               reduce using rule 25 (elemento -> INT .)


state 135

    (26) elemento -> FLOAT .

    ]               reduce using rule 26 (elemento -> FLOAT .)
    ,               reduce using rule 26 (elemento -> FLOAT .)


state 136

    (27) elemento -> BOOLEANO .

    ]               reduce using rule 27 (elemento -> BOOLEANO .)
    ,               reduce using rule 27 (elemento -> BOOLEANO .)


state 137

    (28) elemento -> STRING .

    ]               reduce using rule 28 (elemento -> STRING .)
    ,               reduce using rule 28 (elemento -> STRING .)


state 138

    (29) elemento -> ID .

    ]               reduce using rule 29 (elemento -> ID .)
    ,               reduce using rule 29 (elemento -> ID .)


state 139

    (30) elemento -> lista .

    ]               reduce using rule 30 (elemento -> lista .)
    ,               reduce using rule 30 (elemento -> lista .)


state 140

    (72) conditions -> SI expL ENTONCES statements endcondition .

    ID              reduce using rule 72 (conditions -> SI expL ENTONCES statements endcondition .)
    SI              reduce using rule 72 (conditions -> SI expL ENTONCES statements endcondition .)
    ENCUANTO        reduce using rule 72 (conditions -> SI expL ENTONCES statements endcondition .)
    PARA            reduce using rule 72 (conditions -> SI expL ENTONCES statements endcondition .)
    ESCRIBIR        reduce using rule 72 (conditions -> SI expL ENTONCES statements endcondition .)
    $end            reduce using rule 72 (conditions -> SI expL ENTONCES statements endcondition .)
    .               reduce using rule 72 (conditions -> SI expL ENTONCES statements endcondition .)
    CASO            reduce using rule 72 (conditions -> SI expL ENTONCES statements endcondition .)
    DEVUELVE        reduce using rule 72 (conditions -> SI expL ENTONCES statements endcondition .)


state 141

    (73) endcondition -> . .

    ID              reduce using rule 73 (endcondition -> . .)
    SI              reduce using rule 73 (endcondition -> . .)
    ENCUANTO        reduce using rule 73 (endcondition -> . .)
    PARA            reduce using rule 73 (endcondition -> . .)
    ESCRIBIR        reduce using rule 73 (endcondition -> . .)
    $end            reduce using rule 73 (endcondition -> . .)
    .               reduce using rule 73 (endcondition -> . .)
    CASO            reduce using rule 73 (endcondition -> . .)
    DEVUELVE        reduce using rule 73 (endcondition -> . .)


state 142

    (74) endcondition -> CASO . CONTRARIO statements .

    CONTRARIO       shift and go to state 158


state 143

    (64) fator -> ID ( content_params ) .

    *               reduce using rule 64 (fator -> ID ( content_params ) .)
    /               reduce using rule 64 (fator -> ID ( content_params ) .)
    RESTO           reduce using rule 64 (fator -> ID ( content_params ) .)
    ^               reduce using rule 64 (fator -> ID ( content_params ) .)
    +               reduce using rule 64 (fator -> ID ( content_params ) .)
    -               reduce using rule 64 (fator -> ID ( content_params ) .)
    >               reduce using rule 64 (fator -> ID ( content_params ) .)
    <               reduce using rule 64 (fator -> ID ( content_params ) .)
    IGUAL           reduce using rule 64 (fator -> ID ( content_params ) .)
    DIFERENTE       reduce using rule 64 (fator -> ID ( content_params ) .)
    ;               reduce using rule 64 (fator -> ID ( content_params ) .)
    .               reduce using rule 64 (fator -> ID ( content_params ) .)
    HACER           reduce using rule 64 (fator -> ID ( content_params ) .)
    )               reduce using rule 64 (fator -> ID ( content_params ) .)
    ,               reduce using rule 64 (fator -> ID ( content_params ) .)
    :               reduce using rule 64 (fator -> ID ( content_params ) .)
    AND             reduce using rule 64 (fator -> ID ( content_params ) .)
    ENTONCES        reduce using rule 64 (fator -> ID ( content_params ) .)
    OR              reduce using rule 64 (fator -> ID ( content_params ) .)
    SIGUIENTE       reduce using rule 64 (fator -> ID ( content_params ) .)


state 144

    (71) list_params -> list_params , . exp
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo RESTO fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . VERDADERO
    (60) fator -> . FALSO
    (61) fator -> . FLOAT
    (62) fator -> . STRING
    (63) fator -> . ID
    (64) fator -> . ID ( content_params )
    (65) fator -> . ( exp )
    (66) fator -> . cast
    (67) fator -> . read
    (96) cast -> . tipocast ( exp )
    (97) cast -> . tipocast ( STRING )
    (95) read -> . LEER ( STRING )
    (98) tipocast -> . REAL
    (99) tipocast -> . ENTERO
    (100) tipocast -> . STR

    INT             shift and go to state 40
    VERDADERO       shift and go to state 86
    FALSO           shift and go to state 87
    FLOAT           shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 43
    (               shift and go to state 63
    LEER            shift and go to state 47
    REAL            shift and go to state 48
    ENTERO          shift and go to state 49
    STR             shift and go to state 50

    exp                            shift and go to state 159
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 44
    read                           shift and go to state 45
    tipocast                       shift and go to state 46

state 145

    (96) cast -> tipocast ( exp ) .

    *               reduce using rule 96 (cast -> tipocast ( exp ) .)
    /               reduce using rule 96 (cast -> tipocast ( exp ) .)
    RESTO           reduce using rule 96 (cast -> tipocast ( exp ) .)
    ^               reduce using rule 96 (cast -> tipocast ( exp ) .)
    +               reduce using rule 96 (cast -> tipocast ( exp ) .)
    -               reduce using rule 96 (cast -> tipocast ( exp ) .)
    >               reduce using rule 96 (cast -> tipocast ( exp ) .)
    <               reduce using rule 96 (cast -> tipocast ( exp ) .)
    IGUAL           reduce using rule 96 (cast -> tipocast ( exp ) .)
    DIFERENTE       reduce using rule 96 (cast -> tipocast ( exp ) .)
    ;               reduce using rule 96 (cast -> tipocast ( exp ) .)
    .               reduce using rule 96 (cast -> tipocast ( exp ) .)
    HACER           reduce using rule 96 (cast -> tipocast ( exp ) .)
    )               reduce using rule 96 (cast -> tipocast ( exp ) .)
    ,               reduce using rule 96 (cast -> tipocast ( exp ) .)
    :               reduce using rule 96 (cast -> tipocast ( exp ) .)
    AND             reduce using rule 96 (cast -> tipocast ( exp ) .)
    ENTONCES        reduce using rule 96 (cast -> tipocast ( exp ) .)
    OR              reduce using rule 96 (cast -> tipocast ( exp ) .)
    SIGUIENTE       reduce using rule 96 (cast -> tipocast ( exp ) .)


state 146

    (97) cast -> tipocast ( STRING ) .

    *               reduce using rule 97 (cast -> tipocast ( STRING ) .)
    /               reduce using rule 97 (cast -> tipocast ( STRING ) .)
    RESTO           reduce using rule 97 (cast -> tipocast ( STRING ) .)
    ^               reduce using rule 97 (cast -> tipocast ( STRING ) .)
    +               reduce using rule 97 (cast -> tipocast ( STRING ) .)
    -               reduce using rule 97 (cast -> tipocast ( STRING ) .)
    >               reduce using rule 97 (cast -> tipocast ( STRING ) .)
    <               reduce using rule 97 (cast -> tipocast ( STRING ) .)
    IGUAL           reduce using rule 97 (cast -> tipocast ( STRING ) .)
    DIFERENTE       reduce using rule 97 (cast -> tipocast ( STRING ) .)
    ;               reduce using rule 97 (cast -> tipocast ( STRING ) .)
    .               reduce using rule 97 (cast -> tipocast ( STRING ) .)
    HACER           reduce using rule 97 (cast -> tipocast ( STRING ) .)
    )               reduce using rule 97 (cast -> tipocast ( STRING ) .)
    ,               reduce using rule 97 (cast -> tipocast ( STRING ) .)
    :               reduce using rule 97 (cast -> tipocast ( STRING ) .)
    AND             reduce using rule 97 (cast -> tipocast ( STRING ) .)
    ENTONCES        reduce using rule 97 (cast -> tipocast ( STRING ) .)
    OR              reduce using rule 97 (cast -> tipocast ( STRING ) .)
    SIGUIENTE       reduce using rule 97 (cast -> tipocast ( STRING ) .)


state 147

    (95) read -> LEER ( STRING ) .

    *               reduce using rule 95 (read -> LEER ( STRING ) .)
    /               reduce using rule 95 (read -> LEER ( STRING ) .)
    RESTO           reduce using rule 95 (read -> LEER ( STRING ) .)
    ^               reduce using rule 95 (read -> LEER ( STRING ) .)
    +               reduce using rule 95 (read -> LEER ( STRING ) .)
    -               reduce using rule 95 (read -> LEER ( STRING ) .)
    >               reduce using rule 95 (read -> LEER ( STRING ) .)
    <               reduce using rule 95 (read -> LEER ( STRING ) .)
    IGUAL           reduce using rule 95 (read -> LEER ( STRING ) .)
    DIFERENTE       reduce using rule 95 (read -> LEER ( STRING ) .)
    ;               reduce using rule 95 (read -> LEER ( STRING ) .)
    .               reduce using rule 95 (read -> LEER ( STRING ) .)
    HACER           reduce using rule 95 (read -> LEER ( STRING ) .)
    )               reduce using rule 95 (read -> LEER ( STRING ) .)
    ,               reduce using rule 95 (read -> LEER ( STRING ) .)
    :               reduce using rule 95 (read -> LEER ( STRING ) .)
    AND             reduce using rule 95 (read -> LEER ( STRING ) .)
    ENTONCES        reduce using rule 95 (read -> LEER ( STRING ) .)
    OR              reduce using rule 95 (read -> LEER ( STRING ) .)
    SIGUIENTE       reduce using rule 95 (read -> LEER ( STRING ) .)


state 148

    (90) ciclos -> ENCUANTO expL HACER statements . .

    ID              reduce using rule 90 (ciclos -> ENCUANTO expL HACER statements . .)
    SI              reduce using rule 90 (ciclos -> ENCUANTO expL HACER statements . .)
    ENCUANTO        reduce using rule 90 (ciclos -> ENCUANTO expL HACER statements . .)
    PARA            reduce using rule 90 (ciclos -> ENCUANTO expL HACER statements . .)
    ESCRIBIR        reduce using rule 90 (ciclos -> ENCUANTO expL HACER statements . .)
    $end            reduce using rule 90 (ciclos -> ENCUANTO expL HACER statements . .)
    .               reduce using rule 90 (ciclos -> ENCUANTO expL HACER statements . .)
    CASO            reduce using rule 90 (ciclos -> ENCUANTO expL HACER statements . .)
    DEVUELVE        reduce using rule 90 (ciclos -> ENCUANTO expL HACER statements . .)


state 149

    (91) ciclos -> PARA expL SIGUIENTE atrib . .

    ID              reduce using rule 91 (ciclos -> PARA expL SIGUIENTE atrib . .)
    SI              reduce using rule 91 (ciclos -> PARA expL SIGUIENTE atrib . .)
    ENCUANTO        reduce using rule 91 (ciclos -> PARA expL SIGUIENTE atrib . .)
    PARA            reduce using rule 91 (ciclos -> PARA expL SIGUIENTE atrib . .)
    ESCRIBIR        reduce using rule 91 (ciclos -> PARA expL SIGUIENTE atrib . .)
    $end            reduce using rule 91 (ciclos -> PARA expL SIGUIENTE atrib . .)
    .               reduce using rule 91 (ciclos -> PARA expL SIGUIENTE atrib . .)
    CASO            reduce using rule 91 (ciclos -> PARA expL SIGUIENTE atrib . .)
    DEVUELVE        reduce using rule 91 (ciclos -> PARA expL SIGUIENTE atrib . .)


state 150

    (92) ciclos -> PARA expL SIGUIENTE atrib HACER . statements .
    (40) statements -> . stat
    (41) statements -> . statements stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (72) conditions -> . SI expL ENTONCES statements endcondition
    (90) ciclos -> . ENCUANTO expL HACER statements .
    (91) ciclos -> . PARA expL SIGUIENTE atrib .
    (92) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (93) write -> . ESCRIBIR ( exp ) ;
    (94) write -> . ESCRIBIR ( exp , FIM : exp ) ;

    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    atrib                          shift and go to state 13
    statements                     shift and go to state 160
    stat                           shift and go to state 12
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 151

    (93) write -> ESCRIBIR ( exp ) ; .

    ID              reduce using rule 93 (write -> ESCRIBIR ( exp ) ; .)
    SI              reduce using rule 93 (write -> ESCRIBIR ( exp ) ; .)
    ENCUANTO        reduce using rule 93 (write -> ESCRIBIR ( exp ) ; .)
    PARA            reduce using rule 93 (write -> ESCRIBIR ( exp ) ; .)
    ESCRIBIR        reduce using rule 93 (write -> ESCRIBIR ( exp ) ; .)
    $end            reduce using rule 93 (write -> ESCRIBIR ( exp ) ; .)
    .               reduce using rule 93 (write -> ESCRIBIR ( exp ) ; .)
    CASO            reduce using rule 93 (write -> ESCRIBIR ( exp ) ; .)
    DEVUELVE        reduce using rule 93 (write -> ESCRIBIR ( exp ) ; .)


state 152

    (94) write -> ESCRIBIR ( exp , FIM . : exp ) ;

    :               shift and go to state 161


state 153

    (33) parametros -> ID : tipo .

    )               reduce using rule 33 (parametros -> ID : tipo .)
    ,               reduce using rule 33 (parametros -> ID : tipo .)


state 154

    (31) declF -> FUNCION ID ( parametros ) : . tipo declarations statements DEVUELVE return .
    (12) tipo -> . ENTERO
    (13) tipo -> . REAL
    (14) tipo -> . BOOLEANO
    (15) tipo -> . STR

    ENTERO          shift and go to state 89
    REAL            shift and go to state 90
    BOOLEANO        shift and go to state 91
    STR             shift and go to state 92

    tipo                           shift and go to state 162

state 155

    (34) parametros -> parametros , ID . : tipo

    :               shift and go to state 163


state 156

    (22) lista -> [ elementos ] .

    VAR             reduce using rule 22 (lista -> [ elementos ] .)
    FUNCION         reduce using rule 22 (lista -> [ elementos ] .)
    LISTA           reduce using rule 22 (lista -> [ elementos ] .)
    ID              reduce using rule 22 (lista -> [ elementos ] .)
    SI              reduce using rule 22 (lista -> [ elementos ] .)
    ENCUANTO        reduce using rule 22 (lista -> [ elementos ] .)
    PARA            reduce using rule 22 (lista -> [ elementos ] .)
    ESCRIBIR        reduce using rule 22 (lista -> [ elementos ] .)
    ]               reduce using rule 22 (lista -> [ elementos ] .)
    ,               reduce using rule 22 (lista -> [ elementos ] .)


state 157

    (24) elementos -> elementos , . elemento
    (25) elemento -> . INT
    (26) elemento -> . FLOAT
    (27) elemento -> . BOOLEANO
    (28) elemento -> . STRING
    (29) elemento -> . ID
    (30) elemento -> . lista
    (21) lista -> . [ ]
    (22) lista -> . [ elementos ]

    INT             shift and go to state 134
    FLOAT           shift and go to state 135
    BOOLEANO        shift and go to state 136
    STRING          shift and go to state 137
    ID              shift and go to state 138
    [               shift and go to state 102

    elemento                       shift and go to state 164
    lista                          shift and go to state 139

state 158

    (74) endcondition -> CASO CONTRARIO . statements .
    (40) statements -> . stat
    (41) statements -> . statements stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (72) conditions -> . SI expL ENTONCES statements endcondition
    (90) ciclos -> . ENCUANTO expL HACER statements .
    (91) ciclos -> . PARA expL SIGUIENTE atrib .
    (92) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (93) write -> . ESCRIBIR ( exp ) ;
    (94) write -> . ESCRIBIR ( exp , FIM : exp ) ;

    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    statements                     shift and go to state 165
    stat                           shift and go to state 12
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 159

    (71) list_params -> list_params , exp .
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo

    ,               reduce using rule 71 (list_params -> list_params , exp .)
    )               reduce using rule 71 (list_params -> list_params , exp .)
    +               shift and go to state 70
    -               shift and go to state 71


state 160

    (92) ciclos -> PARA expL SIGUIENTE atrib HACER statements . .
    (41) statements -> statements . stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (72) conditions -> . SI expL ENTONCES statements endcondition
    (90) ciclos -> . ENCUANTO expL HACER statements .
    (91) ciclos -> . PARA expL SIGUIENTE atrib .
    (92) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (93) write -> . ESCRIBIR ( exp ) ;
    (94) write -> . ESCRIBIR ( exp , FIM : exp ) ;

    .               shift and go to state 166
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    atrib                          shift and go to state 13
    stat                           shift and go to state 27
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 161

    (94) write -> ESCRIBIR ( exp , FIM : . exp ) ;
    (50) exp -> . exp + termo
    (51) exp -> . exp - termo
    (52) exp -> . termo
    (53) termo -> . termo * fator
    (54) termo -> . termo / fator
    (55) termo -> . termo RESTO fator
    (56) termo -> . termo ^ fator
    (57) termo -> . fator
    (58) fator -> . INT
    (59) fator -> . VERDADERO
    (60) fator -> . FALSO
    (61) fator -> . FLOAT
    (62) fator -> . STRING
    (63) fator -> . ID
    (64) fator -> . ID ( content_params )
    (65) fator -> . ( exp )
    (66) fator -> . cast
    (67) fator -> . read
    (96) cast -> . tipocast ( exp )
    (97) cast -> . tipocast ( STRING )
    (95) read -> . LEER ( STRING )
    (98) tipocast -> . REAL
    (99) tipocast -> . ENTERO
    (100) tipocast -> . STR

    INT             shift and go to state 40
    VERDADERO       shift and go to state 86
    FALSO           shift and go to state 87
    FLOAT           shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 43
    (               shift and go to state 63
    LEER            shift and go to state 47
    REAL            shift and go to state 48
    ENTERO          shift and go to state 49
    STR             shift and go to state 50

    exp                            shift and go to state 167
    termo                          shift and go to state 38
    fator                          shift and go to state 39
    cast                           shift and go to state 44
    read                           shift and go to state 45
    tipocast                       shift and go to state 46

state 162

    (31) declF -> FUNCION ID ( parametros ) : tipo . declarations statements DEVUELVE return .
    (2) declarations -> . decl
    (3) declarations -> . declarations decl
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (7) declV -> . VAR vari : tipo
    (31) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (20) declL -> . LISTA ID = lista

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9

    declarations                   shift and go to state 168
    decl                           shift and go to state 3
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6

state 163

    (34) parametros -> parametros , ID : . tipo
    (12) tipo -> . ENTERO
    (13) tipo -> . REAL
    (14) tipo -> . BOOLEANO
    (15) tipo -> . STR

    ENTERO          shift and go to state 89
    REAL            shift and go to state 90
    BOOLEANO        shift and go to state 91
    STR             shift and go to state 92

    tipo                           shift and go to state 169

state 164

    (24) elementos -> elementos , elemento .

    ]               reduce using rule 24 (elementos -> elementos , elemento .)
    ,               reduce using rule 24 (elementos -> elementos , elemento .)


state 165

    (74) endcondition -> CASO CONTRARIO statements . .
    (41) statements -> statements . stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (72) conditions -> . SI expL ENTONCES statements endcondition
    (90) ciclos -> . ENCUANTO expL HACER statements .
    (91) ciclos -> . PARA expL SIGUIENTE atrib .
    (92) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (93) write -> . ESCRIBIR ( exp ) ;
    (94) write -> . ESCRIBIR ( exp , FIM : exp ) ;

    .               shift and go to state 170
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    stat                           shift and go to state 27
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 166

    (92) ciclos -> PARA expL SIGUIENTE atrib HACER statements . .

    ID              reduce using rule 92 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    SI              reduce using rule 92 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    ENCUANTO        reduce using rule 92 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    PARA            reduce using rule 92 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    ESCRIBIR        reduce using rule 92 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    $end            reduce using rule 92 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    .               reduce using rule 92 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    CASO            reduce using rule 92 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    DEVUELVE        reduce using rule 92 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)


state 167

    (94) write -> ESCRIBIR ( exp , FIM : exp . ) ;
    (50) exp -> exp . + termo
    (51) exp -> exp . - termo

    )               shift and go to state 171
    +               shift and go to state 70
    -               shift and go to state 71


state 168

    (31) declF -> FUNCION ID ( parametros ) : tipo declarations . statements DEVUELVE return .
    (3) declarations -> declarations . decl
    (40) statements -> . stat
    (41) statements -> . statements stat
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (7) declV -> . VAR vari : tipo
    (31) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (20) declL -> . LISTA ID = lista
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (72) conditions -> . SI expL ENTONCES statements endcondition
    (90) ciclos -> . ENCUANTO expL HACER statements .
    (91) ciclos -> . PARA expL SIGUIENTE atrib .
    (92) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (93) write -> . ESCRIBIR ( exp ) ;
    (94) write -> . ESCRIBIR ( exp , FIM : exp ) ;

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    statements                     shift and go to state 172
    decl                           shift and go to state 11
    stat                           shift and go to state 12
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 169

    (34) parametros -> parametros , ID : tipo .

    )               reduce using rule 34 (parametros -> parametros , ID : tipo .)
    ,               reduce using rule 34 (parametros -> parametros , ID : tipo .)


state 170

    (74) endcondition -> CASO CONTRARIO statements . .

    ID              reduce using rule 74 (endcondition -> CASO CONTRARIO statements . .)
    SI              reduce using rule 74 (endcondition -> CASO CONTRARIO statements . .)
    ENCUANTO        reduce using rule 74 (endcondition -> CASO CONTRARIO statements . .)
    PARA            reduce using rule 74 (endcondition -> CASO CONTRARIO statements . .)
    ESCRIBIR        reduce using rule 74 (endcondition -> CASO CONTRARIO statements . .)
    $end            reduce using rule 74 (endcondition -> CASO CONTRARIO statements . .)
    .               reduce using rule 74 (endcondition -> CASO CONTRARIO statements . .)
    CASO            reduce using rule 74 (endcondition -> CASO CONTRARIO statements . .)
    DEVUELVE        reduce using rule 74 (endcondition -> CASO CONTRARIO statements . .)


state 171

    (94) write -> ESCRIBIR ( exp , FIM : exp ) . ;

    ;               shift and go to state 173


state 172

    (31) declF -> FUNCION ID ( parametros ) : tipo declarations statements . DEVUELVE return .
    (41) statements -> statements . stat
    (42) stat -> . atrib ;
    (43) stat -> . conditions
    (44) stat -> . ciclos
    (45) stat -> . write
    (46) atrib -> . ID = STRING
    (47) atrib -> . ID = VERDADERO
    (48) atrib -> . ID = FALSO
    (49) atrib -> . ID = exp
    (72) conditions -> . SI expL ENTONCES statements endcondition
    (90) ciclos -> . ENCUANTO expL HACER statements .
    (91) ciclos -> . PARA expL SIGUIENTE atrib .
    (92) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (93) write -> . ESCRIBIR ( exp ) ;
    (94) write -> . ESCRIBIR ( exp , FIM : exp ) ;

    DEVUELVE        shift and go to state 174
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    stat                           shift and go to state 27
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    write                          shift and go to state 16

state 173

    (94) write -> ESCRIBIR ( exp , FIM : exp ) ; .

    ID              reduce using rule 94 (write -> ESCRIBIR ( exp , FIM : exp ) ; .)
    SI              reduce using rule 94 (write -> ESCRIBIR ( exp , FIM : exp ) ; .)
    ENCUANTO        reduce using rule 94 (write -> ESCRIBIR ( exp , FIM : exp ) ; .)
    PARA            reduce using rule 94 (write -> ESCRIBIR ( exp , FIM : exp ) ; .)
    ESCRIBIR        reduce using rule 94 (write -> ESCRIBIR ( exp , FIM : exp ) ; .)
    $end            reduce using rule 94 (write -> ESCRIBIR ( exp , FIM : exp ) ; .)
    .               reduce using rule 94 (write -> ESCRIBIR ( exp , FIM : exp ) ; .)
    CASO            reduce using rule 94 (write -> ESCRIBIR ( exp , FIM : exp ) ; .)
    DEVUELVE        reduce using rule 94 (write -> ESCRIBIR ( exp , FIM : exp ) ; .)


state 174

    (31) declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE . return .
    (35) return -> . INT
    (36) return -> . ID
    (37) return -> . FLOAT
    (38) return -> . VERDADERO
    (39) return -> . FALSO

    INT             shift and go to state 177
    ID              shift and go to state 175
    FLOAT           shift and go to state 178
    VERDADERO       shift and go to state 179
    FALSO           shift and go to state 180

    return                         shift and go to state 176

state 175

    (36) return -> ID .

    .               reduce using rule 36 (return -> ID .)


state 176

    (31) declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .

    .               shift and go to state 181


state 177

    (35) return -> INT .

    .               reduce using rule 35 (return -> INT .)


state 178

    (37) return -> FLOAT .

    .               reduce using rule 37 (return -> FLOAT .)


state 179

    (38) return -> VERDADERO .

    .               reduce using rule 38 (return -> VERDADERO .)


state 180

    (39) return -> FALSO .

    .               reduce using rule 39 (return -> FALSO .)


state 181

    (31) declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .

    VAR             reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    FUNCION         reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    LISTA           reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    ID              reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    SI              reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    ENCUANTO        reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    PARA            reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    ESCRIBIR        reduce using rule 31 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ) in state 122 resolved as shift
WARNING: reduce/reduce conflict in state 34 resolved using rule (fator -> VERDADERO)
WARNING: rejected rule (fatorB -> VERDADERO) in state 34
WARNING: reduce/reduce conflict in state 35 resolved using rule (fator -> FALSO)
WARNING: rejected rule (fatorB -> FALSO) in state 35
WARNING: reduce/reduce conflict in state 59 resolved using rule (atrib -> ID = STRING)
WARNING: rejected rule (fator -> STRING) in state 59
WARNING: reduce/reduce conflict in state 60 resolved using rule (atrib -> ID = VERDADERO)
WARNING: rejected rule (fator -> VERDADERO) in state 60
WARNING: reduce/reduce conflict in state 61 resolved using rule (atrib -> ID = FALSO)
WARNING: rejected rule (fator -> FALSO) in state 61
WARNING: reduce/reduce conflict in state 95 resolved using rule (atribD -> ID = STRING)
WARNING: rejected rule (fator -> STRING) in state 95
WARNING: reduce/reduce conflict in state 96 resolved using rule (atribD -> ID = VERDADERO)
WARNING: rejected rule (fator -> VERDADERO) in state 96
WARNING: reduce/reduce conflict in state 97 resolved using rule (atribD -> ID = FALSO)
WARNING: rejected rule (fator -> FALSO) in state 97
