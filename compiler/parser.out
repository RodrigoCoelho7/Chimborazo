Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ENTER
    NADA
    RESTO

Grammar

Rule 0     S' -> prg
Rule 1     prg -> declarations statements
Rule 2     declarations -> decl
Rule 3     declarations -> declarations decl
Rule 4     decl -> declV
Rule 5     decl -> declF
Rule 6     decl -> declL
Rule 7     declV -> VAR vari : tipo
Rule 8     vari -> atrib
Rule 9     vari -> ID
Rule 10    vari -> vari , atrib
Rule 11    vari -> vari , ID
Rule 12    tipo -> ENTERO
Rule 13    tipo -> REAL
Rule 14    tipo -> BOOLEANO
Rule 15    tipo -> STR
Rule 16    declL -> LISTA ID = lista
Rule 17    lista -> [ ]
Rule 18    lista -> [ elementos ]
Rule 19    elementos -> elemento
Rule 20    elementos -> elementos , elemento
Rule 21    elemento -> INT
Rule 22    elemento -> FLOAT
Rule 23    elemento -> BOOLEANO
Rule 24    elemento -> STRING
Rule 25    elemento -> ID
Rule 26    elemento -> lista
Rule 27    declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
Rule 28    parametros -> <empty>
Rule 29    parametros -> ID : tipo
Rule 30    parametros -> parametros , ID : tipo
Rule 31    return -> INT
Rule 32    return -> ID
Rule 33    return -> FLOAT
Rule 34    return -> VERDADERO
Rule 35    return -> FALSO
Rule 36    statements -> stat
Rule 37    statements -> statements stat
Rule 38    stat -> atrib ;
Rule 39    stat -> conditions
Rule 40    stat -> ciclos
Rule 41    stat -> readwrite
Rule 42    atrib -> ID = STRING
Rule 43    atrib -> ID = VERDADERO
Rule 44    atrib -> ID = FALSO
Rule 45    atrib -> ID = exp
Rule 46    exp -> exp + termo
Rule 47    exp -> exp - termo
Rule 48    exp -> termo
Rule 49    termo -> termo * fator
Rule 50    termo -> termo / fator
Rule 51    termo -> termo ^ fator
Rule 52    termo -> fator
Rule 53    fator -> INT
Rule 54    fator -> FLOAT
Rule 55    fator -> ID
Rule 56    fator -> ( exp )
Rule 57    conditions -> SI expL ENTONCES statements endcondition
Rule 58    endcondition -> .
Rule 59    endcondition -> CASO CONTRARIO statements .
Rule 60    expL -> termoB
Rule 61    expL -> expL OR termoB
Rule 62    termoB -> fatorB
Rule 63    termoB -> termoB AND fatorB
Rule 64    fatorB -> condition
Rule 65    fatorB -> BOOLEANO
Rule 66    fatorB -> ( expL )
Rule 67    condition -> exp op exp
Rule 68    op -> >
Rule 69    op -> <
Rule 70    op -> IGUAL
Rule 71    op -> DIFERENTE
Rule 72    op -> > IGUAL
Rule 73    op -> < IGUAL
Rule 74    ciclos -> ENCUANTO expL HACER statements .
Rule 75    ciclos -> PARA expL SIGUIENTE atrib .
Rule 76    ciclos -> PARA expL SIGUIENTE atrib HACER statements .
Rule 77    readwrite -> ESCRIBIR ( ID )
Rule 78    readwrite -> ID = LEER ( STRING )

Terminals, with rules where they appear

(                    : 27 56 66 77 78
)                    : 27 56 66 77 78
*                    : 49
+                    : 46
,                    : 10 11 20 30
-                    : 47
.                    : 27 58 59 74 75 76
/                    : 50
:                    : 7 27 29 30
;                    : 38
<                    : 69 73
=                    : 16 42 43 44 45 78
>                    : 68 72
AND                  : 63
BOOLEANO             : 14 23 65
CASO                 : 59
CONTRARIO            : 59
DEVUELVE             : 27
DIFERENTE            : 71
ENCUANTO             : 74
ENTER                : 
ENTERO               : 12
ENTONCES             : 57
ESCRIBIR             : 77
FALSO                : 35 44
FLOAT                : 22 33 54
FUNCION              : 27
HACER                : 74 76
ID                   : 9 11 16 25 27 29 30 32 42 43 44 45 55 77 78
IGUAL                : 70 72 73
INT                  : 21 31 53
LEER                 : 78
LISTA                : 16
NADA                 : 
OR                   : 61
PARA                 : 75 76
REAL                 : 13
RESTO                : 
SI                   : 57
SIGUIENTE            : 75 76
STR                  : 15
STRING               : 24 42 78
VAR                  : 7
VERDADERO            : 34 43
[                    : 17 18
]                    : 17 18
^                    : 51
error                : 

Nonterminals, with rules where they appear

atrib                : 8 10 38 75 76
ciclos               : 40
condition            : 64
conditions           : 39
decl                 : 2 3
declF                : 5
declL                : 6
declV                : 4
declarations         : 1 3 27
elemento             : 19 20
elementos            : 18 20
endcondition         : 57
exp                  : 45 46 47 56 67 67
expL                 : 57 61 66 74 75 76
fator                : 49 50 51 52
fatorB               : 62 63
lista                : 16 26
op                   : 67
parametros           : 27 30
prg                  : 0
readwrite            : 41
return               : 27
stat                 : 36 37
statements           : 1 27 37 57 59 74 76
termo                : 46 47 48 49 50 51
termoB               : 60 61 63
tipo                 : 7 27 29 30
vari                 : 7 10 11

Parsing method: LALR

state 0

    (0) S' -> . prg
    (1) prg -> . declarations statements
    (2) declarations -> . decl
    (3) declarations -> . declarations decl
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (7) declV -> . VAR vari : tipo
    (27) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (16) declL -> . LISTA ID = lista

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9

    prg                            shift and go to state 1
    declarations                   shift and go to state 2
    decl                           shift and go to state 3
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6

state 1

    (0) S' -> prg .



state 2

    (1) prg -> declarations . statements
    (3) declarations -> declarations . decl
    (36) statements -> . stat
    (37) statements -> . statements stat
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (41) stat -> . readwrite
    (7) declV -> . VAR vari : tipo
    (27) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (16) declL -> . LISTA ID = lista
    (42) atrib -> . ID = STRING
    (43) atrib -> . ID = VERDADERO
    (44) atrib -> . ID = FALSO
    (45) atrib -> . ID = exp
    (57) conditions -> . SI expL ENTONCES statements endcondition
    (74) ciclos -> . ENCUANTO expL HACER statements .
    (75) ciclos -> . PARA expL SIGUIENTE atrib .
    (76) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (77) readwrite -> . ESCRIBIR ( ID )
    (78) readwrite -> . ID = LEER ( STRING )

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    statements                     shift and go to state 10
    decl                           shift and go to state 11
    stat                           shift and go to state 12
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 3

    (2) declarations -> decl .

    VAR             reduce using rule 2 (declarations -> decl .)
    FUNCION         reduce using rule 2 (declarations -> decl .)
    LISTA           reduce using rule 2 (declarations -> decl .)
    ID              reduce using rule 2 (declarations -> decl .)
    SI              reduce using rule 2 (declarations -> decl .)
    ENCUANTO        reduce using rule 2 (declarations -> decl .)
    PARA            reduce using rule 2 (declarations -> decl .)
    ESCRIBIR        reduce using rule 2 (declarations -> decl .)


state 4

    (4) decl -> declV .

    VAR             reduce using rule 4 (decl -> declV .)
    FUNCION         reduce using rule 4 (decl -> declV .)
    LISTA           reduce using rule 4 (decl -> declV .)
    ID              reduce using rule 4 (decl -> declV .)
    SI              reduce using rule 4 (decl -> declV .)
    ENCUANTO        reduce using rule 4 (decl -> declV .)
    PARA            reduce using rule 4 (decl -> declV .)
    ESCRIBIR        reduce using rule 4 (decl -> declV .)


state 5

    (5) decl -> declF .

    VAR             reduce using rule 5 (decl -> declF .)
    FUNCION         reduce using rule 5 (decl -> declF .)
    LISTA           reduce using rule 5 (decl -> declF .)
    ID              reduce using rule 5 (decl -> declF .)
    SI              reduce using rule 5 (decl -> declF .)
    ENCUANTO        reduce using rule 5 (decl -> declF .)
    PARA            reduce using rule 5 (decl -> declF .)
    ESCRIBIR        reduce using rule 5 (decl -> declF .)


state 6

    (6) decl -> declL .

    VAR             reduce using rule 6 (decl -> declL .)
    FUNCION         reduce using rule 6 (decl -> declL .)
    LISTA           reduce using rule 6 (decl -> declL .)
    ID              reduce using rule 6 (decl -> declL .)
    SI              reduce using rule 6 (decl -> declL .)
    ENCUANTO        reduce using rule 6 (decl -> declL .)
    PARA            reduce using rule 6 (decl -> declL .)
    ESCRIBIR        reduce using rule 6 (decl -> declL .)


state 7

    (7) declV -> VAR . vari : tipo
    (8) vari -> . atrib
    (9) vari -> . ID
    (10) vari -> . vari , atrib
    (11) vari -> . vari , ID
    (42) atrib -> . ID = STRING
    (43) atrib -> . ID = VERDADERO
    (44) atrib -> . ID = FALSO
    (45) atrib -> . ID = exp

    ID              shift and go to state 24

    vari                           shift and go to state 22
    atrib                          shift and go to state 23

state 8

    (27) declF -> FUNCION . ID ( parametros ) : tipo declarations statements DEVUELVE return .

    ID              shift and go to state 25


state 9

    (16) declL -> LISTA . ID = lista

    ID              shift and go to state 26


state 10

    (1) prg -> declarations statements .
    (37) statements -> statements . stat
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (41) stat -> . readwrite
    (42) atrib -> . ID = STRING
    (43) atrib -> . ID = VERDADERO
    (44) atrib -> . ID = FALSO
    (45) atrib -> . ID = exp
    (57) conditions -> . SI expL ENTONCES statements endcondition
    (74) ciclos -> . ENCUANTO expL HACER statements .
    (75) ciclos -> . PARA expL SIGUIENTE atrib .
    (76) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (77) readwrite -> . ESCRIBIR ( ID )
    (78) readwrite -> . ID = LEER ( STRING )

    $end            reduce using rule 1 (prg -> declarations statements .)
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    stat                           shift and go to state 27
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 11

    (3) declarations -> declarations decl .

    VAR             reduce using rule 3 (declarations -> declarations decl .)
    FUNCION         reduce using rule 3 (declarations -> declarations decl .)
    LISTA           reduce using rule 3 (declarations -> declarations decl .)
    ID              reduce using rule 3 (declarations -> declarations decl .)
    SI              reduce using rule 3 (declarations -> declarations decl .)
    ENCUANTO        reduce using rule 3 (declarations -> declarations decl .)
    PARA            reduce using rule 3 (declarations -> declarations decl .)
    ESCRIBIR        reduce using rule 3 (declarations -> declarations decl .)


state 12

    (36) statements -> stat .

    ID              reduce using rule 36 (statements -> stat .)
    SI              reduce using rule 36 (statements -> stat .)
    ENCUANTO        reduce using rule 36 (statements -> stat .)
    PARA            reduce using rule 36 (statements -> stat .)
    ESCRIBIR        reduce using rule 36 (statements -> stat .)
    $end            reduce using rule 36 (statements -> stat .)
    .               reduce using rule 36 (statements -> stat .)
    CASO            reduce using rule 36 (statements -> stat .)
    DEVUELVE        reduce using rule 36 (statements -> stat .)


state 13

    (38) stat -> atrib . ;

    ;               shift and go to state 28


state 14

    (39) stat -> conditions .

    ID              reduce using rule 39 (stat -> conditions .)
    SI              reduce using rule 39 (stat -> conditions .)
    ENCUANTO        reduce using rule 39 (stat -> conditions .)
    PARA            reduce using rule 39 (stat -> conditions .)
    ESCRIBIR        reduce using rule 39 (stat -> conditions .)
    $end            reduce using rule 39 (stat -> conditions .)
    .               reduce using rule 39 (stat -> conditions .)
    CASO            reduce using rule 39 (stat -> conditions .)
    DEVUELVE        reduce using rule 39 (stat -> conditions .)


state 15

    (40) stat -> ciclos .

    ID              reduce using rule 40 (stat -> ciclos .)
    SI              reduce using rule 40 (stat -> ciclos .)
    ENCUANTO        reduce using rule 40 (stat -> ciclos .)
    PARA            reduce using rule 40 (stat -> ciclos .)
    ESCRIBIR        reduce using rule 40 (stat -> ciclos .)
    $end            reduce using rule 40 (stat -> ciclos .)
    .               reduce using rule 40 (stat -> ciclos .)
    CASO            reduce using rule 40 (stat -> ciclos .)
    DEVUELVE        reduce using rule 40 (stat -> ciclos .)


state 16

    (41) stat -> readwrite .

    ID              reduce using rule 41 (stat -> readwrite .)
    SI              reduce using rule 41 (stat -> readwrite .)
    ENCUANTO        reduce using rule 41 (stat -> readwrite .)
    PARA            reduce using rule 41 (stat -> readwrite .)
    ESCRIBIR        reduce using rule 41 (stat -> readwrite .)
    $end            reduce using rule 41 (stat -> readwrite .)
    .               reduce using rule 41 (stat -> readwrite .)
    CASO            reduce using rule 41 (stat -> readwrite .)
    DEVUELVE        reduce using rule 41 (stat -> readwrite .)


state 17

    (42) atrib -> ID . = STRING
    (43) atrib -> ID . = VERDADERO
    (44) atrib -> ID . = FALSO
    (45) atrib -> ID . = exp
    (78) readwrite -> ID . = LEER ( STRING )

    =               shift and go to state 29


state 18

    (57) conditions -> SI . expL ENTONCES statements endcondition
    (60) expL -> . termoB
    (61) expL -> . expL OR termoB
    (62) termoB -> . fatorB
    (63) termoB -> . termoB AND fatorB
    (64) fatorB -> . condition
    (65) fatorB -> . BOOLEANO
    (66) fatorB -> . ( expL )
    (67) condition -> . exp op exp
    (46) exp -> . exp + termo
    (47) exp -> . exp - termo
    (48) exp -> . termo
    (49) termo -> . termo * fator
    (50) termo -> . termo / fator
    (51) termo -> . termo ^ fator
    (52) termo -> . fator
    (53) fator -> . INT
    (54) fator -> . FLOAT
    (55) fator -> . ID
    (56) fator -> . ( exp )

    BOOLEANO        shift and go to state 34
    (               shift and go to state 35
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41

    expL                           shift and go to state 30
    termoB                         shift and go to state 31
    fatorB                         shift and go to state 32
    condition                      shift and go to state 33
    exp                            shift and go to state 36
    termo                          shift and go to state 37
    fator                          shift and go to state 38

state 19

    (74) ciclos -> ENCUANTO . expL HACER statements .
    (60) expL -> . termoB
    (61) expL -> . expL OR termoB
    (62) termoB -> . fatorB
    (63) termoB -> . termoB AND fatorB
    (64) fatorB -> . condition
    (65) fatorB -> . BOOLEANO
    (66) fatorB -> . ( expL )
    (67) condition -> . exp op exp
    (46) exp -> . exp + termo
    (47) exp -> . exp - termo
    (48) exp -> . termo
    (49) termo -> . termo * fator
    (50) termo -> . termo / fator
    (51) termo -> . termo ^ fator
    (52) termo -> . fator
    (53) fator -> . INT
    (54) fator -> . FLOAT
    (55) fator -> . ID
    (56) fator -> . ( exp )

    BOOLEANO        shift and go to state 34
    (               shift and go to state 35
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41

    expL                           shift and go to state 42
    termoB                         shift and go to state 31
    fatorB                         shift and go to state 32
    condition                      shift and go to state 33
    exp                            shift and go to state 36
    termo                          shift and go to state 37
    fator                          shift and go to state 38

state 20

    (75) ciclos -> PARA . expL SIGUIENTE atrib .
    (76) ciclos -> PARA . expL SIGUIENTE atrib HACER statements .
    (60) expL -> . termoB
    (61) expL -> . expL OR termoB
    (62) termoB -> . fatorB
    (63) termoB -> . termoB AND fatorB
    (64) fatorB -> . condition
    (65) fatorB -> . BOOLEANO
    (66) fatorB -> . ( expL )
    (67) condition -> . exp op exp
    (46) exp -> . exp + termo
    (47) exp -> . exp - termo
    (48) exp -> . termo
    (49) termo -> . termo * fator
    (50) termo -> . termo / fator
    (51) termo -> . termo ^ fator
    (52) termo -> . fator
    (53) fator -> . INT
    (54) fator -> . FLOAT
    (55) fator -> . ID
    (56) fator -> . ( exp )

    BOOLEANO        shift and go to state 34
    (               shift and go to state 35
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41

    expL                           shift and go to state 43
    termoB                         shift and go to state 31
    fatorB                         shift and go to state 32
    condition                      shift and go to state 33
    exp                            shift and go to state 36
    termo                          shift and go to state 37
    fator                          shift and go to state 38

state 21

    (77) readwrite -> ESCRIBIR . ( ID )

    (               shift and go to state 44


state 22

    (7) declV -> VAR vari . : tipo
    (10) vari -> vari . , atrib
    (11) vari -> vari . , ID

    :               shift and go to state 45
    ,               shift and go to state 46


state 23

    (8) vari -> atrib .

    :               reduce using rule 8 (vari -> atrib .)
    ,               reduce using rule 8 (vari -> atrib .)


state 24

    (9) vari -> ID .
    (42) atrib -> ID . = STRING
    (43) atrib -> ID . = VERDADERO
    (44) atrib -> ID . = FALSO
    (45) atrib -> ID . = exp

    :               reduce using rule 9 (vari -> ID .)
    ,               reduce using rule 9 (vari -> ID .)
    =               shift and go to state 47


state 25

    (27) declF -> FUNCION ID . ( parametros ) : tipo declarations statements DEVUELVE return .

    (               shift and go to state 48


state 26

    (16) declL -> LISTA ID . = lista

    =               shift and go to state 49


state 27

    (37) statements -> statements stat .

    ID              reduce using rule 37 (statements -> statements stat .)
    SI              reduce using rule 37 (statements -> statements stat .)
    ENCUANTO        reduce using rule 37 (statements -> statements stat .)
    PARA            reduce using rule 37 (statements -> statements stat .)
    ESCRIBIR        reduce using rule 37 (statements -> statements stat .)
    $end            reduce using rule 37 (statements -> statements stat .)
    .               reduce using rule 37 (statements -> statements stat .)
    CASO            reduce using rule 37 (statements -> statements stat .)
    DEVUELVE        reduce using rule 37 (statements -> statements stat .)


state 28

    (38) stat -> atrib ; .

    ID              reduce using rule 38 (stat -> atrib ; .)
    SI              reduce using rule 38 (stat -> atrib ; .)
    ENCUANTO        reduce using rule 38 (stat -> atrib ; .)
    PARA            reduce using rule 38 (stat -> atrib ; .)
    ESCRIBIR        reduce using rule 38 (stat -> atrib ; .)
    $end            reduce using rule 38 (stat -> atrib ; .)
    .               reduce using rule 38 (stat -> atrib ; .)
    CASO            reduce using rule 38 (stat -> atrib ; .)
    DEVUELVE        reduce using rule 38 (stat -> atrib ; .)


state 29

    (42) atrib -> ID = . STRING
    (43) atrib -> ID = . VERDADERO
    (44) atrib -> ID = . FALSO
    (45) atrib -> ID = . exp
    (78) readwrite -> ID = . LEER ( STRING )
    (46) exp -> . exp + termo
    (47) exp -> . exp - termo
    (48) exp -> . termo
    (49) termo -> . termo * fator
    (50) termo -> . termo / fator
    (51) termo -> . termo ^ fator
    (52) termo -> . fator
    (53) fator -> . INT
    (54) fator -> . FLOAT
    (55) fator -> . ID
    (56) fator -> . ( exp )

    STRING          shift and go to state 50
    VERDADERO       shift and go to state 51
    FALSO           shift and go to state 52
    LEER            shift and go to state 54
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 55

    exp                            shift and go to state 53
    termo                          shift and go to state 37
    fator                          shift and go to state 38

state 30

    (57) conditions -> SI expL . ENTONCES statements endcondition
    (61) expL -> expL . OR termoB

    ENTONCES        shift and go to state 56
    OR              shift and go to state 57


state 31

    (60) expL -> termoB .
    (63) termoB -> termoB . AND fatorB

    ENTONCES        reduce using rule 60 (expL -> termoB .)
    OR              reduce using rule 60 (expL -> termoB .)
    HACER           reduce using rule 60 (expL -> termoB .)
    SIGUIENTE       reduce using rule 60 (expL -> termoB .)
    )               reduce using rule 60 (expL -> termoB .)
    AND             shift and go to state 58


state 32

    (62) termoB -> fatorB .

    AND             reduce using rule 62 (termoB -> fatorB .)
    ENTONCES        reduce using rule 62 (termoB -> fatorB .)
    OR              reduce using rule 62 (termoB -> fatorB .)
    HACER           reduce using rule 62 (termoB -> fatorB .)
    SIGUIENTE       reduce using rule 62 (termoB -> fatorB .)
    )               reduce using rule 62 (termoB -> fatorB .)


state 33

    (64) fatorB -> condition .

    AND             reduce using rule 64 (fatorB -> condition .)
    ENTONCES        reduce using rule 64 (fatorB -> condition .)
    OR              reduce using rule 64 (fatorB -> condition .)
    HACER           reduce using rule 64 (fatorB -> condition .)
    SIGUIENTE       reduce using rule 64 (fatorB -> condition .)
    )               reduce using rule 64 (fatorB -> condition .)


state 34

    (65) fatorB -> BOOLEANO .

    AND             reduce using rule 65 (fatorB -> BOOLEANO .)
    ENTONCES        reduce using rule 65 (fatorB -> BOOLEANO .)
    OR              reduce using rule 65 (fatorB -> BOOLEANO .)
    HACER           reduce using rule 65 (fatorB -> BOOLEANO .)
    SIGUIENTE       reduce using rule 65 (fatorB -> BOOLEANO .)
    )               reduce using rule 65 (fatorB -> BOOLEANO .)


state 35

    (66) fatorB -> ( . expL )
    (56) fator -> ( . exp )
    (60) expL -> . termoB
    (61) expL -> . expL OR termoB
    (46) exp -> . exp + termo
    (47) exp -> . exp - termo
    (48) exp -> . termo
    (62) termoB -> . fatorB
    (63) termoB -> . termoB AND fatorB
    (49) termo -> . termo * fator
    (50) termo -> . termo / fator
    (51) termo -> . termo ^ fator
    (52) termo -> . fator
    (64) fatorB -> . condition
    (65) fatorB -> . BOOLEANO
    (66) fatorB -> . ( expL )
    (53) fator -> . INT
    (54) fator -> . FLOAT
    (55) fator -> . ID
    (56) fator -> . ( exp )
    (67) condition -> . exp op exp

    BOOLEANO        shift and go to state 34
    (               shift and go to state 35
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41

    expL                           shift and go to state 59
    exp                            shift and go to state 60
    termoB                         shift and go to state 31
    termo                          shift and go to state 37
    fatorB                         shift and go to state 32
    fator                          shift and go to state 38
    condition                      shift and go to state 33

state 36

    (67) condition -> exp . op exp
    (46) exp -> exp . + termo
    (47) exp -> exp . - termo
    (68) op -> . >
    (69) op -> . <
    (70) op -> . IGUAL
    (71) op -> . DIFERENTE
    (72) op -> . > IGUAL
    (73) op -> . < IGUAL

    +               shift and go to state 62
    -               shift and go to state 63
    >               shift and go to state 64
    <               shift and go to state 65
    IGUAL           shift and go to state 66
    DIFERENTE       shift and go to state 67

    op                             shift and go to state 61

state 37

    (48) exp -> termo .
    (49) termo -> termo . * fator
    (50) termo -> termo . / fator
    (51) termo -> termo . ^ fator

    +               reduce using rule 48 (exp -> termo .)
    -               reduce using rule 48 (exp -> termo .)
    >               reduce using rule 48 (exp -> termo .)
    <               reduce using rule 48 (exp -> termo .)
    IGUAL           reduce using rule 48 (exp -> termo .)
    DIFERENTE       reduce using rule 48 (exp -> termo .)
    ;               reduce using rule 48 (exp -> termo .)
    )               reduce using rule 48 (exp -> termo .)
    :               reduce using rule 48 (exp -> termo .)
    ,               reduce using rule 48 (exp -> termo .)
    .               reduce using rule 48 (exp -> termo .)
    HACER           reduce using rule 48 (exp -> termo .)
    AND             reduce using rule 48 (exp -> termo .)
    ENTONCES        reduce using rule 48 (exp -> termo .)
    OR              reduce using rule 48 (exp -> termo .)
    SIGUIENTE       reduce using rule 48 (exp -> termo .)
    *               shift and go to state 68
    /               shift and go to state 69
    ^               shift and go to state 70


state 38

    (52) termo -> fator .

    *               reduce using rule 52 (termo -> fator .)
    /               reduce using rule 52 (termo -> fator .)
    ^               reduce using rule 52 (termo -> fator .)
    +               reduce using rule 52 (termo -> fator .)
    -               reduce using rule 52 (termo -> fator .)
    >               reduce using rule 52 (termo -> fator .)
    <               reduce using rule 52 (termo -> fator .)
    IGUAL           reduce using rule 52 (termo -> fator .)
    DIFERENTE       reduce using rule 52 (termo -> fator .)
    ;               reduce using rule 52 (termo -> fator .)
    )               reduce using rule 52 (termo -> fator .)
    :               reduce using rule 52 (termo -> fator .)
    ,               reduce using rule 52 (termo -> fator .)
    .               reduce using rule 52 (termo -> fator .)
    HACER           reduce using rule 52 (termo -> fator .)
    AND             reduce using rule 52 (termo -> fator .)
    ENTONCES        reduce using rule 52 (termo -> fator .)
    OR              reduce using rule 52 (termo -> fator .)
    SIGUIENTE       reduce using rule 52 (termo -> fator .)


state 39

    (53) fator -> INT .

    *               reduce using rule 53 (fator -> INT .)
    /               reduce using rule 53 (fator -> INT .)
    ^               reduce using rule 53 (fator -> INT .)
    +               reduce using rule 53 (fator -> INT .)
    -               reduce using rule 53 (fator -> INT .)
    >               reduce using rule 53 (fator -> INT .)
    <               reduce using rule 53 (fator -> INT .)
    IGUAL           reduce using rule 53 (fator -> INT .)
    DIFERENTE       reduce using rule 53 (fator -> INT .)
    ;               reduce using rule 53 (fator -> INT .)
    )               reduce using rule 53 (fator -> INT .)
    :               reduce using rule 53 (fator -> INT .)
    ,               reduce using rule 53 (fator -> INT .)
    .               reduce using rule 53 (fator -> INT .)
    HACER           reduce using rule 53 (fator -> INT .)
    AND             reduce using rule 53 (fator -> INT .)
    ENTONCES        reduce using rule 53 (fator -> INT .)
    OR              reduce using rule 53 (fator -> INT .)
    SIGUIENTE       reduce using rule 53 (fator -> INT .)


state 40

    (54) fator -> FLOAT .

    *               reduce using rule 54 (fator -> FLOAT .)
    /               reduce using rule 54 (fator -> FLOAT .)
    ^               reduce using rule 54 (fator -> FLOAT .)
    +               reduce using rule 54 (fator -> FLOAT .)
    -               reduce using rule 54 (fator -> FLOAT .)
    >               reduce using rule 54 (fator -> FLOAT .)
    <               reduce using rule 54 (fator -> FLOAT .)
    IGUAL           reduce using rule 54 (fator -> FLOAT .)
    DIFERENTE       reduce using rule 54 (fator -> FLOAT .)
    ;               reduce using rule 54 (fator -> FLOAT .)
    )               reduce using rule 54 (fator -> FLOAT .)
    :               reduce using rule 54 (fator -> FLOAT .)
    ,               reduce using rule 54 (fator -> FLOAT .)
    .               reduce using rule 54 (fator -> FLOAT .)
    HACER           reduce using rule 54 (fator -> FLOAT .)
    AND             reduce using rule 54 (fator -> FLOAT .)
    ENTONCES        reduce using rule 54 (fator -> FLOAT .)
    OR              reduce using rule 54 (fator -> FLOAT .)
    SIGUIENTE       reduce using rule 54 (fator -> FLOAT .)


state 41

    (55) fator -> ID .

    *               reduce using rule 55 (fator -> ID .)
    /               reduce using rule 55 (fator -> ID .)
    ^               reduce using rule 55 (fator -> ID .)
    +               reduce using rule 55 (fator -> ID .)
    -               reduce using rule 55 (fator -> ID .)
    >               reduce using rule 55 (fator -> ID .)
    <               reduce using rule 55 (fator -> ID .)
    IGUAL           reduce using rule 55 (fator -> ID .)
    DIFERENTE       reduce using rule 55 (fator -> ID .)
    ;               reduce using rule 55 (fator -> ID .)
    )               reduce using rule 55 (fator -> ID .)
    :               reduce using rule 55 (fator -> ID .)
    ,               reduce using rule 55 (fator -> ID .)
    .               reduce using rule 55 (fator -> ID .)
    HACER           reduce using rule 55 (fator -> ID .)
    AND             reduce using rule 55 (fator -> ID .)
    ENTONCES        reduce using rule 55 (fator -> ID .)
    OR              reduce using rule 55 (fator -> ID .)
    SIGUIENTE       reduce using rule 55 (fator -> ID .)


state 42

    (74) ciclos -> ENCUANTO expL . HACER statements .
    (61) expL -> expL . OR termoB

    HACER           shift and go to state 71
    OR              shift and go to state 57


state 43

    (75) ciclos -> PARA expL . SIGUIENTE atrib .
    (76) ciclos -> PARA expL . SIGUIENTE atrib HACER statements .
    (61) expL -> expL . OR termoB

    SIGUIENTE       shift and go to state 72
    OR              shift and go to state 57


state 44

    (77) readwrite -> ESCRIBIR ( . ID )

    ID              shift and go to state 73


state 45

    (7) declV -> VAR vari : . tipo
    (12) tipo -> . ENTERO
    (13) tipo -> . REAL
    (14) tipo -> . BOOLEANO
    (15) tipo -> . STR

    ENTERO          shift and go to state 75
    REAL            shift and go to state 76
    BOOLEANO        shift and go to state 77
    STR             shift and go to state 78

    tipo                           shift and go to state 74

state 46

    (10) vari -> vari , . atrib
    (11) vari -> vari , . ID
    (42) atrib -> . ID = STRING
    (43) atrib -> . ID = VERDADERO
    (44) atrib -> . ID = FALSO
    (45) atrib -> . ID = exp

    ID              shift and go to state 80

    atrib                          shift and go to state 79

state 47

    (42) atrib -> ID = . STRING
    (43) atrib -> ID = . VERDADERO
    (44) atrib -> ID = . FALSO
    (45) atrib -> ID = . exp
    (46) exp -> . exp + termo
    (47) exp -> . exp - termo
    (48) exp -> . termo
    (49) termo -> . termo * fator
    (50) termo -> . termo / fator
    (51) termo -> . termo ^ fator
    (52) termo -> . fator
    (53) fator -> . INT
    (54) fator -> . FLOAT
    (55) fator -> . ID
    (56) fator -> . ( exp )

    STRING          shift and go to state 50
    VERDADERO       shift and go to state 51
    FALSO           shift and go to state 52
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 55

    exp                            shift and go to state 53
    termo                          shift and go to state 37
    fator                          shift and go to state 38

state 48

    (27) declF -> FUNCION ID ( . parametros ) : tipo declarations statements DEVUELVE return .
    (28) parametros -> .
    (29) parametros -> . ID : tipo
    (30) parametros -> . parametros , ID : tipo

    )               reduce using rule 28 (parametros -> .)
    ,               reduce using rule 28 (parametros -> .)
    ID              shift and go to state 81

    parametros                     shift and go to state 82

state 49

    (16) declL -> LISTA ID = . lista
    (17) lista -> . [ ]
    (18) lista -> . [ elementos ]

    [               shift and go to state 84

    lista                          shift and go to state 83

state 50

    (42) atrib -> ID = STRING .

    ;               reduce using rule 42 (atrib -> ID = STRING .)
    :               reduce using rule 42 (atrib -> ID = STRING .)
    ,               reduce using rule 42 (atrib -> ID = STRING .)
    .               reduce using rule 42 (atrib -> ID = STRING .)
    HACER           reduce using rule 42 (atrib -> ID = STRING .)


state 51

    (43) atrib -> ID = VERDADERO .

    ;               reduce using rule 43 (atrib -> ID = VERDADERO .)
    :               reduce using rule 43 (atrib -> ID = VERDADERO .)
    ,               reduce using rule 43 (atrib -> ID = VERDADERO .)
    .               reduce using rule 43 (atrib -> ID = VERDADERO .)
    HACER           reduce using rule 43 (atrib -> ID = VERDADERO .)


state 52

    (44) atrib -> ID = FALSO .

    ;               reduce using rule 44 (atrib -> ID = FALSO .)
    :               reduce using rule 44 (atrib -> ID = FALSO .)
    ,               reduce using rule 44 (atrib -> ID = FALSO .)
    .               reduce using rule 44 (atrib -> ID = FALSO .)
    HACER           reduce using rule 44 (atrib -> ID = FALSO .)


state 53

    (45) atrib -> ID = exp .
    (46) exp -> exp . + termo
    (47) exp -> exp . - termo

    ;               reduce using rule 45 (atrib -> ID = exp .)
    :               reduce using rule 45 (atrib -> ID = exp .)
    ,               reduce using rule 45 (atrib -> ID = exp .)
    .               reduce using rule 45 (atrib -> ID = exp .)
    HACER           reduce using rule 45 (atrib -> ID = exp .)
    +               shift and go to state 62
    -               shift and go to state 63


state 54

    (78) readwrite -> ID = LEER . ( STRING )

    (               shift and go to state 85


state 55

    (56) fator -> ( . exp )
    (46) exp -> . exp + termo
    (47) exp -> . exp - termo
    (48) exp -> . termo
    (49) termo -> . termo * fator
    (50) termo -> . termo / fator
    (51) termo -> . termo ^ fator
    (52) termo -> . fator
    (53) fator -> . INT
    (54) fator -> . FLOAT
    (55) fator -> . ID
    (56) fator -> . ( exp )

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 55

    exp                            shift and go to state 86
    termo                          shift and go to state 37
    fator                          shift and go to state 38

state 56

    (57) conditions -> SI expL ENTONCES . statements endcondition
    (36) statements -> . stat
    (37) statements -> . statements stat
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (41) stat -> . readwrite
    (42) atrib -> . ID = STRING
    (43) atrib -> . ID = VERDADERO
    (44) atrib -> . ID = FALSO
    (45) atrib -> . ID = exp
    (57) conditions -> . SI expL ENTONCES statements endcondition
    (74) ciclos -> . ENCUANTO expL HACER statements .
    (75) ciclos -> . PARA expL SIGUIENTE atrib .
    (76) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (77) readwrite -> . ESCRIBIR ( ID )
    (78) readwrite -> . ID = LEER ( STRING )

    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    statements                     shift and go to state 87
    stat                           shift and go to state 12
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 57

    (61) expL -> expL OR . termoB
    (62) termoB -> . fatorB
    (63) termoB -> . termoB AND fatorB
    (64) fatorB -> . condition
    (65) fatorB -> . BOOLEANO
    (66) fatorB -> . ( expL )
    (67) condition -> . exp op exp
    (46) exp -> . exp + termo
    (47) exp -> . exp - termo
    (48) exp -> . termo
    (49) termo -> . termo * fator
    (50) termo -> . termo / fator
    (51) termo -> . termo ^ fator
    (52) termo -> . fator
    (53) fator -> . INT
    (54) fator -> . FLOAT
    (55) fator -> . ID
    (56) fator -> . ( exp )

    BOOLEANO        shift and go to state 34
    (               shift and go to state 35
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41

    termoB                         shift and go to state 88
    fatorB                         shift and go to state 32
    condition                      shift and go to state 33
    exp                            shift and go to state 36
    termo                          shift and go to state 37
    fator                          shift and go to state 38

state 58

    (63) termoB -> termoB AND . fatorB
    (64) fatorB -> . condition
    (65) fatorB -> . BOOLEANO
    (66) fatorB -> . ( expL )
    (67) condition -> . exp op exp
    (46) exp -> . exp + termo
    (47) exp -> . exp - termo
    (48) exp -> . termo
    (49) termo -> . termo * fator
    (50) termo -> . termo / fator
    (51) termo -> . termo ^ fator
    (52) termo -> . fator
    (53) fator -> . INT
    (54) fator -> . FLOAT
    (55) fator -> . ID
    (56) fator -> . ( exp )

    BOOLEANO        shift and go to state 34
    (               shift and go to state 35
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41

    fatorB                         shift and go to state 89
    condition                      shift and go to state 33
    exp                            shift and go to state 36
    termo                          shift and go to state 37
    fator                          shift and go to state 38

state 59

    (66) fatorB -> ( expL . )
    (61) expL -> expL . OR termoB

    )               shift and go to state 90
    OR              shift and go to state 57


state 60

    (56) fator -> ( exp . )
    (46) exp -> exp . + termo
    (47) exp -> exp . - termo
    (67) condition -> exp . op exp
    (68) op -> . >
    (69) op -> . <
    (70) op -> . IGUAL
    (71) op -> . DIFERENTE
    (72) op -> . > IGUAL
    (73) op -> . < IGUAL

    )               shift and go to state 91
    +               shift and go to state 62
    -               shift and go to state 63
    >               shift and go to state 64
    <               shift and go to state 65
    IGUAL           shift and go to state 66
    DIFERENTE       shift and go to state 67

    op                             shift and go to state 61

state 61

    (67) condition -> exp op . exp
    (46) exp -> . exp + termo
    (47) exp -> . exp - termo
    (48) exp -> . termo
    (49) termo -> . termo * fator
    (50) termo -> . termo / fator
    (51) termo -> . termo ^ fator
    (52) termo -> . fator
    (53) fator -> . INT
    (54) fator -> . FLOAT
    (55) fator -> . ID
    (56) fator -> . ( exp )

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 55

    exp                            shift and go to state 92
    termo                          shift and go to state 37
    fator                          shift and go to state 38

state 62

    (46) exp -> exp + . termo
    (49) termo -> . termo * fator
    (50) termo -> . termo / fator
    (51) termo -> . termo ^ fator
    (52) termo -> . fator
    (53) fator -> . INT
    (54) fator -> . FLOAT
    (55) fator -> . ID
    (56) fator -> . ( exp )

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 55

    termo                          shift and go to state 93
    fator                          shift and go to state 38

state 63

    (47) exp -> exp - . termo
    (49) termo -> . termo * fator
    (50) termo -> . termo / fator
    (51) termo -> . termo ^ fator
    (52) termo -> . fator
    (53) fator -> . INT
    (54) fator -> . FLOAT
    (55) fator -> . ID
    (56) fator -> . ( exp )

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 55

    termo                          shift and go to state 94
    fator                          shift and go to state 38

state 64

    (68) op -> > .
    (72) op -> > . IGUAL

    INT             reduce using rule 68 (op -> > .)
    FLOAT           reduce using rule 68 (op -> > .)
    ID              reduce using rule 68 (op -> > .)
    (               reduce using rule 68 (op -> > .)
    IGUAL           shift and go to state 95


state 65

    (69) op -> < .
    (73) op -> < . IGUAL

    INT             reduce using rule 69 (op -> < .)
    FLOAT           reduce using rule 69 (op -> < .)
    ID              reduce using rule 69 (op -> < .)
    (               reduce using rule 69 (op -> < .)
    IGUAL           shift and go to state 96


state 66

    (70) op -> IGUAL .

    INT             reduce using rule 70 (op -> IGUAL .)
    FLOAT           reduce using rule 70 (op -> IGUAL .)
    ID              reduce using rule 70 (op -> IGUAL .)
    (               reduce using rule 70 (op -> IGUAL .)


state 67

    (71) op -> DIFERENTE .

    INT             reduce using rule 71 (op -> DIFERENTE .)
    FLOAT           reduce using rule 71 (op -> DIFERENTE .)
    ID              reduce using rule 71 (op -> DIFERENTE .)
    (               reduce using rule 71 (op -> DIFERENTE .)


state 68

    (49) termo -> termo * . fator
    (53) fator -> . INT
    (54) fator -> . FLOAT
    (55) fator -> . ID
    (56) fator -> . ( exp )

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 55

    fator                          shift and go to state 97

state 69

    (50) termo -> termo / . fator
    (53) fator -> . INT
    (54) fator -> . FLOAT
    (55) fator -> . ID
    (56) fator -> . ( exp )

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 55

    fator                          shift and go to state 98

state 70

    (51) termo -> termo ^ . fator
    (53) fator -> . INT
    (54) fator -> . FLOAT
    (55) fator -> . ID
    (56) fator -> . ( exp )

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 55

    fator                          shift and go to state 99

state 71

    (74) ciclos -> ENCUANTO expL HACER . statements .
    (36) statements -> . stat
    (37) statements -> . statements stat
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (41) stat -> . readwrite
    (42) atrib -> . ID = STRING
    (43) atrib -> . ID = VERDADERO
    (44) atrib -> . ID = FALSO
    (45) atrib -> . ID = exp
    (57) conditions -> . SI expL ENTONCES statements endcondition
    (74) ciclos -> . ENCUANTO expL HACER statements .
    (75) ciclos -> . PARA expL SIGUIENTE atrib .
    (76) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (77) readwrite -> . ESCRIBIR ( ID )
    (78) readwrite -> . ID = LEER ( STRING )

    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    statements                     shift and go to state 100
    stat                           shift and go to state 12
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 72

    (75) ciclos -> PARA expL SIGUIENTE . atrib .
    (76) ciclos -> PARA expL SIGUIENTE . atrib HACER statements .
    (42) atrib -> . ID = STRING
    (43) atrib -> . ID = VERDADERO
    (44) atrib -> . ID = FALSO
    (45) atrib -> . ID = exp

    ID              shift and go to state 102

    atrib                          shift and go to state 101

state 73

    (77) readwrite -> ESCRIBIR ( ID . )

    )               shift and go to state 103


state 74

    (7) declV -> VAR vari : tipo .

    VAR             reduce using rule 7 (declV -> VAR vari : tipo .)
    FUNCION         reduce using rule 7 (declV -> VAR vari : tipo .)
    LISTA           reduce using rule 7 (declV -> VAR vari : tipo .)
    ID              reduce using rule 7 (declV -> VAR vari : tipo .)
    SI              reduce using rule 7 (declV -> VAR vari : tipo .)
    ENCUANTO        reduce using rule 7 (declV -> VAR vari : tipo .)
    PARA            reduce using rule 7 (declV -> VAR vari : tipo .)
    ESCRIBIR        reduce using rule 7 (declV -> VAR vari : tipo .)


state 75

    (12) tipo -> ENTERO .

    VAR             reduce using rule 12 (tipo -> ENTERO .)
    FUNCION         reduce using rule 12 (tipo -> ENTERO .)
    LISTA           reduce using rule 12 (tipo -> ENTERO .)
    ID              reduce using rule 12 (tipo -> ENTERO .)
    SI              reduce using rule 12 (tipo -> ENTERO .)
    ENCUANTO        reduce using rule 12 (tipo -> ENTERO .)
    PARA            reduce using rule 12 (tipo -> ENTERO .)
    ESCRIBIR        reduce using rule 12 (tipo -> ENTERO .)
    )               reduce using rule 12 (tipo -> ENTERO .)
    ,               reduce using rule 12 (tipo -> ENTERO .)


state 76

    (13) tipo -> REAL .

    VAR             reduce using rule 13 (tipo -> REAL .)
    FUNCION         reduce using rule 13 (tipo -> REAL .)
    LISTA           reduce using rule 13 (tipo -> REAL .)
    ID              reduce using rule 13 (tipo -> REAL .)
    SI              reduce using rule 13 (tipo -> REAL .)
    ENCUANTO        reduce using rule 13 (tipo -> REAL .)
    PARA            reduce using rule 13 (tipo -> REAL .)
    ESCRIBIR        reduce using rule 13 (tipo -> REAL .)
    )               reduce using rule 13 (tipo -> REAL .)
    ,               reduce using rule 13 (tipo -> REAL .)


state 77

    (14) tipo -> BOOLEANO .

    VAR             reduce using rule 14 (tipo -> BOOLEANO .)
    FUNCION         reduce using rule 14 (tipo -> BOOLEANO .)
    LISTA           reduce using rule 14 (tipo -> BOOLEANO .)
    ID              reduce using rule 14 (tipo -> BOOLEANO .)
    SI              reduce using rule 14 (tipo -> BOOLEANO .)
    ENCUANTO        reduce using rule 14 (tipo -> BOOLEANO .)
    PARA            reduce using rule 14 (tipo -> BOOLEANO .)
    ESCRIBIR        reduce using rule 14 (tipo -> BOOLEANO .)
    )               reduce using rule 14 (tipo -> BOOLEANO .)
    ,               reduce using rule 14 (tipo -> BOOLEANO .)


state 78

    (15) tipo -> STR .

    VAR             reduce using rule 15 (tipo -> STR .)
    FUNCION         reduce using rule 15 (tipo -> STR .)
    LISTA           reduce using rule 15 (tipo -> STR .)
    ID              reduce using rule 15 (tipo -> STR .)
    SI              reduce using rule 15 (tipo -> STR .)
    ENCUANTO        reduce using rule 15 (tipo -> STR .)
    PARA            reduce using rule 15 (tipo -> STR .)
    ESCRIBIR        reduce using rule 15 (tipo -> STR .)
    )               reduce using rule 15 (tipo -> STR .)
    ,               reduce using rule 15 (tipo -> STR .)


state 79

    (10) vari -> vari , atrib .

    :               reduce using rule 10 (vari -> vari , atrib .)
    ,               reduce using rule 10 (vari -> vari , atrib .)


state 80

    (11) vari -> vari , ID .
    (42) atrib -> ID . = STRING
    (43) atrib -> ID . = VERDADERO
    (44) atrib -> ID . = FALSO
    (45) atrib -> ID . = exp

    :               reduce using rule 11 (vari -> vari , ID .)
    ,               reduce using rule 11 (vari -> vari , ID .)
    =               shift and go to state 47


state 81

    (29) parametros -> ID . : tipo

    :               shift and go to state 104


state 82

    (27) declF -> FUNCION ID ( parametros . ) : tipo declarations statements DEVUELVE return .
    (30) parametros -> parametros . , ID : tipo

    )               shift and go to state 105
    ,               shift and go to state 106


state 83

    (16) declL -> LISTA ID = lista .

    VAR             reduce using rule 16 (declL -> LISTA ID = lista .)
    FUNCION         reduce using rule 16 (declL -> LISTA ID = lista .)
    LISTA           reduce using rule 16 (declL -> LISTA ID = lista .)
    ID              reduce using rule 16 (declL -> LISTA ID = lista .)
    SI              reduce using rule 16 (declL -> LISTA ID = lista .)
    ENCUANTO        reduce using rule 16 (declL -> LISTA ID = lista .)
    PARA            reduce using rule 16 (declL -> LISTA ID = lista .)
    ESCRIBIR        reduce using rule 16 (declL -> LISTA ID = lista .)


state 84

    (17) lista -> [ . ]
    (18) lista -> [ . elementos ]
    (19) elementos -> . elemento
    (20) elementos -> . elementos , elemento
    (21) elemento -> . INT
    (22) elemento -> . FLOAT
    (23) elemento -> . BOOLEANO
    (24) elemento -> . STRING
    (25) elemento -> . ID
    (26) elemento -> . lista
    (17) lista -> . [ ]
    (18) lista -> . [ elementos ]

    ]               shift and go to state 107
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    BOOLEANO        shift and go to state 112
    STRING          shift and go to state 113
    ID              shift and go to state 114
    [               shift and go to state 84

    elementos                      shift and go to state 108
    elemento                       shift and go to state 109
    lista                          shift and go to state 115

state 85

    (78) readwrite -> ID = LEER ( . STRING )

    STRING          shift and go to state 116


state 86

    (56) fator -> ( exp . )
    (46) exp -> exp . + termo
    (47) exp -> exp . - termo

    )               shift and go to state 91
    +               shift and go to state 62
    -               shift and go to state 63


state 87

    (57) conditions -> SI expL ENTONCES statements . endcondition
    (37) statements -> statements . stat
    (58) endcondition -> . .
    (59) endcondition -> . CASO CONTRARIO statements .
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (41) stat -> . readwrite
    (42) atrib -> . ID = STRING
    (43) atrib -> . ID = VERDADERO
    (44) atrib -> . ID = FALSO
    (45) atrib -> . ID = exp
    (57) conditions -> . SI expL ENTONCES statements endcondition
    (74) ciclos -> . ENCUANTO expL HACER statements .
    (75) ciclos -> . PARA expL SIGUIENTE atrib .
    (76) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (77) readwrite -> . ESCRIBIR ( ID )
    (78) readwrite -> . ID = LEER ( STRING )

    .               shift and go to state 118
    CASO            shift and go to state 119
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    endcondition                   shift and go to state 117
    stat                           shift and go to state 27
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 88

    (61) expL -> expL OR termoB .
    (63) termoB -> termoB . AND fatorB

    ENTONCES        reduce using rule 61 (expL -> expL OR termoB .)
    OR              reduce using rule 61 (expL -> expL OR termoB .)
    HACER           reduce using rule 61 (expL -> expL OR termoB .)
    SIGUIENTE       reduce using rule 61 (expL -> expL OR termoB .)
    )               reduce using rule 61 (expL -> expL OR termoB .)
    AND             shift and go to state 58


state 89

    (63) termoB -> termoB AND fatorB .

    AND             reduce using rule 63 (termoB -> termoB AND fatorB .)
    ENTONCES        reduce using rule 63 (termoB -> termoB AND fatorB .)
    OR              reduce using rule 63 (termoB -> termoB AND fatorB .)
    HACER           reduce using rule 63 (termoB -> termoB AND fatorB .)
    SIGUIENTE       reduce using rule 63 (termoB -> termoB AND fatorB .)
    )               reduce using rule 63 (termoB -> termoB AND fatorB .)


state 90

    (66) fatorB -> ( expL ) .

    AND             reduce using rule 66 (fatorB -> ( expL ) .)
    ENTONCES        reduce using rule 66 (fatorB -> ( expL ) .)
    OR              reduce using rule 66 (fatorB -> ( expL ) .)
    HACER           reduce using rule 66 (fatorB -> ( expL ) .)
    SIGUIENTE       reduce using rule 66 (fatorB -> ( expL ) .)
    )               reduce using rule 66 (fatorB -> ( expL ) .)


state 91

    (56) fator -> ( exp ) .

    *               reduce using rule 56 (fator -> ( exp ) .)
    /               reduce using rule 56 (fator -> ( exp ) .)
    ^               reduce using rule 56 (fator -> ( exp ) .)
    +               reduce using rule 56 (fator -> ( exp ) .)
    -               reduce using rule 56 (fator -> ( exp ) .)
    >               reduce using rule 56 (fator -> ( exp ) .)
    <               reduce using rule 56 (fator -> ( exp ) .)
    IGUAL           reduce using rule 56 (fator -> ( exp ) .)
    DIFERENTE       reduce using rule 56 (fator -> ( exp ) .)
    ;               reduce using rule 56 (fator -> ( exp ) .)
    )               reduce using rule 56 (fator -> ( exp ) .)
    :               reduce using rule 56 (fator -> ( exp ) .)
    ,               reduce using rule 56 (fator -> ( exp ) .)
    .               reduce using rule 56 (fator -> ( exp ) .)
    HACER           reduce using rule 56 (fator -> ( exp ) .)
    AND             reduce using rule 56 (fator -> ( exp ) .)
    ENTONCES        reduce using rule 56 (fator -> ( exp ) .)
    OR              reduce using rule 56 (fator -> ( exp ) .)
    SIGUIENTE       reduce using rule 56 (fator -> ( exp ) .)


state 92

    (67) condition -> exp op exp .
    (46) exp -> exp . + termo
    (47) exp -> exp . - termo

    AND             reduce using rule 67 (condition -> exp op exp .)
    ENTONCES        reduce using rule 67 (condition -> exp op exp .)
    OR              reduce using rule 67 (condition -> exp op exp .)
    HACER           reduce using rule 67 (condition -> exp op exp .)
    SIGUIENTE       reduce using rule 67 (condition -> exp op exp .)
    )               reduce using rule 67 (condition -> exp op exp .)
    +               shift and go to state 62
    -               shift and go to state 63


state 93

    (46) exp -> exp + termo .
    (49) termo -> termo . * fator
    (50) termo -> termo . / fator
    (51) termo -> termo . ^ fator

    +               reduce using rule 46 (exp -> exp + termo .)
    -               reduce using rule 46 (exp -> exp + termo .)
    >               reduce using rule 46 (exp -> exp + termo .)
    <               reduce using rule 46 (exp -> exp + termo .)
    IGUAL           reduce using rule 46 (exp -> exp + termo .)
    DIFERENTE       reduce using rule 46 (exp -> exp + termo .)
    ;               reduce using rule 46 (exp -> exp + termo .)
    )               reduce using rule 46 (exp -> exp + termo .)
    :               reduce using rule 46 (exp -> exp + termo .)
    ,               reduce using rule 46 (exp -> exp + termo .)
    .               reduce using rule 46 (exp -> exp + termo .)
    HACER           reduce using rule 46 (exp -> exp + termo .)
    AND             reduce using rule 46 (exp -> exp + termo .)
    ENTONCES        reduce using rule 46 (exp -> exp + termo .)
    OR              reduce using rule 46 (exp -> exp + termo .)
    SIGUIENTE       reduce using rule 46 (exp -> exp + termo .)
    *               shift and go to state 68
    /               shift and go to state 69
    ^               shift and go to state 70


state 94

    (47) exp -> exp - termo .
    (49) termo -> termo . * fator
    (50) termo -> termo . / fator
    (51) termo -> termo . ^ fator

    +               reduce using rule 47 (exp -> exp - termo .)
    -               reduce using rule 47 (exp -> exp - termo .)
    >               reduce using rule 47 (exp -> exp - termo .)
    <               reduce using rule 47 (exp -> exp - termo .)
    IGUAL           reduce using rule 47 (exp -> exp - termo .)
    DIFERENTE       reduce using rule 47 (exp -> exp - termo .)
    ;               reduce using rule 47 (exp -> exp - termo .)
    )               reduce using rule 47 (exp -> exp - termo .)
    :               reduce using rule 47 (exp -> exp - termo .)
    ,               reduce using rule 47 (exp -> exp - termo .)
    .               reduce using rule 47 (exp -> exp - termo .)
    HACER           reduce using rule 47 (exp -> exp - termo .)
    AND             reduce using rule 47 (exp -> exp - termo .)
    ENTONCES        reduce using rule 47 (exp -> exp - termo .)
    OR              reduce using rule 47 (exp -> exp - termo .)
    SIGUIENTE       reduce using rule 47 (exp -> exp - termo .)
    *               shift and go to state 68
    /               shift and go to state 69
    ^               shift and go to state 70


state 95

    (72) op -> > IGUAL .

    INT             reduce using rule 72 (op -> > IGUAL .)
    FLOAT           reduce using rule 72 (op -> > IGUAL .)
    ID              reduce using rule 72 (op -> > IGUAL .)
    (               reduce using rule 72 (op -> > IGUAL .)


state 96

    (73) op -> < IGUAL .

    INT             reduce using rule 73 (op -> < IGUAL .)
    FLOAT           reduce using rule 73 (op -> < IGUAL .)
    ID              reduce using rule 73 (op -> < IGUAL .)
    (               reduce using rule 73 (op -> < IGUAL .)


state 97

    (49) termo -> termo * fator .

    *               reduce using rule 49 (termo -> termo * fator .)
    /               reduce using rule 49 (termo -> termo * fator .)
    ^               reduce using rule 49 (termo -> termo * fator .)
    +               reduce using rule 49 (termo -> termo * fator .)
    -               reduce using rule 49 (termo -> termo * fator .)
    >               reduce using rule 49 (termo -> termo * fator .)
    <               reduce using rule 49 (termo -> termo * fator .)
    IGUAL           reduce using rule 49 (termo -> termo * fator .)
    DIFERENTE       reduce using rule 49 (termo -> termo * fator .)
    ;               reduce using rule 49 (termo -> termo * fator .)
    )               reduce using rule 49 (termo -> termo * fator .)
    :               reduce using rule 49 (termo -> termo * fator .)
    ,               reduce using rule 49 (termo -> termo * fator .)
    .               reduce using rule 49 (termo -> termo * fator .)
    HACER           reduce using rule 49 (termo -> termo * fator .)
    AND             reduce using rule 49 (termo -> termo * fator .)
    ENTONCES        reduce using rule 49 (termo -> termo * fator .)
    OR              reduce using rule 49 (termo -> termo * fator .)
    SIGUIENTE       reduce using rule 49 (termo -> termo * fator .)


state 98

    (50) termo -> termo / fator .

    *               reduce using rule 50 (termo -> termo / fator .)
    /               reduce using rule 50 (termo -> termo / fator .)
    ^               reduce using rule 50 (termo -> termo / fator .)
    +               reduce using rule 50 (termo -> termo / fator .)
    -               reduce using rule 50 (termo -> termo / fator .)
    >               reduce using rule 50 (termo -> termo / fator .)
    <               reduce using rule 50 (termo -> termo / fator .)
    IGUAL           reduce using rule 50 (termo -> termo / fator .)
    DIFERENTE       reduce using rule 50 (termo -> termo / fator .)
    ;               reduce using rule 50 (termo -> termo / fator .)
    )               reduce using rule 50 (termo -> termo / fator .)
    :               reduce using rule 50 (termo -> termo / fator .)
    ,               reduce using rule 50 (termo -> termo / fator .)
    .               reduce using rule 50 (termo -> termo / fator .)
    HACER           reduce using rule 50 (termo -> termo / fator .)
    AND             reduce using rule 50 (termo -> termo / fator .)
    ENTONCES        reduce using rule 50 (termo -> termo / fator .)
    OR              reduce using rule 50 (termo -> termo / fator .)
    SIGUIENTE       reduce using rule 50 (termo -> termo / fator .)


state 99

    (51) termo -> termo ^ fator .

    *               reduce using rule 51 (termo -> termo ^ fator .)
    /               reduce using rule 51 (termo -> termo ^ fator .)
    ^               reduce using rule 51 (termo -> termo ^ fator .)
    +               reduce using rule 51 (termo -> termo ^ fator .)
    -               reduce using rule 51 (termo -> termo ^ fator .)
    >               reduce using rule 51 (termo -> termo ^ fator .)
    <               reduce using rule 51 (termo -> termo ^ fator .)
    IGUAL           reduce using rule 51 (termo -> termo ^ fator .)
    DIFERENTE       reduce using rule 51 (termo -> termo ^ fator .)
    ;               reduce using rule 51 (termo -> termo ^ fator .)
    )               reduce using rule 51 (termo -> termo ^ fator .)
    :               reduce using rule 51 (termo -> termo ^ fator .)
    ,               reduce using rule 51 (termo -> termo ^ fator .)
    .               reduce using rule 51 (termo -> termo ^ fator .)
    HACER           reduce using rule 51 (termo -> termo ^ fator .)
    AND             reduce using rule 51 (termo -> termo ^ fator .)
    ENTONCES        reduce using rule 51 (termo -> termo ^ fator .)
    OR              reduce using rule 51 (termo -> termo ^ fator .)
    SIGUIENTE       reduce using rule 51 (termo -> termo ^ fator .)


state 100

    (74) ciclos -> ENCUANTO expL HACER statements . .
    (37) statements -> statements . stat
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (41) stat -> . readwrite
    (42) atrib -> . ID = STRING
    (43) atrib -> . ID = VERDADERO
    (44) atrib -> . ID = FALSO
    (45) atrib -> . ID = exp
    (57) conditions -> . SI expL ENTONCES statements endcondition
    (74) ciclos -> . ENCUANTO expL HACER statements .
    (75) ciclos -> . PARA expL SIGUIENTE atrib .
    (76) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (77) readwrite -> . ESCRIBIR ( ID )
    (78) readwrite -> . ID = LEER ( STRING )

    .               shift and go to state 120
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    stat                           shift and go to state 27
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 101

    (75) ciclos -> PARA expL SIGUIENTE atrib . .
    (76) ciclos -> PARA expL SIGUIENTE atrib . HACER statements .

    .               shift and go to state 121
    HACER           shift and go to state 122


state 102

    (42) atrib -> ID . = STRING
    (43) atrib -> ID . = VERDADERO
    (44) atrib -> ID . = FALSO
    (45) atrib -> ID . = exp

    =               shift and go to state 47


state 103

    (77) readwrite -> ESCRIBIR ( ID ) .

    ID              reduce using rule 77 (readwrite -> ESCRIBIR ( ID ) .)
    SI              reduce using rule 77 (readwrite -> ESCRIBIR ( ID ) .)
    ENCUANTO        reduce using rule 77 (readwrite -> ESCRIBIR ( ID ) .)
    PARA            reduce using rule 77 (readwrite -> ESCRIBIR ( ID ) .)
    ESCRIBIR        reduce using rule 77 (readwrite -> ESCRIBIR ( ID ) .)
    $end            reduce using rule 77 (readwrite -> ESCRIBIR ( ID ) .)
    .               reduce using rule 77 (readwrite -> ESCRIBIR ( ID ) .)
    CASO            reduce using rule 77 (readwrite -> ESCRIBIR ( ID ) .)
    DEVUELVE        reduce using rule 77 (readwrite -> ESCRIBIR ( ID ) .)


state 104

    (29) parametros -> ID : . tipo
    (12) tipo -> . ENTERO
    (13) tipo -> . REAL
    (14) tipo -> . BOOLEANO
    (15) tipo -> . STR

    ENTERO          shift and go to state 75
    REAL            shift and go to state 76
    BOOLEANO        shift and go to state 77
    STR             shift and go to state 78

    tipo                           shift and go to state 123

state 105

    (27) declF -> FUNCION ID ( parametros ) . : tipo declarations statements DEVUELVE return .

    :               shift and go to state 124


state 106

    (30) parametros -> parametros , . ID : tipo

    ID              shift and go to state 125


state 107

    (17) lista -> [ ] .

    VAR             reduce using rule 17 (lista -> [ ] .)
    FUNCION         reduce using rule 17 (lista -> [ ] .)
    LISTA           reduce using rule 17 (lista -> [ ] .)
    ID              reduce using rule 17 (lista -> [ ] .)
    SI              reduce using rule 17 (lista -> [ ] .)
    ENCUANTO        reduce using rule 17 (lista -> [ ] .)
    PARA            reduce using rule 17 (lista -> [ ] .)
    ESCRIBIR        reduce using rule 17 (lista -> [ ] .)
    ]               reduce using rule 17 (lista -> [ ] .)
    ,               reduce using rule 17 (lista -> [ ] .)


state 108

    (18) lista -> [ elementos . ]
    (20) elementos -> elementos . , elemento

    ]               shift and go to state 126
    ,               shift and go to state 127


state 109

    (19) elementos -> elemento .

    ]               reduce using rule 19 (elementos -> elemento .)
    ,               reduce using rule 19 (elementos -> elemento .)


state 110

    (21) elemento -> INT .

    ]               reduce using rule 21 (elemento -> INT .)
    ,               reduce using rule 21 (elemento -> INT .)


state 111

    (22) elemento -> FLOAT .

    ]               reduce using rule 22 (elemento -> FLOAT .)
    ,               reduce using rule 22 (elemento -> FLOAT .)


state 112

    (23) elemento -> BOOLEANO .

    ]               reduce using rule 23 (elemento -> BOOLEANO .)
    ,               reduce using rule 23 (elemento -> BOOLEANO .)


state 113

    (24) elemento -> STRING .

    ]               reduce using rule 24 (elemento -> STRING .)
    ,               reduce using rule 24 (elemento -> STRING .)


state 114

    (25) elemento -> ID .

    ]               reduce using rule 25 (elemento -> ID .)
    ,               reduce using rule 25 (elemento -> ID .)


state 115

    (26) elemento -> lista .

    ]               reduce using rule 26 (elemento -> lista .)
    ,               reduce using rule 26 (elemento -> lista .)


state 116

    (78) readwrite -> ID = LEER ( STRING . )

    )               shift and go to state 128


state 117

    (57) conditions -> SI expL ENTONCES statements endcondition .

    ID              reduce using rule 57 (conditions -> SI expL ENTONCES statements endcondition .)
    SI              reduce using rule 57 (conditions -> SI expL ENTONCES statements endcondition .)
    ENCUANTO        reduce using rule 57 (conditions -> SI expL ENTONCES statements endcondition .)
    PARA            reduce using rule 57 (conditions -> SI expL ENTONCES statements endcondition .)
    ESCRIBIR        reduce using rule 57 (conditions -> SI expL ENTONCES statements endcondition .)
    $end            reduce using rule 57 (conditions -> SI expL ENTONCES statements endcondition .)
    .               reduce using rule 57 (conditions -> SI expL ENTONCES statements endcondition .)
    CASO            reduce using rule 57 (conditions -> SI expL ENTONCES statements endcondition .)
    DEVUELVE        reduce using rule 57 (conditions -> SI expL ENTONCES statements endcondition .)


state 118

    (58) endcondition -> . .

    ID              reduce using rule 58 (endcondition -> . .)
    SI              reduce using rule 58 (endcondition -> . .)
    ENCUANTO        reduce using rule 58 (endcondition -> . .)
    PARA            reduce using rule 58 (endcondition -> . .)
    ESCRIBIR        reduce using rule 58 (endcondition -> . .)
    $end            reduce using rule 58 (endcondition -> . .)
    .               reduce using rule 58 (endcondition -> . .)
    CASO            reduce using rule 58 (endcondition -> . .)
    DEVUELVE        reduce using rule 58 (endcondition -> . .)


state 119

    (59) endcondition -> CASO . CONTRARIO statements .

    CONTRARIO       shift and go to state 129


state 120

    (74) ciclos -> ENCUANTO expL HACER statements . .

    ID              reduce using rule 74 (ciclos -> ENCUANTO expL HACER statements . .)
    SI              reduce using rule 74 (ciclos -> ENCUANTO expL HACER statements . .)
    ENCUANTO        reduce using rule 74 (ciclos -> ENCUANTO expL HACER statements . .)
    PARA            reduce using rule 74 (ciclos -> ENCUANTO expL HACER statements . .)
    ESCRIBIR        reduce using rule 74 (ciclos -> ENCUANTO expL HACER statements . .)
    $end            reduce using rule 74 (ciclos -> ENCUANTO expL HACER statements . .)
    .               reduce using rule 74 (ciclos -> ENCUANTO expL HACER statements . .)
    CASO            reduce using rule 74 (ciclos -> ENCUANTO expL HACER statements . .)
    DEVUELVE        reduce using rule 74 (ciclos -> ENCUANTO expL HACER statements . .)


state 121

    (75) ciclos -> PARA expL SIGUIENTE atrib . .

    ID              reduce using rule 75 (ciclos -> PARA expL SIGUIENTE atrib . .)
    SI              reduce using rule 75 (ciclos -> PARA expL SIGUIENTE atrib . .)
    ENCUANTO        reduce using rule 75 (ciclos -> PARA expL SIGUIENTE atrib . .)
    PARA            reduce using rule 75 (ciclos -> PARA expL SIGUIENTE atrib . .)
    ESCRIBIR        reduce using rule 75 (ciclos -> PARA expL SIGUIENTE atrib . .)
    $end            reduce using rule 75 (ciclos -> PARA expL SIGUIENTE atrib . .)
    .               reduce using rule 75 (ciclos -> PARA expL SIGUIENTE atrib . .)
    CASO            reduce using rule 75 (ciclos -> PARA expL SIGUIENTE atrib . .)
    DEVUELVE        reduce using rule 75 (ciclos -> PARA expL SIGUIENTE atrib . .)


state 122

    (76) ciclos -> PARA expL SIGUIENTE atrib HACER . statements .
    (36) statements -> . stat
    (37) statements -> . statements stat
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (41) stat -> . readwrite
    (42) atrib -> . ID = STRING
    (43) atrib -> . ID = VERDADERO
    (44) atrib -> . ID = FALSO
    (45) atrib -> . ID = exp
    (57) conditions -> . SI expL ENTONCES statements endcondition
    (74) ciclos -> . ENCUANTO expL HACER statements .
    (75) ciclos -> . PARA expL SIGUIENTE atrib .
    (76) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (77) readwrite -> . ESCRIBIR ( ID )
    (78) readwrite -> . ID = LEER ( STRING )

    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    atrib                          shift and go to state 13
    statements                     shift and go to state 130
    stat                           shift and go to state 12
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 123

    (29) parametros -> ID : tipo .

    )               reduce using rule 29 (parametros -> ID : tipo .)
    ,               reduce using rule 29 (parametros -> ID : tipo .)


state 124

    (27) declF -> FUNCION ID ( parametros ) : . tipo declarations statements DEVUELVE return .
    (12) tipo -> . ENTERO
    (13) tipo -> . REAL
    (14) tipo -> . BOOLEANO
    (15) tipo -> . STR

    ENTERO          shift and go to state 75
    REAL            shift and go to state 76
    BOOLEANO        shift and go to state 77
    STR             shift and go to state 78

    tipo                           shift and go to state 131

state 125

    (30) parametros -> parametros , ID . : tipo

    :               shift and go to state 132


state 126

    (18) lista -> [ elementos ] .

    VAR             reduce using rule 18 (lista -> [ elementos ] .)
    FUNCION         reduce using rule 18 (lista -> [ elementos ] .)
    LISTA           reduce using rule 18 (lista -> [ elementos ] .)
    ID              reduce using rule 18 (lista -> [ elementos ] .)
    SI              reduce using rule 18 (lista -> [ elementos ] .)
    ENCUANTO        reduce using rule 18 (lista -> [ elementos ] .)
    PARA            reduce using rule 18 (lista -> [ elementos ] .)
    ESCRIBIR        reduce using rule 18 (lista -> [ elementos ] .)
    ]               reduce using rule 18 (lista -> [ elementos ] .)
    ,               reduce using rule 18 (lista -> [ elementos ] .)


state 127

    (20) elementos -> elementos , . elemento
    (21) elemento -> . INT
    (22) elemento -> . FLOAT
    (23) elemento -> . BOOLEANO
    (24) elemento -> . STRING
    (25) elemento -> . ID
    (26) elemento -> . lista
    (17) lista -> . [ ]
    (18) lista -> . [ elementos ]

    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    BOOLEANO        shift and go to state 112
    STRING          shift and go to state 113
    ID              shift and go to state 114
    [               shift and go to state 84

    elemento                       shift and go to state 133
    lista                          shift and go to state 115

state 128

    (78) readwrite -> ID = LEER ( STRING ) .

    ID              reduce using rule 78 (readwrite -> ID = LEER ( STRING ) .)
    SI              reduce using rule 78 (readwrite -> ID = LEER ( STRING ) .)
    ENCUANTO        reduce using rule 78 (readwrite -> ID = LEER ( STRING ) .)
    PARA            reduce using rule 78 (readwrite -> ID = LEER ( STRING ) .)
    ESCRIBIR        reduce using rule 78 (readwrite -> ID = LEER ( STRING ) .)
    $end            reduce using rule 78 (readwrite -> ID = LEER ( STRING ) .)
    .               reduce using rule 78 (readwrite -> ID = LEER ( STRING ) .)
    CASO            reduce using rule 78 (readwrite -> ID = LEER ( STRING ) .)
    DEVUELVE        reduce using rule 78 (readwrite -> ID = LEER ( STRING ) .)


state 129

    (59) endcondition -> CASO CONTRARIO . statements .
    (36) statements -> . stat
    (37) statements -> . statements stat
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (41) stat -> . readwrite
    (42) atrib -> . ID = STRING
    (43) atrib -> . ID = VERDADERO
    (44) atrib -> . ID = FALSO
    (45) atrib -> . ID = exp
    (57) conditions -> . SI expL ENTONCES statements endcondition
    (74) ciclos -> . ENCUANTO expL HACER statements .
    (75) ciclos -> . PARA expL SIGUIENTE atrib .
    (76) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (77) readwrite -> . ESCRIBIR ( ID )
    (78) readwrite -> . ID = LEER ( STRING )

    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    statements                     shift and go to state 134
    stat                           shift and go to state 12
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 130

    (76) ciclos -> PARA expL SIGUIENTE atrib HACER statements . .
    (37) statements -> statements . stat
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (41) stat -> . readwrite
    (42) atrib -> . ID = STRING
    (43) atrib -> . ID = VERDADERO
    (44) atrib -> . ID = FALSO
    (45) atrib -> . ID = exp
    (57) conditions -> . SI expL ENTONCES statements endcondition
    (74) ciclos -> . ENCUANTO expL HACER statements .
    (75) ciclos -> . PARA expL SIGUIENTE atrib .
    (76) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (77) readwrite -> . ESCRIBIR ( ID )
    (78) readwrite -> . ID = LEER ( STRING )

    .               shift and go to state 135
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    atrib                          shift and go to state 13
    stat                           shift and go to state 27
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 131

    (27) declF -> FUNCION ID ( parametros ) : tipo . declarations statements DEVUELVE return .
    (2) declarations -> . decl
    (3) declarations -> . declarations decl
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (7) declV -> . VAR vari : tipo
    (27) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (16) declL -> . LISTA ID = lista

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9

    declarations                   shift and go to state 136
    decl                           shift and go to state 3
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6

state 132

    (30) parametros -> parametros , ID : . tipo
    (12) tipo -> . ENTERO
    (13) tipo -> . REAL
    (14) tipo -> . BOOLEANO
    (15) tipo -> . STR

    ENTERO          shift and go to state 75
    REAL            shift and go to state 76
    BOOLEANO        shift and go to state 77
    STR             shift and go to state 78

    tipo                           shift and go to state 137

state 133

    (20) elementos -> elementos , elemento .

    ]               reduce using rule 20 (elementos -> elementos , elemento .)
    ,               reduce using rule 20 (elementos -> elementos , elemento .)


state 134

    (59) endcondition -> CASO CONTRARIO statements . .
    (37) statements -> statements . stat
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (41) stat -> . readwrite
    (42) atrib -> . ID = STRING
    (43) atrib -> . ID = VERDADERO
    (44) atrib -> . ID = FALSO
    (45) atrib -> . ID = exp
    (57) conditions -> . SI expL ENTONCES statements endcondition
    (74) ciclos -> . ENCUANTO expL HACER statements .
    (75) ciclos -> . PARA expL SIGUIENTE atrib .
    (76) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (77) readwrite -> . ESCRIBIR ( ID )
    (78) readwrite -> . ID = LEER ( STRING )

    .               shift and go to state 138
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    stat                           shift and go to state 27
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 135

    (76) ciclos -> PARA expL SIGUIENTE atrib HACER statements . .

    ID              reduce using rule 76 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    SI              reduce using rule 76 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    ENCUANTO        reduce using rule 76 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    PARA            reduce using rule 76 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    ESCRIBIR        reduce using rule 76 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    $end            reduce using rule 76 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    .               reduce using rule 76 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    CASO            reduce using rule 76 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)
    DEVUELVE        reduce using rule 76 (ciclos -> PARA expL SIGUIENTE atrib HACER statements . .)


state 136

    (27) declF -> FUNCION ID ( parametros ) : tipo declarations . statements DEVUELVE return .
    (3) declarations -> declarations . decl
    (36) statements -> . stat
    (37) statements -> . statements stat
    (4) decl -> . declV
    (5) decl -> . declF
    (6) decl -> . declL
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (41) stat -> . readwrite
    (7) declV -> . VAR vari : tipo
    (27) declF -> . FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return .
    (16) declL -> . LISTA ID = lista
    (42) atrib -> . ID = STRING
    (43) atrib -> . ID = VERDADERO
    (44) atrib -> . ID = FALSO
    (45) atrib -> . ID = exp
    (57) conditions -> . SI expL ENTONCES statements endcondition
    (74) ciclos -> . ENCUANTO expL HACER statements .
    (75) ciclos -> . PARA expL SIGUIENTE atrib .
    (76) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (77) readwrite -> . ESCRIBIR ( ID )
    (78) readwrite -> . ID = LEER ( STRING )

    VAR             shift and go to state 7
    FUNCION         shift and go to state 8
    LISTA           shift and go to state 9
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    statements                     shift and go to state 139
    decl                           shift and go to state 11
    stat                           shift and go to state 12
    declV                          shift and go to state 4
    declF                          shift and go to state 5
    declL                          shift and go to state 6
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 137

    (30) parametros -> parametros , ID : tipo .

    )               reduce using rule 30 (parametros -> parametros , ID : tipo .)
    ,               reduce using rule 30 (parametros -> parametros , ID : tipo .)


state 138

    (59) endcondition -> CASO CONTRARIO statements . .

    ID              reduce using rule 59 (endcondition -> CASO CONTRARIO statements . .)
    SI              reduce using rule 59 (endcondition -> CASO CONTRARIO statements . .)
    ENCUANTO        reduce using rule 59 (endcondition -> CASO CONTRARIO statements . .)
    PARA            reduce using rule 59 (endcondition -> CASO CONTRARIO statements . .)
    ESCRIBIR        reduce using rule 59 (endcondition -> CASO CONTRARIO statements . .)
    $end            reduce using rule 59 (endcondition -> CASO CONTRARIO statements . .)
    .               reduce using rule 59 (endcondition -> CASO CONTRARIO statements . .)
    CASO            reduce using rule 59 (endcondition -> CASO CONTRARIO statements . .)
    DEVUELVE        reduce using rule 59 (endcondition -> CASO CONTRARIO statements . .)


state 139

    (27) declF -> FUNCION ID ( parametros ) : tipo declarations statements . DEVUELVE return .
    (37) statements -> statements . stat
    (38) stat -> . atrib ;
    (39) stat -> . conditions
    (40) stat -> . ciclos
    (41) stat -> . readwrite
    (42) atrib -> . ID = STRING
    (43) atrib -> . ID = VERDADERO
    (44) atrib -> . ID = FALSO
    (45) atrib -> . ID = exp
    (57) conditions -> . SI expL ENTONCES statements endcondition
    (74) ciclos -> . ENCUANTO expL HACER statements .
    (75) ciclos -> . PARA expL SIGUIENTE atrib .
    (76) ciclos -> . PARA expL SIGUIENTE atrib HACER statements .
    (77) readwrite -> . ESCRIBIR ( ID )
    (78) readwrite -> . ID = LEER ( STRING )

    DEVUELVE        shift and go to state 140
    ID              shift and go to state 17
    SI              shift and go to state 18
    ENCUANTO        shift and go to state 19
    PARA            shift and go to state 20
    ESCRIBIR        shift and go to state 21

    stat                           shift and go to state 27
    atrib                          shift and go to state 13
    conditions                     shift and go to state 14
    ciclos                         shift and go to state 15
    readwrite                      shift and go to state 16

state 140

    (27) declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE . return .
    (31) return -> . INT
    (32) return -> . ID
    (33) return -> . FLOAT
    (34) return -> . VERDADERO
    (35) return -> . FALSO

    INT             shift and go to state 143
    ID              shift and go to state 141
    FLOAT           shift and go to state 144
    VERDADERO       shift and go to state 145
    FALSO           shift and go to state 146

    return                         shift and go to state 142

state 141

    (32) return -> ID .

    .               reduce using rule 32 (return -> ID .)


state 142

    (27) declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .

    .               shift and go to state 147


state 143

    (31) return -> INT .

    .               reduce using rule 31 (return -> INT .)


state 144

    (33) return -> FLOAT .

    .               reduce using rule 33 (return -> FLOAT .)


state 145

    (34) return -> VERDADERO .

    .               reduce using rule 34 (return -> VERDADERO .)


state 146

    (35) return -> FALSO .

    .               reduce using rule 35 (return -> FALSO .)


state 147

    (27) declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .

    VAR             reduce using rule 27 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    FUNCION         reduce using rule 27 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    LISTA           reduce using rule 27 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    ID              reduce using rule 27 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    SI              reduce using rule 27 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    ENCUANTO        reduce using rule 27 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    PARA            reduce using rule 27 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)
    ESCRIBIR        reduce using rule 27 (declF -> FUNCION ID ( parametros ) : tipo declarations statements DEVUELVE return . .)

